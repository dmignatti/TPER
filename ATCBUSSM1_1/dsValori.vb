'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsValori
    Inherits DataSet
    
    Private tableLavoriStradaliCausali As LavoriStradaliCausaliDataTable
    
    Private tableLavoriStradaliEsecutori As LavoriStradaliEsecutoriDataTable
    
    Private tableLavoriStradaliTipi As LavoriStradaliTipiDataTable
    
    Private tableLavoriStradaliToponimi As LavoriStradaliToponimiDataTable
    
    Private tableLavoriStradaliZone As LavoriStradaliZoneDataTable
    
    Private tableStradarioBologna As StradarioBolognaDataTable
    
    Private tableLavoriStradali As LavoriStradaliDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("LavoriStradaliCausali")) Is Nothing) Then
                Me.Tables.Add(New LavoriStradaliCausaliDataTable(ds.Tables("LavoriStradaliCausali")))
            End If
            If (Not (ds.Tables("LavoriStradaliEsecutori")) Is Nothing) Then
                Me.Tables.Add(New LavoriStradaliEsecutoriDataTable(ds.Tables("LavoriStradaliEsecutori")))
            End If
            If (Not (ds.Tables("LavoriStradaliTipi")) Is Nothing) Then
                Me.Tables.Add(New LavoriStradaliTipiDataTable(ds.Tables("LavoriStradaliTipi")))
            End If
            If (Not (ds.Tables("LavoriStradaliToponimi")) Is Nothing) Then
                Me.Tables.Add(New LavoriStradaliToponimiDataTable(ds.Tables("LavoriStradaliToponimi")))
            End If
            If (Not (ds.Tables("LavoriStradaliZone")) Is Nothing) Then
                Me.Tables.Add(New LavoriStradaliZoneDataTable(ds.Tables("LavoriStradaliZone")))
            End If
            If (Not (ds.Tables("StradarioBologna")) Is Nothing) Then
                Me.Tables.Add(New StradarioBolognaDataTable(ds.Tables("StradarioBologna")))
            End If
            If (Not (ds.Tables("LavoriStradali")) Is Nothing) Then
                Me.Tables.Add(New LavoriStradaliDataTable(ds.Tables("LavoriStradali")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LavoriStradaliCausali As LavoriStradaliCausaliDataTable
        Get
            Return Me.tableLavoriStradaliCausali
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LavoriStradaliEsecutori As LavoriStradaliEsecutoriDataTable
        Get
            Return Me.tableLavoriStradaliEsecutori
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LavoriStradaliTipi As LavoriStradaliTipiDataTable
        Get
            Return Me.tableLavoriStradaliTipi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LavoriStradaliToponimi As LavoriStradaliToponimiDataTable
        Get
            Return Me.tableLavoriStradaliToponimi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LavoriStradaliZone As LavoriStradaliZoneDataTable
        Get
            Return Me.tableLavoriStradaliZone
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StradarioBologna As StradarioBolognaDataTable
        Get
            Return Me.tableStradarioBologna
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LavoriStradali As LavoriStradaliDataTable
        Get
            Return Me.tableLavoriStradali
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsValori = CType(MyBase.Clone,dsValori)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("LavoriStradaliCausali")) Is Nothing) Then
            Me.Tables.Add(New LavoriStradaliCausaliDataTable(ds.Tables("LavoriStradaliCausali")))
        End If
        If (Not (ds.Tables("LavoriStradaliEsecutori")) Is Nothing) Then
            Me.Tables.Add(New LavoriStradaliEsecutoriDataTable(ds.Tables("LavoriStradaliEsecutori")))
        End If
        If (Not (ds.Tables("LavoriStradaliTipi")) Is Nothing) Then
            Me.Tables.Add(New LavoriStradaliTipiDataTable(ds.Tables("LavoriStradaliTipi")))
        End If
        If (Not (ds.Tables("LavoriStradaliToponimi")) Is Nothing) Then
            Me.Tables.Add(New LavoriStradaliToponimiDataTable(ds.Tables("LavoriStradaliToponimi")))
        End If
        If (Not (ds.Tables("LavoriStradaliZone")) Is Nothing) Then
            Me.Tables.Add(New LavoriStradaliZoneDataTable(ds.Tables("LavoriStradaliZone")))
        End If
        If (Not (ds.Tables("StradarioBologna")) Is Nothing) Then
            Me.Tables.Add(New StradarioBolognaDataTable(ds.Tables("StradarioBologna")))
        End If
        If (Not (ds.Tables("LavoriStradali")) Is Nothing) Then
            Me.Tables.Add(New LavoriStradaliDataTable(ds.Tables("LavoriStradali")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableLavoriStradaliCausali = CType(Me.Tables("LavoriStradaliCausali"),LavoriStradaliCausaliDataTable)
        If (Not (Me.tableLavoriStradaliCausali) Is Nothing) Then
            Me.tableLavoriStradaliCausali.InitVars
        End If
        Me.tableLavoriStradaliEsecutori = CType(Me.Tables("LavoriStradaliEsecutori"),LavoriStradaliEsecutoriDataTable)
        If (Not (Me.tableLavoriStradaliEsecutori) Is Nothing) Then
            Me.tableLavoriStradaliEsecutori.InitVars
        End If
        Me.tableLavoriStradaliTipi = CType(Me.Tables("LavoriStradaliTipi"),LavoriStradaliTipiDataTable)
        If (Not (Me.tableLavoriStradaliTipi) Is Nothing) Then
            Me.tableLavoriStradaliTipi.InitVars
        End If
        Me.tableLavoriStradaliToponimi = CType(Me.Tables("LavoriStradaliToponimi"),LavoriStradaliToponimiDataTable)
        If (Not (Me.tableLavoriStradaliToponimi) Is Nothing) Then
            Me.tableLavoriStradaliToponimi.InitVars
        End If
        Me.tableLavoriStradaliZone = CType(Me.Tables("LavoriStradaliZone"),LavoriStradaliZoneDataTable)
        If (Not (Me.tableLavoriStradaliZone) Is Nothing) Then
            Me.tableLavoriStradaliZone.InitVars
        End If
        Me.tableStradarioBologna = CType(Me.Tables("StradarioBologna"),StradarioBolognaDataTable)
        If (Not (Me.tableStradarioBologna) Is Nothing) Then
            Me.tableStradarioBologna.InitVars
        End If
        Me.tableLavoriStradali = CType(Me.Tables("LavoriStradali"),LavoriStradaliDataTable)
        If (Not (Me.tableLavoriStradali) Is Nothing) Then
            Me.tableLavoriStradali.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsValori"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsValori.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableLavoriStradaliCausali = New LavoriStradaliCausaliDataTable
        Me.Tables.Add(Me.tableLavoriStradaliCausali)
        Me.tableLavoriStradaliEsecutori = New LavoriStradaliEsecutoriDataTable
        Me.Tables.Add(Me.tableLavoriStradaliEsecutori)
        Me.tableLavoriStradaliTipi = New LavoriStradaliTipiDataTable
        Me.Tables.Add(Me.tableLavoriStradaliTipi)
        Me.tableLavoriStradaliToponimi = New LavoriStradaliToponimiDataTable
        Me.Tables.Add(Me.tableLavoriStradaliToponimi)
        Me.tableLavoriStradaliZone = New LavoriStradaliZoneDataTable
        Me.Tables.Add(Me.tableLavoriStradaliZone)
        Me.tableStradarioBologna = New StradarioBolognaDataTable
        Me.Tables.Add(Me.tableStradarioBologna)
        Me.tableLavoriStradali = New LavoriStradaliDataTable
        Me.Tables.Add(Me.tableLavoriStradali)
    End Sub
    
    Private Function ShouldSerializeLavoriStradaliCausali() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLavoriStradaliEsecutori() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLavoriStradaliTipi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLavoriStradaliToponimi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLavoriStradaliZone() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStradarioBologna() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLavoriStradali() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub LavoriStradaliCausaliRowChangeEventHandler(ByVal sender As Object, ByVal e As LavoriStradaliCausaliRowChangeEvent)
    
    Public Delegate Sub LavoriStradaliEsecutoriRowChangeEventHandler(ByVal sender As Object, ByVal e As LavoriStradaliEsecutoriRowChangeEvent)
    
    Public Delegate Sub LavoriStradaliTipiRowChangeEventHandler(ByVal sender As Object, ByVal e As LavoriStradaliTipiRowChangeEvent)
    
    Public Delegate Sub LavoriStradaliToponimiRowChangeEventHandler(ByVal sender As Object, ByVal e As LavoriStradaliToponimiRowChangeEvent)
    
    Public Delegate Sub LavoriStradaliZoneRowChangeEventHandler(ByVal sender As Object, ByVal e As LavoriStradaliZoneRowChangeEvent)
    
    Public Delegate Sub StradarioBolognaRowChangeEventHandler(ByVal sender As Object, ByVal e As StradarioBolognaRowChangeEvent)
    
    Public Delegate Sub LavoriStradaliRowChangeEventHandler(ByVal sender As Object, ByVal e As LavoriStradaliRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliCausaliDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdCausale As DataColumn
        
        Private columnCausale As DataColumn
        
        Friend Sub New()
            MyBase.New("LavoriStradaliCausali")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdCausaleColumn As DataColumn
            Get
                Return Me.columnIdCausale
            End Get
        End Property
        
        Friend ReadOnly Property CausaleColumn As DataColumn
            Get
                Return Me.columnCausale
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LavoriStradaliCausaliRow
            Get
                Return CType(Me.Rows(index),LavoriStradaliCausaliRow)
            End Get
        End Property
        
        Public Event LavoriStradaliCausaliRowChanged As LavoriStradaliCausaliRowChangeEventHandler
        
        Public Event LavoriStradaliCausaliRowChanging As LavoriStradaliCausaliRowChangeEventHandler
        
        Public Event LavoriStradaliCausaliRowDeleted As LavoriStradaliCausaliRowChangeEventHandler
        
        Public Event LavoriStradaliCausaliRowDeleting As LavoriStradaliCausaliRowChangeEventHandler
        
        Public Overloads Sub AddLavoriStradaliCausaliRow(ByVal row As LavoriStradaliCausaliRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLavoriStradaliCausaliRow(ByVal IdCausale As Integer, ByVal Causale As String) As LavoriStradaliCausaliRow
            Dim rowLavoriStradaliCausaliRow As LavoriStradaliCausaliRow = CType(Me.NewRow,LavoriStradaliCausaliRow)
            rowLavoriStradaliCausaliRow.ItemArray = New Object() {IdCausale, Causale}
            Me.Rows.Add(rowLavoriStradaliCausaliRow)
            Return rowLavoriStradaliCausaliRow
        End Function
        
        Public Function FindByIdCausale(ByVal IdCausale As Integer) As LavoriStradaliCausaliRow
            Return CType(Me.Rows.Find(New Object() {IdCausale}),LavoriStradaliCausaliRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LavoriStradaliCausaliDataTable = CType(MyBase.Clone,LavoriStradaliCausaliDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LavoriStradaliCausaliDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdCausale = Me.Columns("IdCausale")
            Me.columnCausale = Me.Columns("Causale")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdCausale = New DataColumn("IdCausale", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdCausale)
            Me.columnCausale = New DataColumn("Causale", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCausale)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdCausale}, true))
            Me.columnIdCausale.AllowDBNull = false
            Me.columnIdCausale.Unique = true
        End Sub
        
        Public Function NewLavoriStradaliCausaliRow() As LavoriStradaliCausaliRow
            Return CType(Me.NewRow,LavoriStradaliCausaliRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LavoriStradaliCausaliRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LavoriStradaliCausaliRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LavoriStradaliCausaliRowChangedEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliCausaliRowChanged(Me, New LavoriStradaliCausaliRowChangeEvent(CType(e.Row,LavoriStradaliCausaliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LavoriStradaliCausaliRowChangingEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliCausaliRowChanging(Me, New LavoriStradaliCausaliRowChangeEvent(CType(e.Row,LavoriStradaliCausaliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LavoriStradaliCausaliRowDeletedEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliCausaliRowDeleted(Me, New LavoriStradaliCausaliRowChangeEvent(CType(e.Row,LavoriStradaliCausaliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LavoriStradaliCausaliRowDeletingEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliCausaliRowDeleting(Me, New LavoriStradaliCausaliRowChangeEvent(CType(e.Row,LavoriStradaliCausaliRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLavoriStradaliCausaliRow(ByVal row As LavoriStradaliCausaliRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliCausaliRow
        Inherits DataRow
        
        Private tableLavoriStradaliCausali As LavoriStradaliCausaliDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLavoriStradaliCausali = CType(Me.Table,LavoriStradaliCausaliDataTable)
        End Sub
        
        Public Property IdCausale As Integer
            Get
                Return CType(Me(Me.tableLavoriStradaliCausali.IdCausaleColumn),Integer)
            End Get
            Set
                Me(Me.tableLavoriStradaliCausali.IdCausaleColumn) = value
            End Set
        End Property
        
        Public Property Causale As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradaliCausali.CausaleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradaliCausali.CausaleColumn) = value
            End Set
        End Property
        
        Public Function IsCausaleNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradaliCausali.CausaleColumn)
        End Function
        
        Public Sub SetCausaleNull()
            Me(Me.tableLavoriStradaliCausali.CausaleColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliCausaliRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LavoriStradaliCausaliRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LavoriStradaliCausaliRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LavoriStradaliCausaliRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliEsecutoriDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdEsecutore As DataColumn
        
        Private columnEsecutore As DataColumn
        
        Friend Sub New()
            MyBase.New("LavoriStradaliEsecutori")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdEsecutoreColumn As DataColumn
            Get
                Return Me.columnIdEsecutore
            End Get
        End Property
        
        Friend ReadOnly Property EsecutoreColumn As DataColumn
            Get
                Return Me.columnEsecutore
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LavoriStradaliEsecutoriRow
            Get
                Return CType(Me.Rows(index),LavoriStradaliEsecutoriRow)
            End Get
        End Property
        
        Public Event LavoriStradaliEsecutoriRowChanged As LavoriStradaliEsecutoriRowChangeEventHandler
        
        Public Event LavoriStradaliEsecutoriRowChanging As LavoriStradaliEsecutoriRowChangeEventHandler
        
        Public Event LavoriStradaliEsecutoriRowDeleted As LavoriStradaliEsecutoriRowChangeEventHandler
        
        Public Event LavoriStradaliEsecutoriRowDeleting As LavoriStradaliEsecutoriRowChangeEventHandler
        
        Public Overloads Sub AddLavoriStradaliEsecutoriRow(ByVal row As LavoriStradaliEsecutoriRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLavoriStradaliEsecutoriRow(ByVal IdEsecutore As Integer, ByVal Esecutore As String) As LavoriStradaliEsecutoriRow
            Dim rowLavoriStradaliEsecutoriRow As LavoriStradaliEsecutoriRow = CType(Me.NewRow,LavoriStradaliEsecutoriRow)
            rowLavoriStradaliEsecutoriRow.ItemArray = New Object() {IdEsecutore, Esecutore}
            Me.Rows.Add(rowLavoriStradaliEsecutoriRow)
            Return rowLavoriStradaliEsecutoriRow
        End Function
        
        Public Function FindByIdEsecutore(ByVal IdEsecutore As Integer) As LavoriStradaliEsecutoriRow
            Return CType(Me.Rows.Find(New Object() {IdEsecutore}),LavoriStradaliEsecutoriRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LavoriStradaliEsecutoriDataTable = CType(MyBase.Clone,LavoriStradaliEsecutoriDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LavoriStradaliEsecutoriDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdEsecutore = Me.Columns("IdEsecutore")
            Me.columnEsecutore = Me.Columns("Esecutore")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdEsecutore = New DataColumn("IdEsecutore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdEsecutore)
            Me.columnEsecutore = New DataColumn("Esecutore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEsecutore)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdEsecutore}, true))
            Me.columnIdEsecutore.AllowDBNull = false
            Me.columnIdEsecutore.Unique = true
        End Sub
        
        Public Function NewLavoriStradaliEsecutoriRow() As LavoriStradaliEsecutoriRow
            Return CType(Me.NewRow,LavoriStradaliEsecutoriRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LavoriStradaliEsecutoriRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LavoriStradaliEsecutoriRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LavoriStradaliEsecutoriRowChangedEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliEsecutoriRowChanged(Me, New LavoriStradaliEsecutoriRowChangeEvent(CType(e.Row,LavoriStradaliEsecutoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LavoriStradaliEsecutoriRowChangingEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliEsecutoriRowChanging(Me, New LavoriStradaliEsecutoriRowChangeEvent(CType(e.Row,LavoriStradaliEsecutoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LavoriStradaliEsecutoriRowDeletedEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliEsecutoriRowDeleted(Me, New LavoriStradaliEsecutoriRowChangeEvent(CType(e.Row,LavoriStradaliEsecutoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LavoriStradaliEsecutoriRowDeletingEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliEsecutoriRowDeleting(Me, New LavoriStradaliEsecutoriRowChangeEvent(CType(e.Row,LavoriStradaliEsecutoriRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLavoriStradaliEsecutoriRow(ByVal row As LavoriStradaliEsecutoriRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliEsecutoriRow
        Inherits DataRow
        
        Private tableLavoriStradaliEsecutori As LavoriStradaliEsecutoriDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLavoriStradaliEsecutori = CType(Me.Table,LavoriStradaliEsecutoriDataTable)
        End Sub
        
        Public Property IdEsecutore As Integer
            Get
                Return CType(Me(Me.tableLavoriStradaliEsecutori.IdEsecutoreColumn),Integer)
            End Get
            Set
                Me(Me.tableLavoriStradaliEsecutori.IdEsecutoreColumn) = value
            End Set
        End Property
        
        Public Property Esecutore As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradaliEsecutori.EsecutoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradaliEsecutori.EsecutoreColumn) = value
            End Set
        End Property
        
        Public Function IsEsecutoreNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradaliEsecutori.EsecutoreColumn)
        End Function
        
        Public Sub SetEsecutoreNull()
            Me(Me.tableLavoriStradaliEsecutori.EsecutoreColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliEsecutoriRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LavoriStradaliEsecutoriRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LavoriStradaliEsecutoriRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LavoriStradaliEsecutoriRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliTipiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdTipo As DataColumn
        
        Private columnTipo As DataColumn
        
        Friend Sub New()
            MyBase.New("LavoriStradaliTipi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdTipoColumn As DataColumn
            Get
                Return Me.columnIdTipo
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LavoriStradaliTipiRow
            Get
                Return CType(Me.Rows(index),LavoriStradaliTipiRow)
            End Get
        End Property
        
        Public Event LavoriStradaliTipiRowChanged As LavoriStradaliTipiRowChangeEventHandler
        
        Public Event LavoriStradaliTipiRowChanging As LavoriStradaliTipiRowChangeEventHandler
        
        Public Event LavoriStradaliTipiRowDeleted As LavoriStradaliTipiRowChangeEventHandler
        
        Public Event LavoriStradaliTipiRowDeleting As LavoriStradaliTipiRowChangeEventHandler
        
        Public Overloads Sub AddLavoriStradaliTipiRow(ByVal row As LavoriStradaliTipiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLavoriStradaliTipiRow(ByVal IdTipo As Integer, ByVal Tipo As String) As LavoriStradaliTipiRow
            Dim rowLavoriStradaliTipiRow As LavoriStradaliTipiRow = CType(Me.NewRow,LavoriStradaliTipiRow)
            rowLavoriStradaliTipiRow.ItemArray = New Object() {IdTipo, Tipo}
            Me.Rows.Add(rowLavoriStradaliTipiRow)
            Return rowLavoriStradaliTipiRow
        End Function
        
        Public Function FindByIdTipo(ByVal IdTipo As Integer) As LavoriStradaliTipiRow
            Return CType(Me.Rows.Find(New Object() {IdTipo}),LavoriStradaliTipiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LavoriStradaliTipiDataTable = CType(MyBase.Clone,LavoriStradaliTipiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LavoriStradaliTipiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdTipo = Me.Columns("IdTipo")
            Me.columnTipo = Me.Columns("Tipo")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdTipo = New DataColumn("IdTipo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdTipo)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdTipo}, true))
            Me.columnIdTipo.AllowDBNull = false
            Me.columnIdTipo.Unique = true
        End Sub
        
        Public Function NewLavoriStradaliTipiRow() As LavoriStradaliTipiRow
            Return CType(Me.NewRow,LavoriStradaliTipiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LavoriStradaliTipiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LavoriStradaliTipiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LavoriStradaliTipiRowChangedEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliTipiRowChanged(Me, New LavoriStradaliTipiRowChangeEvent(CType(e.Row,LavoriStradaliTipiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LavoriStradaliTipiRowChangingEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliTipiRowChanging(Me, New LavoriStradaliTipiRowChangeEvent(CType(e.Row,LavoriStradaliTipiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LavoriStradaliTipiRowDeletedEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliTipiRowDeleted(Me, New LavoriStradaliTipiRowChangeEvent(CType(e.Row,LavoriStradaliTipiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LavoriStradaliTipiRowDeletingEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliTipiRowDeleting(Me, New LavoriStradaliTipiRowChangeEvent(CType(e.Row,LavoriStradaliTipiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLavoriStradaliTipiRow(ByVal row As LavoriStradaliTipiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliTipiRow
        Inherits DataRow
        
        Private tableLavoriStradaliTipi As LavoriStradaliTipiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLavoriStradaliTipi = CType(Me.Table,LavoriStradaliTipiDataTable)
        End Sub
        
        Public Property IdTipo As Integer
            Get
                Return CType(Me(Me.tableLavoriStradaliTipi.IdTipoColumn),Integer)
            End Get
            Set
                Me(Me.tableLavoriStradaliTipi.IdTipoColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradaliTipi.TipoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradaliTipi.TipoColumn) = value
            End Set
        End Property
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradaliTipi.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tableLavoriStradaliTipi.TipoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliTipiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LavoriStradaliTipiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LavoriStradaliTipiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LavoriStradaliTipiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliToponimiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdToponimo As DataColumn
        
        Private columnToponimo As DataColumn
        
        Friend Sub New()
            MyBase.New("LavoriStradaliToponimi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdToponimoColumn As DataColumn
            Get
                Return Me.columnIdToponimo
            End Get
        End Property
        
        Friend ReadOnly Property ToponimoColumn As DataColumn
            Get
                Return Me.columnToponimo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LavoriStradaliToponimiRow
            Get
                Return CType(Me.Rows(index),LavoriStradaliToponimiRow)
            End Get
        End Property
        
        Public Event LavoriStradaliToponimiRowChanged As LavoriStradaliToponimiRowChangeEventHandler
        
        Public Event LavoriStradaliToponimiRowChanging As LavoriStradaliToponimiRowChangeEventHandler
        
        Public Event LavoriStradaliToponimiRowDeleted As LavoriStradaliToponimiRowChangeEventHandler
        
        Public Event LavoriStradaliToponimiRowDeleting As LavoriStradaliToponimiRowChangeEventHandler
        
        Public Overloads Sub AddLavoriStradaliToponimiRow(ByVal row As LavoriStradaliToponimiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLavoriStradaliToponimiRow(ByVal IdToponimo As Integer, ByVal Toponimo As String) As LavoriStradaliToponimiRow
            Dim rowLavoriStradaliToponimiRow As LavoriStradaliToponimiRow = CType(Me.NewRow,LavoriStradaliToponimiRow)
            rowLavoriStradaliToponimiRow.ItemArray = New Object() {IdToponimo, Toponimo}
            Me.Rows.Add(rowLavoriStradaliToponimiRow)
            Return rowLavoriStradaliToponimiRow
        End Function
        
        Public Function FindByIdToponimo(ByVal IdToponimo As Integer) As LavoriStradaliToponimiRow
            Return CType(Me.Rows.Find(New Object() {IdToponimo}),LavoriStradaliToponimiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LavoriStradaliToponimiDataTable = CType(MyBase.Clone,LavoriStradaliToponimiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LavoriStradaliToponimiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdToponimo = Me.Columns("IdToponimo")
            Me.columnToponimo = Me.Columns("Toponimo")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdToponimo = New DataColumn("IdToponimo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdToponimo)
            Me.columnToponimo = New DataColumn("Toponimo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToponimo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdToponimo}, true))
            Me.columnIdToponimo.AllowDBNull = false
            Me.columnIdToponimo.Unique = true
        End Sub
        
        Public Function NewLavoriStradaliToponimiRow() As LavoriStradaliToponimiRow
            Return CType(Me.NewRow,LavoriStradaliToponimiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LavoriStradaliToponimiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LavoriStradaliToponimiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LavoriStradaliToponimiRowChangedEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliToponimiRowChanged(Me, New LavoriStradaliToponimiRowChangeEvent(CType(e.Row,LavoriStradaliToponimiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LavoriStradaliToponimiRowChangingEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliToponimiRowChanging(Me, New LavoriStradaliToponimiRowChangeEvent(CType(e.Row,LavoriStradaliToponimiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LavoriStradaliToponimiRowDeletedEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliToponimiRowDeleted(Me, New LavoriStradaliToponimiRowChangeEvent(CType(e.Row,LavoriStradaliToponimiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LavoriStradaliToponimiRowDeletingEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliToponimiRowDeleting(Me, New LavoriStradaliToponimiRowChangeEvent(CType(e.Row,LavoriStradaliToponimiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLavoriStradaliToponimiRow(ByVal row As LavoriStradaliToponimiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliToponimiRow
        Inherits DataRow
        
        Private tableLavoriStradaliToponimi As LavoriStradaliToponimiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLavoriStradaliToponimi = CType(Me.Table,LavoriStradaliToponimiDataTable)
        End Sub
        
        Public Property IdToponimo As Integer
            Get
                Return CType(Me(Me.tableLavoriStradaliToponimi.IdToponimoColumn),Integer)
            End Get
            Set
                Me(Me.tableLavoriStradaliToponimi.IdToponimoColumn) = value
            End Set
        End Property
        
        Public Property Toponimo As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradaliToponimi.ToponimoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradaliToponimi.ToponimoColumn) = value
            End Set
        End Property
        
        Public Function IsToponimoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradaliToponimi.ToponimoColumn)
        End Function
        
        Public Sub SetToponimoNull()
            Me(Me.tableLavoriStradaliToponimi.ToponimoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliToponimiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LavoriStradaliToponimiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LavoriStradaliToponimiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LavoriStradaliToponimiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliZoneDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdZona As DataColumn
        
        Private columnZona As DataColumn
        
        Friend Sub New()
            MyBase.New("LavoriStradaliZone")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdZonaColumn As DataColumn
            Get
                Return Me.columnIdZona
            End Get
        End Property
        
        Friend ReadOnly Property ZonaColumn As DataColumn
            Get
                Return Me.columnZona
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LavoriStradaliZoneRow
            Get
                Return CType(Me.Rows(index),LavoriStradaliZoneRow)
            End Get
        End Property
        
        Public Event LavoriStradaliZoneRowChanged As LavoriStradaliZoneRowChangeEventHandler
        
        Public Event LavoriStradaliZoneRowChanging As LavoriStradaliZoneRowChangeEventHandler
        
        Public Event LavoriStradaliZoneRowDeleted As LavoriStradaliZoneRowChangeEventHandler
        
        Public Event LavoriStradaliZoneRowDeleting As LavoriStradaliZoneRowChangeEventHandler
        
        Public Overloads Sub AddLavoriStradaliZoneRow(ByVal row As LavoriStradaliZoneRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLavoriStradaliZoneRow(ByVal IdZona As Integer, ByVal Zona As String) As LavoriStradaliZoneRow
            Dim rowLavoriStradaliZoneRow As LavoriStradaliZoneRow = CType(Me.NewRow,LavoriStradaliZoneRow)
            rowLavoriStradaliZoneRow.ItemArray = New Object() {IdZona, Zona}
            Me.Rows.Add(rowLavoriStradaliZoneRow)
            Return rowLavoriStradaliZoneRow
        End Function
        
        Public Function FindByIdZona(ByVal IdZona As Integer) As LavoriStradaliZoneRow
            Return CType(Me.Rows.Find(New Object() {IdZona}),LavoriStradaliZoneRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LavoriStradaliZoneDataTable = CType(MyBase.Clone,LavoriStradaliZoneDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LavoriStradaliZoneDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdZona = Me.Columns("IdZona")
            Me.columnZona = Me.Columns("Zona")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdZona = New DataColumn("IdZona", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdZona)
            Me.columnZona = New DataColumn("Zona", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnZona)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdZona}, true))
            Me.columnIdZona.AllowDBNull = false
            Me.columnIdZona.Unique = true
        End Sub
        
        Public Function NewLavoriStradaliZoneRow() As LavoriStradaliZoneRow
            Return CType(Me.NewRow,LavoriStradaliZoneRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LavoriStradaliZoneRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LavoriStradaliZoneRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LavoriStradaliZoneRowChangedEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliZoneRowChanged(Me, New LavoriStradaliZoneRowChangeEvent(CType(e.Row,LavoriStradaliZoneRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LavoriStradaliZoneRowChangingEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliZoneRowChanging(Me, New LavoriStradaliZoneRowChangeEvent(CType(e.Row,LavoriStradaliZoneRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LavoriStradaliZoneRowDeletedEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliZoneRowDeleted(Me, New LavoriStradaliZoneRowChangeEvent(CType(e.Row,LavoriStradaliZoneRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LavoriStradaliZoneRowDeletingEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliZoneRowDeleting(Me, New LavoriStradaliZoneRowChangeEvent(CType(e.Row,LavoriStradaliZoneRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLavoriStradaliZoneRow(ByVal row As LavoriStradaliZoneRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliZoneRow
        Inherits DataRow
        
        Private tableLavoriStradaliZone As LavoriStradaliZoneDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLavoriStradaliZone = CType(Me.Table,LavoriStradaliZoneDataTable)
        End Sub
        
        Public Property IdZona As Integer
            Get
                Return CType(Me(Me.tableLavoriStradaliZone.IdZonaColumn),Integer)
            End Get
            Set
                Me(Me.tableLavoriStradaliZone.IdZonaColumn) = value
            End Set
        End Property
        
        Public Property Zona As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradaliZone.ZonaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradaliZone.ZonaColumn) = value
            End Set
        End Property
        
        Public Function IsZonaNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradaliZone.ZonaColumn)
        End Function
        
        Public Sub SetZonaNull()
            Me(Me.tableLavoriStradaliZone.ZonaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliZoneRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LavoriStradaliZoneRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LavoriStradaliZoneRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LavoriStradaliZoneRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StradarioBolognaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodice As DataColumn
        
        Private columnNome As DataColumn
        
        Private columncod_comune As DataColumn
        
        Private columncod_prov As DataColumn
        
        Friend Sub New()
            MyBase.New("StradarioBologna")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodiceColumn As DataColumn
            Get
                Return Me.columnCodice
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property cod_comuneColumn As DataColumn
            Get
                Return Me.columncod_comune
            End Get
        End Property
        
        Friend ReadOnly Property cod_provColumn As DataColumn
            Get
                Return Me.columncod_prov
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As StradarioBolognaRow
            Get
                Return CType(Me.Rows(index),StradarioBolognaRow)
            End Get
        End Property
        
        Public Event StradarioBolognaRowChanged As StradarioBolognaRowChangeEventHandler
        
        Public Event StradarioBolognaRowChanging As StradarioBolognaRowChangeEventHandler
        
        Public Event StradarioBolognaRowDeleted As StradarioBolognaRowChangeEventHandler
        
        Public Event StradarioBolognaRowDeleting As StradarioBolognaRowChangeEventHandler
        
        Public Overloads Sub AddStradarioBolognaRow(ByVal row As StradarioBolognaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStradarioBolognaRow(ByVal Codice As Integer, ByVal Nome As String, ByVal cod_comune As Integer, ByVal cod_prov As Integer) As StradarioBolognaRow
            Dim rowStradarioBolognaRow As StradarioBolognaRow = CType(Me.NewRow,StradarioBolognaRow)
            rowStradarioBolognaRow.ItemArray = New Object() {Codice, Nome, cod_comune, cod_prov}
            Me.Rows.Add(rowStradarioBolognaRow)
            Return rowStradarioBolognaRow
        End Function
        
        Public Function FindByCodicecod_comunecod_prov(ByVal Codice As Integer, ByVal cod_comune As Integer, ByVal cod_prov As Integer) As StradarioBolognaRow
            Return CType(Me.Rows.Find(New Object() {Codice, cod_comune, cod_prov}),StradarioBolognaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As StradarioBolognaDataTable = CType(MyBase.Clone,StradarioBolognaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New StradarioBolognaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodice = Me.Columns("Codice")
            Me.columnNome = Me.Columns("Nome")
            Me.columncod_comune = Me.Columns("cod_comune")
            Me.columncod_prov = Me.Columns("cod_prov")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodice = New DataColumn("Codice", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodice)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columncod_comune = New DataColumn("cod_comune", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_comune)
            Me.columncod_prov = New DataColumn("cod_prov", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_prov)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodice, Me.columncod_comune, Me.columncod_prov}, true))
            Me.columnCodice.AllowDBNull = false
            Me.columncod_comune.AllowDBNull = false
            Me.columncod_prov.AllowDBNull = false
        End Sub
        
        Public Function NewStradarioBolognaRow() As StradarioBolognaRow
            Return CType(Me.NewRow,StradarioBolognaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New StradarioBolognaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(StradarioBolognaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StradarioBolognaRowChangedEvent) Is Nothing) Then
                RaiseEvent StradarioBolognaRowChanged(Me, New StradarioBolognaRowChangeEvent(CType(e.Row,StradarioBolognaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StradarioBolognaRowChangingEvent) Is Nothing) Then
                RaiseEvent StradarioBolognaRowChanging(Me, New StradarioBolognaRowChangeEvent(CType(e.Row,StradarioBolognaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StradarioBolognaRowDeletedEvent) Is Nothing) Then
                RaiseEvent StradarioBolognaRowDeleted(Me, New StradarioBolognaRowChangeEvent(CType(e.Row,StradarioBolognaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StradarioBolognaRowDeletingEvent) Is Nothing) Then
                RaiseEvent StradarioBolognaRowDeleting(Me, New StradarioBolognaRowChangeEvent(CType(e.Row,StradarioBolognaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStradarioBolognaRow(ByVal row As StradarioBolognaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StradarioBolognaRow
        Inherits DataRow
        
        Private tableStradarioBologna As StradarioBolognaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStradarioBologna = CType(Me.Table,StradarioBolognaDataTable)
        End Sub
        
        Public Property Codice As Integer
            Get
                Return CType(Me(Me.tableStradarioBologna.CodiceColumn),Integer)
            End Get
            Set
                Me(Me.tableStradarioBologna.CodiceColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableStradarioBologna.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStradarioBologna.NomeColumn) = value
            End Set
        End Property
        
        Public Property cod_comune As Integer
            Get
                Return CType(Me(Me.tableStradarioBologna.cod_comuneColumn),Integer)
            End Get
            Set
                Me(Me.tableStradarioBologna.cod_comuneColumn) = value
            End Set
        End Property
        
        Public Property cod_prov As Integer
            Get
                Return CType(Me(Me.tableStradarioBologna.cod_provColumn),Integer)
            End Get
            Set
                Me(Me.tableStradarioBologna.cod_provColumn) = value
            End Set
        End Property
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableStradarioBologna.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableStradarioBologna.NomeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StradarioBolognaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As StradarioBolognaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As StradarioBolognaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As StradarioBolognaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNome As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnCausale As DataColumn
        
        Private columnEsecutore As DataColumn
        
        Private columnZona As DataColumn
        
        Private columnId As DataColumn
        
        Private columnIdZona As DataColumn
        
        Private columnTitolo As DataColumn
        
        Private columnTesto As DataColumn
        
        Private columnFile As DataColumn
        
        Private columnExt As DataColumn
        
        Private columnDataInizio As DataColumn
        
        Private columnDataFine As DataColumn
        
        Private columnIdTipo As DataColumn
        
        Private columnIdCausale As DataColumn
        
        Private columnIdEsecutore As DataColumn
        
        Private columnIdVia As DataColumn
        
        Private columnOrdinanza As DataColumn
        
        Private columnPaliNuovi As DataColumn
        
        Private columnPaliEliminati As DataColumn
        
        Private columnPaliRipristinati As DataColumn
        
        Private columnCartelliNuovi As DataColumn
        
        Private columnCartelliEliminati As DataColumn
        
        Private columnCartelliRipristinati As DataColumn
        
        Private columnStalliONuovi As DataColumn
        
        Private columnStalliOEliminati As DataColumn
        
        Private columnStalliORipristinati As DataColumn
        
        Private columnStalliRRNuovi As DataColumn
        
        Private columnStalliRREliminati As DataColumn
        
        Private columnStalliRRRipristinati As DataColumn
        
        Private columnResidentiNuovi As DataColumn
        
        Private columnResidentiEliminati As DataColumn
        
        Private columnResidentiRipristinati As DataColumn
        
        Private columnStalliMotoNuovi As DataColumn
        
        Private columnStalliMotoEliminati As DataColumn
        
        Private columnStalliMotoRipristinati As DataColumn
        
        Private columnFittoniNuovi As DataColumn
        
        Private columnFittoniEliminati As DataColumn
        
        Private columnFittoniRipristinati As DataColumn
        
        Private columnFormaggioniNuovi As DataColumn
        
        Private columnFormaggioniEliminati As DataColumn
        
        Private columnFormaggioniRipristinati As DataColumn
        
        Private columnPaliExNovo As DataColumn
        
        Private columnCartelliExNovo As DataColumn
        
        Private columnStalliOExNovo As DataColumn
        
        Private columnStalliRRExNovo As DataColumn
        
        Private columnResidentiExNovo As DataColumn
        
        Private columnStalliMotoExNovo As DataColumn
        
        Private columnFittoniExNovo As DataColumn
        
        Private columnFormaggioniExNovo As DataColumn
        
        Private columnCarsharingNuovi As DataColumn
        
        Private columnCarsharingEliminati As DataColumn
        
        Private columnCarsharingRipristinati As DataColumn
        
        Private columnCarsharingExNovo As DataColumn
        
        Private columnDisabiliNuovi As DataColumn
        
        Private columnDisabiliEliminati As DataColumn
        
        Private columnDisabiliRipristinati As DataColumn
        
        Private columnDisabiliExNovo As DataColumn
        
        Private columnGenericiNuovi As DataColumn
        
        Private columnGenericiEliminati As DataColumn
        
        Private columnGenericiRipristinati As DataColumn
        
        Private columnGenericiExNovo As DataColumn
        
        Private columnDiscoOrarioNuovi As DataColumn
        
        Private columnDiscoOrarioEliminati As DataColumn
        
        Private columnDiscoOrarioRipristinati As DataColumn
        
        Private columnDiscoOrarioExNovo As DataColumn
        
        Private columnCaricoScaricoNuovi As DataColumn
        
        Private columnCaricoScaricoEliminati As DataColumn
        
        Private columnCaricoScaricoRipristinati As DataColumn
        
        Private columnCaricoScaricoExNovo As DataColumn
        
        Friend Sub New()
            MyBase.New("LavoriStradali")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property CausaleColumn As DataColumn
            Get
                Return Me.columnCausale
            End Get
        End Property
        
        Friend ReadOnly Property EsecutoreColumn As DataColumn
            Get
                Return Me.columnEsecutore
            End Get
        End Property
        
        Friend ReadOnly Property ZonaColumn As DataColumn
            Get
                Return Me.columnZona
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdZonaColumn As DataColumn
            Get
                Return Me.columnIdZona
            End Get
        End Property
        
        Friend ReadOnly Property TitoloColumn As DataColumn
            Get
                Return Me.columnTitolo
            End Get
        End Property
        
        Friend ReadOnly Property TestoColumn As DataColumn
            Get
                Return Me.columnTesto
            End Get
        End Property
        
        Friend ReadOnly Property FileColumn As DataColumn
            Get
                Return Me.columnFile
            End Get
        End Property
        
        Friend ReadOnly Property ExtColumn As DataColumn
            Get
                Return Me.columnExt
            End Get
        End Property
        
        Friend ReadOnly Property DataInizioColumn As DataColumn
            Get
                Return Me.columnDataInizio
            End Get
        End Property
        
        Friend ReadOnly Property DataFineColumn As DataColumn
            Get
                Return Me.columnDataFine
            End Get
        End Property
        
        Friend ReadOnly Property IdTipoColumn As DataColumn
            Get
                Return Me.columnIdTipo
            End Get
        End Property
        
        Friend ReadOnly Property IdCausaleColumn As DataColumn
            Get
                Return Me.columnIdCausale
            End Get
        End Property
        
        Friend ReadOnly Property IdEsecutoreColumn As DataColumn
            Get
                Return Me.columnIdEsecutore
            End Get
        End Property
        
        Friend ReadOnly Property IdViaColumn As DataColumn
            Get
                Return Me.columnIdVia
            End Get
        End Property
        
        Friend ReadOnly Property OrdinanzaColumn As DataColumn
            Get
                Return Me.columnOrdinanza
            End Get
        End Property
        
        Friend ReadOnly Property PaliNuoviColumn As DataColumn
            Get
                Return Me.columnPaliNuovi
            End Get
        End Property
        
        Friend ReadOnly Property PaliEliminatiColumn As DataColumn
            Get
                Return Me.columnPaliEliminati
            End Get
        End Property
        
        Friend ReadOnly Property PaliRipristinatiColumn As DataColumn
            Get
                Return Me.columnPaliRipristinati
            End Get
        End Property
        
        Friend ReadOnly Property CartelliNuoviColumn As DataColumn
            Get
                Return Me.columnCartelliNuovi
            End Get
        End Property
        
        Friend ReadOnly Property CartelliEliminatiColumn As DataColumn
            Get
                Return Me.columnCartelliEliminati
            End Get
        End Property
        
        Friend ReadOnly Property CartelliRipristinatiColumn As DataColumn
            Get
                Return Me.columnCartelliRipristinati
            End Get
        End Property
        
        Friend ReadOnly Property StalliONuoviColumn As DataColumn
            Get
                Return Me.columnStalliONuovi
            End Get
        End Property
        
        Friend ReadOnly Property StalliOEliminatiColumn As DataColumn
            Get
                Return Me.columnStalliOEliminati
            End Get
        End Property
        
        Friend ReadOnly Property StalliORipristinatiColumn As DataColumn
            Get
                Return Me.columnStalliORipristinati
            End Get
        End Property
        
        Friend ReadOnly Property StalliRRNuoviColumn As DataColumn
            Get
                Return Me.columnStalliRRNuovi
            End Get
        End Property
        
        Friend ReadOnly Property StalliRREliminatiColumn As DataColumn
            Get
                Return Me.columnStalliRREliminati
            End Get
        End Property
        
        Friend ReadOnly Property StalliRRRipristinatiColumn As DataColumn
            Get
                Return Me.columnStalliRRRipristinati
            End Get
        End Property
        
        Friend ReadOnly Property ResidentiNuoviColumn As DataColumn
            Get
                Return Me.columnResidentiNuovi
            End Get
        End Property
        
        Friend ReadOnly Property ResidentiEliminatiColumn As DataColumn
            Get
                Return Me.columnResidentiEliminati
            End Get
        End Property
        
        Friend ReadOnly Property ResidentiRipristinatiColumn As DataColumn
            Get
                Return Me.columnResidentiRipristinati
            End Get
        End Property
        
        Friend ReadOnly Property StalliMotoNuoviColumn As DataColumn
            Get
                Return Me.columnStalliMotoNuovi
            End Get
        End Property
        
        Friend ReadOnly Property StalliMotoEliminatiColumn As DataColumn
            Get
                Return Me.columnStalliMotoEliminati
            End Get
        End Property
        
        Friend ReadOnly Property StalliMotoRipristinatiColumn As DataColumn
            Get
                Return Me.columnStalliMotoRipristinati
            End Get
        End Property
        
        Friend ReadOnly Property FittoniNuoviColumn As DataColumn
            Get
                Return Me.columnFittoniNuovi
            End Get
        End Property
        
        Friend ReadOnly Property FittoniEliminatiColumn As DataColumn
            Get
                Return Me.columnFittoniEliminati
            End Get
        End Property
        
        Friend ReadOnly Property FittoniRipristinatiColumn As DataColumn
            Get
                Return Me.columnFittoniRipristinati
            End Get
        End Property
        
        Friend ReadOnly Property FormaggioniNuoviColumn As DataColumn
            Get
                Return Me.columnFormaggioniNuovi
            End Get
        End Property
        
        Friend ReadOnly Property FormaggioniEliminatiColumn As DataColumn
            Get
                Return Me.columnFormaggioniEliminati
            End Get
        End Property
        
        Friend ReadOnly Property FormaggioniRipristinatiColumn As DataColumn
            Get
                Return Me.columnFormaggioniRipristinati
            End Get
        End Property
        
        Friend ReadOnly Property PaliExNovoColumn As DataColumn
            Get
                Return Me.columnPaliExNovo
            End Get
        End Property
        
        Friend ReadOnly Property CartelliExNovoColumn As DataColumn
            Get
                Return Me.columnCartelliExNovo
            End Get
        End Property
        
        Friend ReadOnly Property StalliOExNovoColumn As DataColumn
            Get
                Return Me.columnStalliOExNovo
            End Get
        End Property
        
        Friend ReadOnly Property StalliRRExNovoColumn As DataColumn
            Get
                Return Me.columnStalliRRExNovo
            End Get
        End Property
        
        Friend ReadOnly Property ResidentiExNovoColumn As DataColumn
            Get
                Return Me.columnResidentiExNovo
            End Get
        End Property
        
        Friend ReadOnly Property StalliMotoExNovoColumn As DataColumn
            Get
                Return Me.columnStalliMotoExNovo
            End Get
        End Property
        
        Friend ReadOnly Property FittoniExNovoColumn As DataColumn
            Get
                Return Me.columnFittoniExNovo
            End Get
        End Property
        
        Friend ReadOnly Property FormaggioniExNovoColumn As DataColumn
            Get
                Return Me.columnFormaggioniExNovo
            End Get
        End Property
        
        Friend ReadOnly Property CarsharingNuoviColumn As DataColumn
            Get
                Return Me.columnCarsharingNuovi
            End Get
        End Property
        
        Friend ReadOnly Property CarsharingEliminatiColumn As DataColumn
            Get
                Return Me.columnCarsharingEliminati
            End Get
        End Property
        
        Friend ReadOnly Property CarsharingRipristinatiColumn As DataColumn
            Get
                Return Me.columnCarsharingRipristinati
            End Get
        End Property
        
        Friend ReadOnly Property CarsharingExNovoColumn As DataColumn
            Get
                Return Me.columnCarsharingExNovo
            End Get
        End Property
        
        Friend ReadOnly Property DisabiliNuoviColumn As DataColumn
            Get
                Return Me.columnDisabiliNuovi
            End Get
        End Property
        
        Friend ReadOnly Property DisabiliEliminatiColumn As DataColumn
            Get
                Return Me.columnDisabiliEliminati
            End Get
        End Property
        
        Friend ReadOnly Property DisabiliRipristinatiColumn As DataColumn
            Get
                Return Me.columnDisabiliRipristinati
            End Get
        End Property
        
        Friend ReadOnly Property DisabiliExNovoColumn As DataColumn
            Get
                Return Me.columnDisabiliExNovo
            End Get
        End Property
        
        Friend ReadOnly Property GenericiNuoviColumn As DataColumn
            Get
                Return Me.columnGenericiNuovi
            End Get
        End Property
        
        Friend ReadOnly Property GenericiEliminatiColumn As DataColumn
            Get
                Return Me.columnGenericiEliminati
            End Get
        End Property
        
        Friend ReadOnly Property GenericiRipristinatiColumn As DataColumn
            Get
                Return Me.columnGenericiRipristinati
            End Get
        End Property
        
        Friend ReadOnly Property GenericiExNovoColumn As DataColumn
            Get
                Return Me.columnGenericiExNovo
            End Get
        End Property
        
        Friend ReadOnly Property DiscoOrarioNuoviColumn As DataColumn
            Get
                Return Me.columnDiscoOrarioNuovi
            End Get
        End Property
        
        Friend ReadOnly Property DiscoOrarioEliminatiColumn As DataColumn
            Get
                Return Me.columnDiscoOrarioEliminati
            End Get
        End Property
        
        Friend ReadOnly Property DiscoOrarioRipristinatiColumn As DataColumn
            Get
                Return Me.columnDiscoOrarioRipristinati
            End Get
        End Property
        
        Friend ReadOnly Property DiscoOrarioExNovoColumn As DataColumn
            Get
                Return Me.columnDiscoOrarioExNovo
            End Get
        End Property
        
        Friend ReadOnly Property CaricoScaricoNuoviColumn As DataColumn
            Get
                Return Me.columnCaricoScaricoNuovi
            End Get
        End Property
        
        Friend ReadOnly Property CaricoScaricoEliminatiColumn As DataColumn
            Get
                Return Me.columnCaricoScaricoEliminati
            End Get
        End Property
        
        Friend ReadOnly Property CaricoScaricoRipristinatiColumn As DataColumn
            Get
                Return Me.columnCaricoScaricoRipristinati
            End Get
        End Property
        
        Friend ReadOnly Property CaricoScaricoExNovoColumn As DataColumn
            Get
                Return Me.columnCaricoScaricoExNovo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LavoriStradaliRow
            Get
                Return CType(Me.Rows(index),LavoriStradaliRow)
            End Get
        End Property
        
        Public Event LavoriStradaliRowChanged As LavoriStradaliRowChangeEventHandler
        
        Public Event LavoriStradaliRowChanging As LavoriStradaliRowChangeEventHandler
        
        Public Event LavoriStradaliRowDeleted As LavoriStradaliRowChangeEventHandler
        
        Public Event LavoriStradaliRowDeleting As LavoriStradaliRowChangeEventHandler
        
        Public Overloads Sub AddLavoriStradaliRow(ByVal row As LavoriStradaliRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLavoriStradaliRow( _
                    ByVal Nome As String,  _
                    ByVal Tipo As String,  _
                    ByVal Causale As String,  _
                    ByVal Esecutore As String,  _
                    ByVal Zona As String,  _
                    ByVal IdZona As String,  _
                    ByVal Titolo As String,  _
                    ByVal Testo As String,  _
                    ByVal File As System.Guid,  _
                    ByVal Ext As String,  _
                    ByVal DataInizio As Date,  _
                    ByVal DataFine As Date,  _
                    ByVal IdTipo As Integer,  _
                    ByVal IdCausale As Integer,  _
                    ByVal IdEsecutore As Integer,  _
                    ByVal IdVia As Integer,  _
                    ByVal Ordinanza As String,  _
                    ByVal PaliNuovi As Integer,  _
                    ByVal PaliEliminati As Integer,  _
                    ByVal PaliRipristinati As Integer,  _
                    ByVal CartelliNuovi As Integer,  _
                    ByVal CartelliEliminati As Integer,  _
                    ByVal CartelliRipristinati As Integer,  _
                    ByVal StalliONuovi As Integer,  _
                    ByVal StalliOEliminati As Integer,  _
                    ByVal StalliORipristinati As Integer,  _
                    ByVal StalliRRNuovi As Integer,  _
                    ByVal StalliRREliminati As Integer,  _
                    ByVal StalliRRRipristinati As Integer,  _
                    ByVal ResidentiNuovi As Integer,  _
                    ByVal ResidentiEliminati As Integer,  _
                    ByVal ResidentiRipristinati As Integer,  _
                    ByVal StalliMotoNuovi As Integer,  _
                    ByVal StalliMotoEliminati As Integer,  _
                    ByVal StalliMotoRipristinati As Integer,  _
                    ByVal FittoniNuovi As Integer,  _
                    ByVal FittoniEliminati As Integer,  _
                    ByVal FittoniRipristinati As Integer,  _
                    ByVal FormaggioniNuovi As Integer,  _
                    ByVal FormaggioniEliminati As Integer,  _
                    ByVal FormaggioniRipristinati As Integer,  _
                    ByVal PaliExNovo As Integer,  _
                    ByVal CartelliExNovo As Integer,  _
                    ByVal StalliOExNovo As Integer,  _
                    ByVal StalliRRExNovo As Integer,  _
                    ByVal ResidentiExNovo As Integer,  _
                    ByVal StalliMotoExNovo As Integer,  _
                    ByVal FittoniExNovo As Integer,  _
                    ByVal FormaggioniExNovo As Integer,  _
                    ByVal CarsharingNuovi As Integer,  _
                    ByVal CarsharingEliminati As Integer,  _
                    ByVal CarsharingRipristinati As Integer,  _
                    ByVal CarsharingExNovo As Integer,  _
                    ByVal DisabiliNuovi As Integer,  _
                    ByVal DisabiliEliminati As Integer,  _
                    ByVal DisabiliRipristinati As Integer,  _
                    ByVal DisabiliExNovo As Integer,  _
                    ByVal GenericiNuovi As Integer,  _
                    ByVal GenericiEliminati As Integer,  _
                    ByVal GenericiRipristinati As Integer,  _
                    ByVal GenericiExNovo As Integer,  _
                    ByVal DiscoOrarioNuovi As Integer,  _
                    ByVal DiscoOrarioEliminati As Integer,  _
                    ByVal DiscoOrarioRipristinati As Integer,  _
                    ByVal DiscoOrarioExNovo As Integer,  _
                    ByVal CaricoScaricoNuovi As Integer,  _
                    ByVal CaricoScaricoEliminati As Integer,  _
                    ByVal CaricoScaricoRipristinati As Integer,  _
                    ByVal CaricoScaricoExNovo As Integer) As LavoriStradaliRow
            Dim rowLavoriStradaliRow As LavoriStradaliRow = CType(Me.NewRow,LavoriStradaliRow)
            rowLavoriStradaliRow.ItemArray = New Object() {Nome, Tipo, Causale, Esecutore, Zona, Nothing, IdZona, Titolo, Testo, File, Ext, DataInizio, DataFine, IdTipo, IdCausale, IdEsecutore, IdVia, Ordinanza, PaliNuovi, PaliEliminati, PaliRipristinati, CartelliNuovi, CartelliEliminati, CartelliRipristinati, StalliONuovi, StalliOEliminati, StalliORipristinati, StalliRRNuovi, StalliRREliminati, StalliRRRipristinati, ResidentiNuovi, ResidentiEliminati, ResidentiRipristinati, StalliMotoNuovi, StalliMotoEliminati, StalliMotoRipristinati, FittoniNuovi, FittoniEliminati, FittoniRipristinati, FormaggioniNuovi, FormaggioniEliminati, FormaggioniRipristinati, PaliExNovo, CartelliExNovo, StalliOExNovo, StalliRRExNovo, ResidentiExNovo, StalliMotoExNovo, FittoniExNovo, FormaggioniExNovo, CarsharingNuovi, CarsharingEliminati, CarsharingRipristinati, CarsharingExNovo, DisabiliNuovi, DisabiliEliminati, DisabiliRipristinati, DisabiliExNovo, GenericiNuovi, GenericiEliminati, GenericiRipristinati, GenericiExNovo, DiscoOrarioNuovi, DiscoOrarioEliminati, DiscoOrarioRipristinati, DiscoOrarioExNovo, CaricoScaricoNuovi, CaricoScaricoEliminati, CaricoScaricoRipristinati, CaricoScaricoExNovo}
            Me.Rows.Add(rowLavoriStradaliRow)
            Return rowLavoriStradaliRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LavoriStradaliDataTable = CType(MyBase.Clone,LavoriStradaliDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LavoriStradaliDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNome = Me.Columns("Nome")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnCausale = Me.Columns("Causale")
            Me.columnEsecutore = Me.Columns("Esecutore")
            Me.columnZona = Me.Columns("Zona")
            Me.columnId = Me.Columns("Id")
            Me.columnIdZona = Me.Columns("IdZona")
            Me.columnTitolo = Me.Columns("Titolo")
            Me.columnTesto = Me.Columns("Testo")
            Me.columnFile = Me.Columns("File")
            Me.columnExt = Me.Columns("Ext")
            Me.columnDataInizio = Me.Columns("DataInizio")
            Me.columnDataFine = Me.Columns("DataFine")
            Me.columnIdTipo = Me.Columns("IdTipo")
            Me.columnIdCausale = Me.Columns("IdCausale")
            Me.columnIdEsecutore = Me.Columns("IdEsecutore")
            Me.columnIdVia = Me.Columns("IdVia")
            Me.columnOrdinanza = Me.Columns("Ordinanza")
            Me.columnPaliNuovi = Me.Columns("PaliNuovi")
            Me.columnPaliEliminati = Me.Columns("PaliEliminati")
            Me.columnPaliRipristinati = Me.Columns("PaliRipristinati")
            Me.columnCartelliNuovi = Me.Columns("CartelliNuovi")
            Me.columnCartelliEliminati = Me.Columns("CartelliEliminati")
            Me.columnCartelliRipristinati = Me.Columns("CartelliRipristinati")
            Me.columnStalliONuovi = Me.Columns("StalliONuovi")
            Me.columnStalliOEliminati = Me.Columns("StalliOEliminati")
            Me.columnStalliORipristinati = Me.Columns("StalliORipristinati")
            Me.columnStalliRRNuovi = Me.Columns("StalliRRNuovi")
            Me.columnStalliRREliminati = Me.Columns("StalliRREliminati")
            Me.columnStalliRRRipristinati = Me.Columns("StalliRRRipristinati")
            Me.columnResidentiNuovi = Me.Columns("ResidentiNuovi")
            Me.columnResidentiEliminati = Me.Columns("ResidentiEliminati")
            Me.columnResidentiRipristinati = Me.Columns("ResidentiRipristinati")
            Me.columnStalliMotoNuovi = Me.Columns("StalliMotoNuovi")
            Me.columnStalliMotoEliminati = Me.Columns("StalliMotoEliminati")
            Me.columnStalliMotoRipristinati = Me.Columns("StalliMotoRipristinati")
            Me.columnFittoniNuovi = Me.Columns("FittoniNuovi")
            Me.columnFittoniEliminati = Me.Columns("FittoniEliminati")
            Me.columnFittoniRipristinati = Me.Columns("FittoniRipristinati")
            Me.columnFormaggioniNuovi = Me.Columns("FormaggioniNuovi")
            Me.columnFormaggioniEliminati = Me.Columns("FormaggioniEliminati")
            Me.columnFormaggioniRipristinati = Me.Columns("FormaggioniRipristinati")
            Me.columnPaliExNovo = Me.Columns("PaliExNovo")
            Me.columnCartelliExNovo = Me.Columns("CartelliExNovo")
            Me.columnStalliOExNovo = Me.Columns("StalliOExNovo")
            Me.columnStalliRRExNovo = Me.Columns("StalliRRExNovo")
            Me.columnResidentiExNovo = Me.Columns("ResidentiExNovo")
            Me.columnStalliMotoExNovo = Me.Columns("StalliMotoExNovo")
            Me.columnFittoniExNovo = Me.Columns("FittoniExNovo")
            Me.columnFormaggioniExNovo = Me.Columns("FormaggioniExNovo")
            Me.columnCarsharingNuovi = Me.Columns("CarsharingNuovi")
            Me.columnCarsharingEliminati = Me.Columns("CarsharingEliminati")
            Me.columnCarsharingRipristinati = Me.Columns("CarsharingRipristinati")
            Me.columnCarsharingExNovo = Me.Columns("CarsharingExNovo")
            Me.columnDisabiliNuovi = Me.Columns("DisabiliNuovi")
            Me.columnDisabiliEliminati = Me.Columns("DisabiliEliminati")
            Me.columnDisabiliRipristinati = Me.Columns("DisabiliRipristinati")
            Me.columnDisabiliExNovo = Me.Columns("DisabiliExNovo")
            Me.columnGenericiNuovi = Me.Columns("GenericiNuovi")
            Me.columnGenericiEliminati = Me.Columns("GenericiEliminati")
            Me.columnGenericiRipristinati = Me.Columns("GenericiRipristinati")
            Me.columnGenericiExNovo = Me.Columns("GenericiExNovo")
            Me.columnDiscoOrarioNuovi = Me.Columns("DiscoOrarioNuovi")
            Me.columnDiscoOrarioEliminati = Me.Columns("DiscoOrarioEliminati")
            Me.columnDiscoOrarioRipristinati = Me.Columns("DiscoOrarioRipristinati")
            Me.columnDiscoOrarioExNovo = Me.Columns("DiscoOrarioExNovo")
            Me.columnCaricoScaricoNuovi = Me.Columns("CaricoScaricoNuovi")
            Me.columnCaricoScaricoEliminati = Me.Columns("CaricoScaricoEliminati")
            Me.columnCaricoScaricoRipristinati = Me.Columns("CaricoScaricoRipristinati")
            Me.columnCaricoScaricoExNovo = Me.Columns("CaricoScaricoExNovo")
        End Sub
        
        Private Sub InitClass()
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnCausale = New DataColumn("Causale", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCausale)
            Me.columnEsecutore = New DataColumn("Esecutore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEsecutore)
            Me.columnZona = New DataColumn("Zona", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnZona)
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdZona = New DataColumn("IdZona", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdZona)
            Me.columnTitolo = New DataColumn("Titolo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitolo)
            Me.columnTesto = New DataColumn("Testo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTesto)
            Me.columnFile = New DataColumn("File", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFile)
            Me.columnExt = New DataColumn("Ext", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExt)
            Me.columnDataInizio = New DataColumn("DataInizio", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataInizio)
            Me.columnDataFine = New DataColumn("DataFine", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataFine)
            Me.columnIdTipo = New DataColumn("IdTipo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdTipo)
            Me.columnIdCausale = New DataColumn("IdCausale", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdCausale)
            Me.columnIdEsecutore = New DataColumn("IdEsecutore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdEsecutore)
            Me.columnIdVia = New DataColumn("IdVia", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdVia)
            Me.columnOrdinanza = New DataColumn("Ordinanza", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdinanza)
            Me.columnPaliNuovi = New DataColumn("PaliNuovi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaliNuovi)
            Me.columnPaliEliminati = New DataColumn("PaliEliminati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaliEliminati)
            Me.columnPaliRipristinati = New DataColumn("PaliRipristinati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaliRipristinati)
            Me.columnCartelliNuovi = New DataColumn("CartelliNuovi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCartelliNuovi)
            Me.columnCartelliEliminati = New DataColumn("CartelliEliminati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCartelliEliminati)
            Me.columnCartelliRipristinati = New DataColumn("CartelliRipristinati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCartelliRipristinati)
            Me.columnStalliONuovi = New DataColumn("StalliONuovi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStalliONuovi)
            Me.columnStalliOEliminati = New DataColumn("StalliOEliminati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStalliOEliminati)
            Me.columnStalliORipristinati = New DataColumn("StalliORipristinati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStalliORipristinati)
            Me.columnStalliRRNuovi = New DataColumn("StalliRRNuovi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStalliRRNuovi)
            Me.columnStalliRREliminati = New DataColumn("StalliRREliminati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStalliRREliminati)
            Me.columnStalliRRRipristinati = New DataColumn("StalliRRRipristinati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStalliRRRipristinati)
            Me.columnResidentiNuovi = New DataColumn("ResidentiNuovi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResidentiNuovi)
            Me.columnResidentiEliminati = New DataColumn("ResidentiEliminati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResidentiEliminati)
            Me.columnResidentiRipristinati = New DataColumn("ResidentiRipristinati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResidentiRipristinati)
            Me.columnStalliMotoNuovi = New DataColumn("StalliMotoNuovi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStalliMotoNuovi)
            Me.columnStalliMotoEliminati = New DataColumn("StalliMotoEliminati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStalliMotoEliminati)
            Me.columnStalliMotoRipristinati = New DataColumn("StalliMotoRipristinati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStalliMotoRipristinati)
            Me.columnFittoniNuovi = New DataColumn("FittoniNuovi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFittoniNuovi)
            Me.columnFittoniEliminati = New DataColumn("FittoniEliminati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFittoniEliminati)
            Me.columnFittoniRipristinati = New DataColumn("FittoniRipristinati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFittoniRipristinati)
            Me.columnFormaggioniNuovi = New DataColumn("FormaggioniNuovi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormaggioniNuovi)
            Me.columnFormaggioniEliminati = New DataColumn("FormaggioniEliminati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormaggioniEliminati)
            Me.columnFormaggioniRipristinati = New DataColumn("FormaggioniRipristinati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormaggioniRipristinati)
            Me.columnPaliExNovo = New DataColumn("PaliExNovo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaliExNovo)
            Me.columnCartelliExNovo = New DataColumn("CartelliExNovo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCartelliExNovo)
            Me.columnStalliOExNovo = New DataColumn("StalliOExNovo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStalliOExNovo)
            Me.columnStalliRRExNovo = New DataColumn("StalliRRExNovo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStalliRRExNovo)
            Me.columnResidentiExNovo = New DataColumn("ResidentiExNovo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResidentiExNovo)
            Me.columnStalliMotoExNovo = New DataColumn("StalliMotoExNovo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStalliMotoExNovo)
            Me.columnFittoniExNovo = New DataColumn("FittoniExNovo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFittoniExNovo)
            Me.columnFormaggioniExNovo = New DataColumn("FormaggioniExNovo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormaggioniExNovo)
            Me.columnCarsharingNuovi = New DataColumn("CarsharingNuovi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCarsharingNuovi)
            Me.columnCarsharingEliminati = New DataColumn("CarsharingEliminati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCarsharingEliminati)
            Me.columnCarsharingRipristinati = New DataColumn("CarsharingRipristinati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCarsharingRipristinati)
            Me.columnCarsharingExNovo = New DataColumn("CarsharingExNovo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCarsharingExNovo)
            Me.columnDisabiliNuovi = New DataColumn("DisabiliNuovi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDisabiliNuovi)
            Me.columnDisabiliEliminati = New DataColumn("DisabiliEliminati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDisabiliEliminati)
            Me.columnDisabiliRipristinati = New DataColumn("DisabiliRipristinati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDisabiliRipristinati)
            Me.columnDisabiliExNovo = New DataColumn("DisabiliExNovo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDisabiliExNovo)
            Me.columnGenericiNuovi = New DataColumn("GenericiNuovi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGenericiNuovi)
            Me.columnGenericiEliminati = New DataColumn("GenericiEliminati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGenericiEliminati)
            Me.columnGenericiRipristinati = New DataColumn("GenericiRipristinati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGenericiRipristinati)
            Me.columnGenericiExNovo = New DataColumn("GenericiExNovo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGenericiExNovo)
            Me.columnDiscoOrarioNuovi = New DataColumn("DiscoOrarioNuovi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscoOrarioNuovi)
            Me.columnDiscoOrarioEliminati = New DataColumn("DiscoOrarioEliminati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscoOrarioEliminati)
            Me.columnDiscoOrarioRipristinati = New DataColumn("DiscoOrarioRipristinati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscoOrarioRipristinati)
            Me.columnDiscoOrarioExNovo = New DataColumn("DiscoOrarioExNovo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscoOrarioExNovo)
            Me.columnCaricoScaricoNuovi = New DataColumn("CaricoScaricoNuovi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCaricoScaricoNuovi)
            Me.columnCaricoScaricoEliminati = New DataColumn("CaricoScaricoEliminati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCaricoScaricoEliminati)
            Me.columnCaricoScaricoRipristinati = New DataColumn("CaricoScaricoRipristinati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCaricoScaricoRipristinati)
            Me.columnCaricoScaricoExNovo = New DataColumn("CaricoScaricoExNovo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCaricoScaricoExNovo)
            Me.columnId.AutoIncrement = true
            Me.columnId.ReadOnly = true
            Me.columnIdVia.AllowDBNull = false
        End Sub
        
        Public Function NewLavoriStradaliRow() As LavoriStradaliRow
            Return CType(Me.NewRow,LavoriStradaliRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LavoriStradaliRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LavoriStradaliRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LavoriStradaliRowChangedEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliRowChanged(Me, New LavoriStradaliRowChangeEvent(CType(e.Row,LavoriStradaliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LavoriStradaliRowChangingEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliRowChanging(Me, New LavoriStradaliRowChangeEvent(CType(e.Row,LavoriStradaliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LavoriStradaliRowDeletedEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliRowDeleted(Me, New LavoriStradaliRowChangeEvent(CType(e.Row,LavoriStradaliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LavoriStradaliRowDeletingEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliRowDeleting(Me, New LavoriStradaliRowChangeEvent(CType(e.Row,LavoriStradaliRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLavoriStradaliRow(ByVal row As LavoriStradaliRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliRow
        Inherits DataRow
        
        Private tableLavoriStradali As LavoriStradaliDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLavoriStradali = CType(Me.Table,LavoriStradaliDataTable)
        End Sub
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.NomeColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.TipoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.TipoColumn) = value
            End Set
        End Property
        
        Public Property Causale As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.CausaleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.CausaleColumn) = value
            End Set
        End Property
        
        Public Property Esecutore As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.EsecutoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.EsecutoreColumn) = value
            End Set
        End Property
        
        Public Property Zona As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.ZonaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.ZonaColumn) = value
            End Set
        End Property
        
        Public Property Id As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.IdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.IdColumn) = value
            End Set
        End Property
        
        Public Property IdZona As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.IdZonaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.IdZonaColumn) = value
            End Set
        End Property
        
        Public Property Titolo As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.TitoloColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.TitoloColumn) = value
            End Set
        End Property
        
        Public Property Testo As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.TestoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.TestoColumn) = value
            End Set
        End Property
        
        Public Property File As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.FileColumn),System.Guid)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.FileColumn) = value
            End Set
        End Property
        
        Public Property Ext As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.ExtColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.ExtColumn) = value
            End Set
        End Property
        
        Public Property DataInizio As Date
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.DataInizioColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.DataInizioColumn) = value
            End Set
        End Property
        
        Public Property DataFine As Date
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.DataFineColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.DataFineColumn) = value
            End Set
        End Property
        
        Public Property IdTipo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.IdTipoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.IdTipoColumn) = value
            End Set
        End Property
        
        Public Property IdCausale As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.IdCausaleColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.IdCausaleColumn) = value
            End Set
        End Property
        
        Public Property IdEsecutore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.IdEsecutoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.IdEsecutoreColumn) = value
            End Set
        End Property
        
        Public Property IdVia As Integer
            Get
                Return CType(Me(Me.tableLavoriStradali.IdViaColumn),Integer)
            End Get
            Set
                Me(Me.tableLavoriStradali.IdViaColumn) = value
            End Set
        End Property
        
        Public Property Ordinanza As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.OrdinanzaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.OrdinanzaColumn) = value
            End Set
        End Property
        
        Public Property PaliNuovi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.PaliNuoviColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.PaliNuoviColumn) = value
            End Set
        End Property
        
        Public Property PaliEliminati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.PaliEliminatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.PaliEliminatiColumn) = value
            End Set
        End Property
        
        Public Property PaliRipristinati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.PaliRipristinatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.PaliRipristinatiColumn) = value
            End Set
        End Property
        
        Public Property CartelliNuovi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.CartelliNuoviColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.CartelliNuoviColumn) = value
            End Set
        End Property
        
        Public Property CartelliEliminati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.CartelliEliminatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.CartelliEliminatiColumn) = value
            End Set
        End Property
        
        Public Property CartelliRipristinati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.CartelliRipristinatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.CartelliRipristinatiColumn) = value
            End Set
        End Property
        
        Public Property StalliONuovi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.StalliONuoviColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.StalliONuoviColumn) = value
            End Set
        End Property
        
        Public Property StalliOEliminati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.StalliOEliminatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.StalliOEliminatiColumn) = value
            End Set
        End Property
        
        Public Property StalliORipristinati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.StalliORipristinatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.StalliORipristinatiColumn) = value
            End Set
        End Property
        
        Public Property StalliRRNuovi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.StalliRRNuoviColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.StalliRRNuoviColumn) = value
            End Set
        End Property
        
        Public Property StalliRREliminati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.StalliRREliminatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.StalliRREliminatiColumn) = value
            End Set
        End Property
        
        Public Property StalliRRRipristinati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.StalliRRRipristinatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.StalliRRRipristinatiColumn) = value
            End Set
        End Property
        
        Public Property ResidentiNuovi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.ResidentiNuoviColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.ResidentiNuoviColumn) = value
            End Set
        End Property
        
        Public Property ResidentiEliminati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.ResidentiEliminatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.ResidentiEliminatiColumn) = value
            End Set
        End Property
        
        Public Property ResidentiRipristinati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.ResidentiRipristinatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.ResidentiRipristinatiColumn) = value
            End Set
        End Property
        
        Public Property StalliMotoNuovi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.StalliMotoNuoviColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.StalliMotoNuoviColumn) = value
            End Set
        End Property
        
        Public Property StalliMotoEliminati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.StalliMotoEliminatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.StalliMotoEliminatiColumn) = value
            End Set
        End Property
        
        Public Property StalliMotoRipristinati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.StalliMotoRipristinatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.StalliMotoRipristinatiColumn) = value
            End Set
        End Property
        
        Public Property FittoniNuovi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.FittoniNuoviColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.FittoniNuoviColumn) = value
            End Set
        End Property
        
        Public Property FittoniEliminati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.FittoniEliminatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.FittoniEliminatiColumn) = value
            End Set
        End Property
        
        Public Property FittoniRipristinati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.FittoniRipristinatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.FittoniRipristinatiColumn) = value
            End Set
        End Property
        
        Public Property FormaggioniNuovi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.FormaggioniNuoviColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.FormaggioniNuoviColumn) = value
            End Set
        End Property
        
        Public Property FormaggioniEliminati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.FormaggioniEliminatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.FormaggioniEliminatiColumn) = value
            End Set
        End Property
        
        Public Property FormaggioniRipristinati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.FormaggioniRipristinatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.FormaggioniRipristinatiColumn) = value
            End Set
        End Property
        
        Public Property PaliExNovo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.PaliExNovoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.PaliExNovoColumn) = value
            End Set
        End Property
        
        Public Property CartelliExNovo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.CartelliExNovoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.CartelliExNovoColumn) = value
            End Set
        End Property
        
        Public Property StalliOExNovo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.StalliOExNovoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.StalliOExNovoColumn) = value
            End Set
        End Property
        
        Public Property StalliRRExNovo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.StalliRRExNovoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.StalliRRExNovoColumn) = value
            End Set
        End Property
        
        Public Property ResidentiExNovo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.ResidentiExNovoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.ResidentiExNovoColumn) = value
            End Set
        End Property
        
        Public Property StalliMotoExNovo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.StalliMotoExNovoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.StalliMotoExNovoColumn) = value
            End Set
        End Property
        
        Public Property FittoniExNovo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.FittoniExNovoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.FittoniExNovoColumn) = value
            End Set
        End Property
        
        Public Property FormaggioniExNovo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.FormaggioniExNovoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.FormaggioniExNovoColumn) = value
            End Set
        End Property
        
        Public Property CarsharingNuovi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.CarsharingNuoviColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.CarsharingNuoviColumn) = value
            End Set
        End Property
        
        Public Property CarsharingEliminati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.CarsharingEliminatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.CarsharingEliminatiColumn) = value
            End Set
        End Property
        
        Public Property CarsharingRipristinati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.CarsharingRipristinatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.CarsharingRipristinatiColumn) = value
            End Set
        End Property
        
        Public Property CarsharingExNovo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.CarsharingExNovoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.CarsharingExNovoColumn) = value
            End Set
        End Property
        
        Public Property DisabiliNuovi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.DisabiliNuoviColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.DisabiliNuoviColumn) = value
            End Set
        End Property
        
        Public Property DisabiliEliminati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.DisabiliEliminatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.DisabiliEliminatiColumn) = value
            End Set
        End Property
        
        Public Property DisabiliRipristinati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.DisabiliRipristinatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.DisabiliRipristinatiColumn) = value
            End Set
        End Property
        
        Public Property DisabiliExNovo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.DisabiliExNovoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.DisabiliExNovoColumn) = value
            End Set
        End Property
        
        Public Property GenericiNuovi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.GenericiNuoviColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.GenericiNuoviColumn) = value
            End Set
        End Property
        
        Public Property GenericiEliminati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.GenericiEliminatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.GenericiEliminatiColumn) = value
            End Set
        End Property
        
        Public Property GenericiRipristinati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.GenericiRipristinatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.GenericiRipristinatiColumn) = value
            End Set
        End Property
        
        Public Property GenericiExNovo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.GenericiExNovoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.GenericiExNovoColumn) = value
            End Set
        End Property
        
        Public Property DiscoOrarioNuovi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.DiscoOrarioNuoviColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.DiscoOrarioNuoviColumn) = value
            End Set
        End Property
        
        Public Property DiscoOrarioEliminati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.DiscoOrarioEliminatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.DiscoOrarioEliminatiColumn) = value
            End Set
        End Property
        
        Public Property DiscoOrarioRipristinati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.DiscoOrarioRipristinatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.DiscoOrarioRipristinatiColumn) = value
            End Set
        End Property
        
        Public Property DiscoOrarioExNovo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.DiscoOrarioExNovoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.DiscoOrarioExNovoColumn) = value
            End Set
        End Property
        
        Public Property CaricoScaricoNuovi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.CaricoScaricoNuoviColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.CaricoScaricoNuoviColumn) = value
            End Set
        End Property
        
        Public Property CaricoScaricoEliminati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.CaricoScaricoEliminatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.CaricoScaricoEliminatiColumn) = value
            End Set
        End Property
        
        Public Property CaricoScaricoRipristinati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.CaricoScaricoRipristinatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.CaricoScaricoRipristinatiColumn) = value
            End Set
        End Property
        
        Public Property CaricoScaricoExNovo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradali.CaricoScaricoExNovoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradali.CaricoScaricoExNovoColumn) = value
            End Set
        End Property
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableLavoriStradali.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tableLavoriStradali.TipoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCausaleNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.CausaleColumn)
        End Function
        
        Public Sub SetCausaleNull()
            Me(Me.tableLavoriStradali.CausaleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEsecutoreNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.EsecutoreColumn)
        End Function
        
        Public Sub SetEsecutoreNull()
            Me(Me.tableLavoriStradali.EsecutoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsZonaNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.ZonaColumn)
        End Function
        
        Public Sub SetZonaNull()
            Me(Me.tableLavoriStradali.ZonaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.IdColumn)
        End Function
        
        Public Sub SetIdNull()
            Me(Me.tableLavoriStradali.IdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdZonaNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.IdZonaColumn)
        End Function
        
        Public Sub SetIdZonaNull()
            Me(Me.tableLavoriStradali.IdZonaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTitoloNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.TitoloColumn)
        End Function
        
        Public Sub SetTitoloNull()
            Me(Me.tableLavoriStradali.TitoloColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTestoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.TestoColumn)
        End Function
        
        Public Sub SetTestoNull()
            Me(Me.tableLavoriStradali.TestoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFileNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.FileColumn)
        End Function
        
        Public Sub SetFileNull()
            Me(Me.tableLavoriStradali.FileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExtNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.ExtColumn)
        End Function
        
        Public Sub SetExtNull()
            Me(Me.tableLavoriStradali.ExtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataInizioNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.DataInizioColumn)
        End Function
        
        Public Sub SetDataInizioNull()
            Me(Me.tableLavoriStradali.DataInizioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataFineNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.DataFineColumn)
        End Function
        
        Public Sub SetDataFineNull()
            Me(Me.tableLavoriStradali.DataFineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdTipoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.IdTipoColumn)
        End Function
        
        Public Sub SetIdTipoNull()
            Me(Me.tableLavoriStradali.IdTipoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdCausaleNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.IdCausaleColumn)
        End Function
        
        Public Sub SetIdCausaleNull()
            Me(Me.tableLavoriStradali.IdCausaleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdEsecutoreNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.IdEsecutoreColumn)
        End Function
        
        Public Sub SetIdEsecutoreNull()
            Me(Me.tableLavoriStradali.IdEsecutoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdinanzaNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.OrdinanzaColumn)
        End Function
        
        Public Sub SetOrdinanzaNull()
            Me(Me.tableLavoriStradali.OrdinanzaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaliNuoviNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.PaliNuoviColumn)
        End Function
        
        Public Sub SetPaliNuoviNull()
            Me(Me.tableLavoriStradali.PaliNuoviColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaliEliminatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.PaliEliminatiColumn)
        End Function
        
        Public Sub SetPaliEliminatiNull()
            Me(Me.tableLavoriStradali.PaliEliminatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaliRipristinatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.PaliRipristinatiColumn)
        End Function
        
        Public Sub SetPaliRipristinatiNull()
            Me(Me.tableLavoriStradali.PaliRipristinatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCartelliNuoviNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.CartelliNuoviColumn)
        End Function
        
        Public Sub SetCartelliNuoviNull()
            Me(Me.tableLavoriStradali.CartelliNuoviColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCartelliEliminatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.CartelliEliminatiColumn)
        End Function
        
        Public Sub SetCartelliEliminatiNull()
            Me(Me.tableLavoriStradali.CartelliEliminatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCartelliRipristinatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.CartelliRipristinatiColumn)
        End Function
        
        Public Sub SetCartelliRipristinatiNull()
            Me(Me.tableLavoriStradali.CartelliRipristinatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStalliONuoviNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.StalliONuoviColumn)
        End Function
        
        Public Sub SetStalliONuoviNull()
            Me(Me.tableLavoriStradali.StalliONuoviColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStalliOEliminatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.StalliOEliminatiColumn)
        End Function
        
        Public Sub SetStalliOEliminatiNull()
            Me(Me.tableLavoriStradali.StalliOEliminatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStalliORipristinatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.StalliORipristinatiColumn)
        End Function
        
        Public Sub SetStalliORipristinatiNull()
            Me(Me.tableLavoriStradali.StalliORipristinatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStalliRRNuoviNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.StalliRRNuoviColumn)
        End Function
        
        Public Sub SetStalliRRNuoviNull()
            Me(Me.tableLavoriStradali.StalliRRNuoviColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStalliRREliminatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.StalliRREliminatiColumn)
        End Function
        
        Public Sub SetStalliRREliminatiNull()
            Me(Me.tableLavoriStradali.StalliRREliminatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStalliRRRipristinatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.StalliRRRipristinatiColumn)
        End Function
        
        Public Sub SetStalliRRRipristinatiNull()
            Me(Me.tableLavoriStradali.StalliRRRipristinatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResidentiNuoviNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.ResidentiNuoviColumn)
        End Function
        
        Public Sub SetResidentiNuoviNull()
            Me(Me.tableLavoriStradali.ResidentiNuoviColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResidentiEliminatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.ResidentiEliminatiColumn)
        End Function
        
        Public Sub SetResidentiEliminatiNull()
            Me(Me.tableLavoriStradali.ResidentiEliminatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResidentiRipristinatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.ResidentiRipristinatiColumn)
        End Function
        
        Public Sub SetResidentiRipristinatiNull()
            Me(Me.tableLavoriStradali.ResidentiRipristinatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStalliMotoNuoviNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.StalliMotoNuoviColumn)
        End Function
        
        Public Sub SetStalliMotoNuoviNull()
            Me(Me.tableLavoriStradali.StalliMotoNuoviColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStalliMotoEliminatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.StalliMotoEliminatiColumn)
        End Function
        
        Public Sub SetStalliMotoEliminatiNull()
            Me(Me.tableLavoriStradali.StalliMotoEliminatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStalliMotoRipristinatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.StalliMotoRipristinatiColumn)
        End Function
        
        Public Sub SetStalliMotoRipristinatiNull()
            Me(Me.tableLavoriStradali.StalliMotoRipristinatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFittoniNuoviNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.FittoniNuoviColumn)
        End Function
        
        Public Sub SetFittoniNuoviNull()
            Me(Me.tableLavoriStradali.FittoniNuoviColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFittoniEliminatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.FittoniEliminatiColumn)
        End Function
        
        Public Sub SetFittoniEliminatiNull()
            Me(Me.tableLavoriStradali.FittoniEliminatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFittoniRipristinatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.FittoniRipristinatiColumn)
        End Function
        
        Public Sub SetFittoniRipristinatiNull()
            Me(Me.tableLavoriStradali.FittoniRipristinatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFormaggioniNuoviNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.FormaggioniNuoviColumn)
        End Function
        
        Public Sub SetFormaggioniNuoviNull()
            Me(Me.tableLavoriStradali.FormaggioniNuoviColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFormaggioniEliminatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.FormaggioniEliminatiColumn)
        End Function
        
        Public Sub SetFormaggioniEliminatiNull()
            Me(Me.tableLavoriStradali.FormaggioniEliminatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFormaggioniRipristinatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.FormaggioniRipristinatiColumn)
        End Function
        
        Public Sub SetFormaggioniRipristinatiNull()
            Me(Me.tableLavoriStradali.FormaggioniRipristinatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaliExNovoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.PaliExNovoColumn)
        End Function
        
        Public Sub SetPaliExNovoNull()
            Me(Me.tableLavoriStradali.PaliExNovoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCartelliExNovoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.CartelliExNovoColumn)
        End Function
        
        Public Sub SetCartelliExNovoNull()
            Me(Me.tableLavoriStradali.CartelliExNovoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStalliOExNovoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.StalliOExNovoColumn)
        End Function
        
        Public Sub SetStalliOExNovoNull()
            Me(Me.tableLavoriStradali.StalliOExNovoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStalliRRExNovoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.StalliRRExNovoColumn)
        End Function
        
        Public Sub SetStalliRRExNovoNull()
            Me(Me.tableLavoriStradali.StalliRRExNovoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResidentiExNovoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.ResidentiExNovoColumn)
        End Function
        
        Public Sub SetResidentiExNovoNull()
            Me(Me.tableLavoriStradali.ResidentiExNovoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStalliMotoExNovoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.StalliMotoExNovoColumn)
        End Function
        
        Public Sub SetStalliMotoExNovoNull()
            Me(Me.tableLavoriStradali.StalliMotoExNovoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFittoniExNovoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.FittoniExNovoColumn)
        End Function
        
        Public Sub SetFittoniExNovoNull()
            Me(Me.tableLavoriStradali.FittoniExNovoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFormaggioniExNovoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.FormaggioniExNovoColumn)
        End Function
        
        Public Sub SetFormaggioniExNovoNull()
            Me(Me.tableLavoriStradali.FormaggioniExNovoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCarsharingNuoviNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.CarsharingNuoviColumn)
        End Function
        
        Public Sub SetCarsharingNuoviNull()
            Me(Me.tableLavoriStradali.CarsharingNuoviColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCarsharingEliminatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.CarsharingEliminatiColumn)
        End Function
        
        Public Sub SetCarsharingEliminatiNull()
            Me(Me.tableLavoriStradali.CarsharingEliminatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCarsharingRipristinatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.CarsharingRipristinatiColumn)
        End Function
        
        Public Sub SetCarsharingRipristinatiNull()
            Me(Me.tableLavoriStradali.CarsharingRipristinatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCarsharingExNovoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.CarsharingExNovoColumn)
        End Function
        
        Public Sub SetCarsharingExNovoNull()
            Me(Me.tableLavoriStradali.CarsharingExNovoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDisabiliNuoviNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.DisabiliNuoviColumn)
        End Function
        
        Public Sub SetDisabiliNuoviNull()
            Me(Me.tableLavoriStradali.DisabiliNuoviColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDisabiliEliminatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.DisabiliEliminatiColumn)
        End Function
        
        Public Sub SetDisabiliEliminatiNull()
            Me(Me.tableLavoriStradali.DisabiliEliminatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDisabiliRipristinatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.DisabiliRipristinatiColumn)
        End Function
        
        Public Sub SetDisabiliRipristinatiNull()
            Me(Me.tableLavoriStradali.DisabiliRipristinatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDisabiliExNovoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.DisabiliExNovoColumn)
        End Function
        
        Public Sub SetDisabiliExNovoNull()
            Me(Me.tableLavoriStradali.DisabiliExNovoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGenericiNuoviNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.GenericiNuoviColumn)
        End Function
        
        Public Sub SetGenericiNuoviNull()
            Me(Me.tableLavoriStradali.GenericiNuoviColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGenericiEliminatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.GenericiEliminatiColumn)
        End Function
        
        Public Sub SetGenericiEliminatiNull()
            Me(Me.tableLavoriStradali.GenericiEliminatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGenericiRipristinatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.GenericiRipristinatiColumn)
        End Function
        
        Public Sub SetGenericiRipristinatiNull()
            Me(Me.tableLavoriStradali.GenericiRipristinatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGenericiExNovoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.GenericiExNovoColumn)
        End Function
        
        Public Sub SetGenericiExNovoNull()
            Me(Me.tableLavoriStradali.GenericiExNovoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscoOrarioNuoviNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.DiscoOrarioNuoviColumn)
        End Function
        
        Public Sub SetDiscoOrarioNuoviNull()
            Me(Me.tableLavoriStradali.DiscoOrarioNuoviColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscoOrarioEliminatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.DiscoOrarioEliminatiColumn)
        End Function
        
        Public Sub SetDiscoOrarioEliminatiNull()
            Me(Me.tableLavoriStradali.DiscoOrarioEliminatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscoOrarioRipristinatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.DiscoOrarioRipristinatiColumn)
        End Function
        
        Public Sub SetDiscoOrarioRipristinatiNull()
            Me(Me.tableLavoriStradali.DiscoOrarioRipristinatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscoOrarioExNovoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.DiscoOrarioExNovoColumn)
        End Function
        
        Public Sub SetDiscoOrarioExNovoNull()
            Me(Me.tableLavoriStradali.DiscoOrarioExNovoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCaricoScaricoNuoviNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.CaricoScaricoNuoviColumn)
        End Function
        
        Public Sub SetCaricoScaricoNuoviNull()
            Me(Me.tableLavoriStradali.CaricoScaricoNuoviColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCaricoScaricoEliminatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.CaricoScaricoEliminatiColumn)
        End Function
        
        Public Sub SetCaricoScaricoEliminatiNull()
            Me(Me.tableLavoriStradali.CaricoScaricoEliminatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCaricoScaricoRipristinatiNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.CaricoScaricoRipristinatiColumn)
        End Function
        
        Public Sub SetCaricoScaricoRipristinatiNull()
            Me(Me.tableLavoriStradali.CaricoScaricoRipristinatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCaricoScaricoExNovoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradali.CaricoScaricoExNovoColumn)
        End Function
        
        Public Sub SetCaricoScaricoExNovoNull()
            Me(Me.tableLavoriStradali.CaricoScaricoExNovoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LavoriStradaliRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LavoriStradaliRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LavoriStradaliRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
