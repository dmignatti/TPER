'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2503
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsMostraFerieCongedi
    Inherits DataSet
    
    Private tableSP_PrenotazioniFerieCongedi_TBL As SP_PrenotazioniFerieCongedi_TBLDataTable
    
    Private tableTable1 As Table1DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SP_PrenotazioniFerieCongedi_TBL")) Is Nothing) Then
                Me.Tables.Add(New SP_PrenotazioniFerieCongedi_TBLDataTable(ds.Tables("SP_PrenotazioniFerieCongedi_TBL")))
            End If
            If (Not (ds.Tables("Table1")) Is Nothing) Then
                Me.Tables.Add(New Table1DataTable(ds.Tables("Table1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_PrenotazioniFerieCongedi_TBL As SP_PrenotazioniFerieCongedi_TBLDataTable
        Get
            Return Me.tableSP_PrenotazioniFerieCongedi_TBL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table1 As Table1DataTable
        Get
            Return Me.tableTable1
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsMostraFerieCongedi = CType(MyBase.Clone,DsMostraFerieCongedi)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("SP_PrenotazioniFerieCongedi_TBL")) Is Nothing) Then
            Me.Tables.Add(New SP_PrenotazioniFerieCongedi_TBLDataTable(ds.Tables("SP_PrenotazioniFerieCongedi_TBL")))
        End If
        If (Not (ds.Tables("Table1")) Is Nothing) Then
            Me.Tables.Add(New Table1DataTable(ds.Tables("Table1")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableSP_PrenotazioniFerieCongedi_TBL = CType(Me.Tables("SP_PrenotazioniFerieCongedi_TBL"),SP_PrenotazioniFerieCongedi_TBLDataTable)
        If (Not (Me.tableSP_PrenotazioniFerieCongedi_TBL) Is Nothing) Then
            Me.tableSP_PrenotazioniFerieCongedi_TBL.InitVars
        End If
        Me.tableTable1 = CType(Me.Tables("Table1"),Table1DataTable)
        If (Not (Me.tableTable1) Is Nothing) Then
            Me.tableTable1.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsMostraFerieCongedi"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsMostraFerieCongedi.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableSP_PrenotazioniFerieCongedi_TBL = New SP_PrenotazioniFerieCongedi_TBLDataTable
        Me.Tables.Add(Me.tableSP_PrenotazioniFerieCongedi_TBL)
        Me.tableTable1 = New Table1DataTable
        Me.Tables.Add(Me.tableTable1)
    End Sub
    
    Private Function ShouldSerializeSP_PrenotazioniFerieCongedi_TBL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTable1() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub SP_PrenotazioniFerieCongedi_TBLRowChangeEventHandler(ByVal sender As Object, ByVal e As SP_PrenotazioniFerieCongedi_TBLRowChangeEvent)
    
    Public Delegate Sub Table1RowChangeEventHandler(ByVal sender As Object, ByVal e As Table1RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_PrenotazioniFerieCongedi_TBLDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGIORNO As DataColumn
        
        Private columnGIORNO_DRITTO As DataColumn
        
        Private columnListaUser As DataColumn
        
        Private columnnum As DataColumn
        
        Private columnPosizioneSuccessiva As DataColumn
        
        Private columnPOSUSER As DataColumn
        
        Private columnMAXUSER As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_PrenotazioniFerieCongedi_TBL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GIORNOColumn As DataColumn
            Get
                Return Me.columnGIORNO
            End Get
        End Property
        
        Friend ReadOnly Property GIORNO_DRITTOColumn As DataColumn
            Get
                Return Me.columnGIORNO_DRITTO
            End Get
        End Property
        
        Friend ReadOnly Property ListaUserColumn As DataColumn
            Get
                Return Me.columnListaUser
            End Get
        End Property
        
        Friend ReadOnly Property numColumn As DataColumn
            Get
                Return Me.columnnum
            End Get
        End Property
        
        Friend ReadOnly Property PosizioneSuccessivaColumn As DataColumn
            Get
                Return Me.columnPosizioneSuccessiva
            End Get
        End Property
        
        Friend ReadOnly Property POSUSERColumn As DataColumn
            Get
                Return Me.columnPOSUSER
            End Get
        End Property
        
        Friend ReadOnly Property MAXUSERColumn As DataColumn
            Get
                Return Me.columnMAXUSER
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_PrenotazioniFerieCongedi_TBLRow
            Get
                Return CType(Me.Rows(index),SP_PrenotazioniFerieCongedi_TBLRow)
            End Get
        End Property
        
        Public Event SP_PrenotazioniFerieCongedi_TBLRowChanged As SP_PrenotazioniFerieCongedi_TBLRowChangeEventHandler
        
        Public Event SP_PrenotazioniFerieCongedi_TBLRowChanging As SP_PrenotazioniFerieCongedi_TBLRowChangeEventHandler
        
        Public Event SP_PrenotazioniFerieCongedi_TBLRowDeleted As SP_PrenotazioniFerieCongedi_TBLRowChangeEventHandler
        
        Public Event SP_PrenotazioniFerieCongedi_TBLRowDeleting As SP_PrenotazioniFerieCongedi_TBLRowChangeEventHandler
        
        Public Overloads Sub AddSP_PrenotazioniFerieCongedi_TBLRow(ByVal row As SP_PrenotazioniFerieCongedi_TBLRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_PrenotazioniFerieCongedi_TBLRow(ByVal GIORNO As String, ByVal GIORNO_DRITTO As String, ByVal ListaUser As String, ByVal num As Integer, ByVal PosizioneSuccessiva As Integer, ByVal POSUSER As Integer, ByVal MAXUSER As Integer) As SP_PrenotazioniFerieCongedi_TBLRow
            Dim rowSP_PrenotazioniFerieCongedi_TBLRow As SP_PrenotazioniFerieCongedi_TBLRow = CType(Me.NewRow,SP_PrenotazioniFerieCongedi_TBLRow)
            rowSP_PrenotazioniFerieCongedi_TBLRow.ItemArray = New Object() {GIORNO, GIORNO_DRITTO, ListaUser, num, PosizioneSuccessiva, POSUSER, MAXUSER}
            Me.Rows.Add(rowSP_PrenotazioniFerieCongedi_TBLRow)
            Return rowSP_PrenotazioniFerieCongedi_TBLRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_PrenotazioniFerieCongedi_TBLDataTable = CType(MyBase.Clone,SP_PrenotazioniFerieCongedi_TBLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_PrenotazioniFerieCongedi_TBLDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGIORNO = Me.Columns("GIORNO")
            Me.columnGIORNO_DRITTO = Me.Columns("GIORNO_DRITTO")
            Me.columnListaUser = Me.Columns("ListaUser")
            Me.columnnum = Me.Columns("num")
            Me.columnPosizioneSuccessiva = Me.Columns("PosizioneSuccessiva")
            Me.columnPOSUSER = Me.Columns("POSUSER")
            Me.columnMAXUSER = Me.Columns("MAXUSER")
        End Sub
        
        Private Sub InitClass()
            Me.columnGIORNO = New DataColumn("GIORNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGIORNO)
            Me.columnGIORNO_DRITTO = New DataColumn("GIORNO_DRITTO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGIORNO_DRITTO)
            Me.columnListaUser = New DataColumn("ListaUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnListaUser)
            Me.columnnum = New DataColumn("num", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnum)
            Me.columnPosizioneSuccessiva = New DataColumn("PosizioneSuccessiva", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPosizioneSuccessiva)
            Me.columnPOSUSER = New DataColumn("POSUSER", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSUSER)
            Me.columnMAXUSER = New DataColumn("MAXUSER", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAXUSER)
            Me.columnGIORNO.AllowDBNull = false
            Me.columnGIORNO_DRITTO.AllowDBNull = false
            Me.columnPosizioneSuccessiva.ReadOnly = true
            Me.columnPOSUSER.ReadOnly = true
            Me.columnMAXUSER.ReadOnly = true
        End Sub
        
        Public Function NewSP_PrenotazioniFerieCongedi_TBLRow() As SP_PrenotazioniFerieCongedi_TBLRow
            Return CType(Me.NewRow,SP_PrenotazioniFerieCongedi_TBLRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_PrenotazioniFerieCongedi_TBLRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_PrenotazioniFerieCongedi_TBLRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_PrenotazioniFerieCongedi_TBLRowChangedEvent) Is Nothing) Then
                RaiseEvent SP_PrenotazioniFerieCongedi_TBLRowChanged(Me, New SP_PrenotazioniFerieCongedi_TBLRowChangeEvent(CType(e.Row,SP_PrenotazioniFerieCongedi_TBLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_PrenotazioniFerieCongedi_TBLRowChangingEvent) Is Nothing) Then
                RaiseEvent SP_PrenotazioniFerieCongedi_TBLRowChanging(Me, New SP_PrenotazioniFerieCongedi_TBLRowChangeEvent(CType(e.Row,SP_PrenotazioniFerieCongedi_TBLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_PrenotazioniFerieCongedi_TBLRowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_PrenotazioniFerieCongedi_TBLRowDeleted(Me, New SP_PrenotazioniFerieCongedi_TBLRowChangeEvent(CType(e.Row,SP_PrenotazioniFerieCongedi_TBLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_PrenotazioniFerieCongedi_TBLRowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_PrenotazioniFerieCongedi_TBLRowDeleting(Me, New SP_PrenotazioniFerieCongedi_TBLRowChangeEvent(CType(e.Row,SP_PrenotazioniFerieCongedi_TBLRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_PrenotazioniFerieCongedi_TBLRow(ByVal row As SP_PrenotazioniFerieCongedi_TBLRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_PrenotazioniFerieCongedi_TBLRow
        Inherits DataRow
        
        Private tableSP_PrenotazioniFerieCongedi_TBL As SP_PrenotazioniFerieCongedi_TBLDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_PrenotazioniFerieCongedi_TBL = CType(Me.Table,SP_PrenotazioniFerieCongedi_TBLDataTable)
        End Sub
        
        Public Property GIORNO As String
            Get
                Return CType(Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.GIORNOColumn),String)
            End Get
            Set
                Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.GIORNOColumn) = value
            End Set
        End Property
        
        Public Property GIORNO_DRITTO As String
            Get
                Return CType(Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.GIORNO_DRITTOColumn),String)
            End Get
            Set
                Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.GIORNO_DRITTOColumn) = value
            End Set
        End Property
        
        Public Property ListaUser As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.ListaUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.ListaUserColumn) = value
            End Set
        End Property
        
        Public Property num As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.numColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.numColumn) = value
            End Set
        End Property
        
        Public Property PosizioneSuccessiva As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.PosizioneSuccessivaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.PosizioneSuccessivaColumn) = value
            End Set
        End Property
        
        Public Property POSUSER As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.POSUSERColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.POSUSERColumn) = value
            End Set
        End Property
        
        Public Property MAXUSER As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.MAXUSERColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.MAXUSERColumn) = value
            End Set
        End Property
        
        Public Function IsListaUserNull() As Boolean
            Return Me.IsNull(Me.tableSP_PrenotazioniFerieCongedi_TBL.ListaUserColumn)
        End Function
        
        Public Sub SetListaUserNull()
            Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.ListaUserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnumNull() As Boolean
            Return Me.IsNull(Me.tableSP_PrenotazioniFerieCongedi_TBL.numColumn)
        End Function
        
        Public Sub SetnumNull()
            Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.numColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPosizioneSuccessivaNull() As Boolean
            Return Me.IsNull(Me.tableSP_PrenotazioniFerieCongedi_TBL.PosizioneSuccessivaColumn)
        End Function
        
        Public Sub SetPosizioneSuccessivaNull()
            Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.PosizioneSuccessivaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSUSERNull() As Boolean
            Return Me.IsNull(Me.tableSP_PrenotazioniFerieCongedi_TBL.POSUSERColumn)
        End Function
        
        Public Sub SetPOSUSERNull()
            Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.POSUSERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMAXUSERNull() As Boolean
            Return Me.IsNull(Me.tableSP_PrenotazioniFerieCongedi_TBL.MAXUSERColumn)
        End Function
        
        Public Sub SetMAXUSERNull()
            Me(Me.tableSP_PrenotazioniFerieCongedi_TBL.MAXUSERColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_PrenotazioniFerieCongedi_TBLRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_PrenotazioniFerieCongedi_TBLRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_PrenotazioniFerieCongedi_TBLRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_PrenotazioniFerieCongedi_TBLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Table1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid As DataColumn
        
        Private columnCHIAVE As DataColumn
        
        Private columnIDACCERTATORE As DataColumn
        
        Private columnIDUSER As DataColumn
        
        Private columnDATAEORA As DataColumn
        
        Private columnGIORNO As DataColumn
        
        Private columnGIORNO_DRITTO As DataColumn
        
        Private columnListaUser As DataColumn
        
        Private columnNUM As DataColumn
        
        Private columnPosizioneSuccessiva As DataColumn
        
        Private columnPOSUSER As DataColumn
        
        Private columnMAXUSER As DataColumn
        
        Friend Sub New()
            MyBase.New("Table1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property idColumn As DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        Friend ReadOnly Property CHIAVEColumn As DataColumn
            Get
                Return Me.columnCHIAVE
            End Get
        End Property
        
        Friend ReadOnly Property IDACCERTATOREColumn As DataColumn
            Get
                Return Me.columnIDACCERTATORE
            End Get
        End Property
        
        Friend ReadOnly Property IDUSERColumn As DataColumn
            Get
                Return Me.columnIDUSER
            End Get
        End Property
        
        Friend ReadOnly Property DATAEORAColumn As DataColumn
            Get
                Return Me.columnDATAEORA
            End Get
        End Property
        
        Friend ReadOnly Property GIORNOColumn As DataColumn
            Get
                Return Me.columnGIORNO
            End Get
        End Property
        
        Friend ReadOnly Property GIORNO_DRITTOColumn As DataColumn
            Get
                Return Me.columnGIORNO_DRITTO
            End Get
        End Property
        
        Friend ReadOnly Property ListaUserColumn As DataColumn
            Get
                Return Me.columnListaUser
            End Get
        End Property
        
        Friend ReadOnly Property NUMColumn As DataColumn
            Get
                Return Me.columnNUM
            End Get
        End Property
        
        Friend ReadOnly Property PosizioneSuccessivaColumn As DataColumn
            Get
                Return Me.columnPosizioneSuccessiva
            End Get
        End Property
        
        Friend ReadOnly Property POSUSERColumn As DataColumn
            Get
                Return Me.columnPOSUSER
            End Get
        End Property
        
        Friend ReadOnly Property MAXUSERColumn As DataColumn
            Get
                Return Me.columnMAXUSER
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table1Row
            Get
                Return CType(Me.Rows(index),Table1Row)
            End Get
        End Property
        
        Public Event Table1RowChanged As Table1RowChangeEventHandler
        
        Public Event Table1RowChanging As Table1RowChangeEventHandler
        
        Public Event Table1RowDeleted As Table1RowChangeEventHandler
        
        Public Event Table1RowDeleting As Table1RowChangeEventHandler
        
        Public Overloads Sub AddTable1Row(ByVal row As Table1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTable1Row(ByVal CHIAVE As String, ByVal IDACCERTATORE As String, ByVal IDUSER As String, ByVal DATAEORA As Date, ByVal GIORNO As String, ByVal GIORNO_DRITTO As String, ByVal ListaUser As String, ByVal NUM As Integer, ByVal PosizioneSuccessiva As Integer, ByVal POSUSER As Integer, ByVal MAXUSER As Integer) As Table1Row
            Dim rowTable1Row As Table1Row = CType(Me.NewRow,Table1Row)
            rowTable1Row.ItemArray = New Object() {Nothing, CHIAVE, IDACCERTATORE, IDUSER, DATAEORA, GIORNO, GIORNO_DRITTO, ListaUser, NUM, PosizioneSuccessiva, POSUSER, MAXUSER}
            Me.Rows.Add(rowTable1Row)
            Return rowTable1Row
        End Function
        
        Public Function FindByidCHIAVEIDUSERDATAEORAGIORNO(ByVal id As Integer, ByVal CHIAVE As String, ByVal IDUSER As String, ByVal DATAEORA As Date, ByVal GIORNO As String) As Table1Row
            Return CType(Me.Rows.Find(New Object() {id, CHIAVE, IDUSER, DATAEORA, GIORNO}),Table1Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Table1DataTable = CType(MyBase.Clone,Table1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Table1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid = Me.Columns("id")
            Me.columnCHIAVE = Me.Columns("CHIAVE")
            Me.columnIDACCERTATORE = Me.Columns("IDACCERTATORE")
            Me.columnIDUSER = Me.Columns("IDUSER")
            Me.columnDATAEORA = Me.Columns("DATAEORA")
            Me.columnGIORNO = Me.Columns("GIORNO")
            Me.columnGIORNO_DRITTO = Me.Columns("GIORNO_DRITTO")
            Me.columnListaUser = Me.Columns("ListaUser")
            Me.columnNUM = Me.Columns("NUM")
            Me.columnPosizioneSuccessiva = Me.Columns("PosizioneSuccessiva")
            Me.columnPOSUSER = Me.Columns("POSUSER")
            Me.columnMAXUSER = Me.Columns("MAXUSER")
        End Sub
        
        Private Sub InitClass()
            Me.columnid = New DataColumn("id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid)
            Me.columnCHIAVE = New DataColumn("CHIAVE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHIAVE)
            Me.columnIDACCERTATORE = New DataColumn("IDACCERTATORE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDACCERTATORE)
            Me.columnIDUSER = New DataColumn("IDUSER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDUSER)
            Me.columnDATAEORA = New DataColumn("DATAEORA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATAEORA)
            Me.columnGIORNO = New DataColumn("GIORNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGIORNO)
            Me.columnGIORNO_DRITTO = New DataColumn("GIORNO_DRITTO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGIORNO_DRITTO)
            Me.columnListaUser = New DataColumn("ListaUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnListaUser)
            Me.columnNUM = New DataColumn("NUM", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNUM)
            Me.columnPosizioneSuccessiva = New DataColumn("PosizioneSuccessiva", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPosizioneSuccessiva)
            Me.columnPOSUSER = New DataColumn("POSUSER", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSUSER)
            Me.columnMAXUSER = New DataColumn("MAXUSER", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAXUSER)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid, Me.columnCHIAVE, Me.columnIDUSER, Me.columnDATAEORA, Me.columnGIORNO}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AllowDBNull = false
            Me.columnid.ReadOnly = true
            Me.columnCHIAVE.AllowDBNull = false
            Me.columnIDACCERTATORE.AllowDBNull = false
            Me.columnIDUSER.AllowDBNull = false
            Me.columnDATAEORA.AllowDBNull = false
            Me.columnGIORNO.AllowDBNull = false
            Me.columnGIORNO_DRITTO.AllowDBNull = false
            Me.columnPosizioneSuccessiva.ReadOnly = true
            Me.columnPOSUSER.ReadOnly = true
            Me.columnMAXUSER.ReadOnly = true
        End Sub
        
        Public Function NewTable1Row() As Table1Row
            Return CType(Me.NewRow,Table1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Table1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Table1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table1RowChangedEvent) Is Nothing) Then
                RaiseEvent Table1RowChanged(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table1RowChangingEvent) Is Nothing) Then
                RaiseEvent Table1RowChanging(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Table1RowDeleted(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Table1RowDeleting(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTable1Row(ByVal row As Table1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Table1Row
        Inherits DataRow
        
        Private tableTable1 As Table1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable1 = CType(Me.Table,Table1DataTable)
        End Sub
        
        Public Property id As Integer
            Get
                Return CType(Me(Me.tableTable1.idColumn),Integer)
            End Get
            Set
                Me(Me.tableTable1.idColumn) = value
            End Set
        End Property
        
        Public Property CHIAVE As String
            Get
                Return CType(Me(Me.tableTable1.CHIAVEColumn),String)
            End Get
            Set
                Me(Me.tableTable1.CHIAVEColumn) = value
            End Set
        End Property
        
        Public Property IDACCERTATORE As String
            Get
                Return CType(Me(Me.tableTable1.IDACCERTATOREColumn),String)
            End Get
            Set
                Me(Me.tableTable1.IDACCERTATOREColumn) = value
            End Set
        End Property
        
        Public Property IDUSER As String
            Get
                Return CType(Me(Me.tableTable1.IDUSERColumn),String)
            End Get
            Set
                Me(Me.tableTable1.IDUSERColumn) = value
            End Set
        End Property
        
        Public Property DATAEORA As Date
            Get
                Return CType(Me(Me.tableTable1.DATAEORAColumn),Date)
            End Get
            Set
                Me(Me.tableTable1.DATAEORAColumn) = value
            End Set
        End Property
        
        Public Property GIORNO As String
            Get
                Return CType(Me(Me.tableTable1.GIORNOColumn),String)
            End Get
            Set
                Me(Me.tableTable1.GIORNOColumn) = value
            End Set
        End Property
        
        Public Property GIORNO_DRITTO As String
            Get
                Return CType(Me(Me.tableTable1.GIORNO_DRITTOColumn),String)
            End Get
            Set
                Me(Me.tableTable1.GIORNO_DRITTOColumn) = value
            End Set
        End Property
        
        Public Property ListaUser As String
            Get
                Try 
                    Return CType(Me(Me.tableTable1.ListaUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable1.ListaUserColumn) = value
            End Set
        End Property
        
        Public Property NUM As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTable1.NUMColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable1.NUMColumn) = value
            End Set
        End Property
        
        Public Property PosizioneSuccessiva As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTable1.PosizioneSuccessivaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable1.PosizioneSuccessivaColumn) = value
            End Set
        End Property
        
        Public Property POSUSER As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTable1.POSUSERColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable1.POSUSERColumn) = value
            End Set
        End Property
        
        Public Property MAXUSER As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTable1.MAXUSERColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable1.MAXUSERColumn) = value
            End Set
        End Property
        
        Public Function IsListaUserNull() As Boolean
            Return Me.IsNull(Me.tableTable1.ListaUserColumn)
        End Function
        
        Public Sub SetListaUserNull()
            Me(Me.tableTable1.ListaUserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNUMNull() As Boolean
            Return Me.IsNull(Me.tableTable1.NUMColumn)
        End Function
        
        Public Sub SetNUMNull()
            Me(Me.tableTable1.NUMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPosizioneSuccessivaNull() As Boolean
            Return Me.IsNull(Me.tableTable1.PosizioneSuccessivaColumn)
        End Function
        
        Public Sub SetPosizioneSuccessivaNull()
            Me(Me.tableTable1.PosizioneSuccessivaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSUSERNull() As Boolean
            Return Me.IsNull(Me.tableTable1.POSUSERColumn)
        End Function
        
        Public Sub SetPOSUSERNull()
            Me(Me.tableTable1.POSUSERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMAXUSERNull() As Boolean
            Return Me.IsNull(Me.tableTable1.MAXUSERColumn)
        End Function
        
        Public Sub SetMAXUSERNull()
            Me(Me.tableTable1.MAXUSERColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Table1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Table1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Table1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Table1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
