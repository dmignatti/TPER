'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2503
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsMancataTimbratura
    Inherits DataSet
    
    Private tableTPER_Accertatori As TPER_AccertatoriDataTable
    
    Private tableAccertatori_MancataTimbratura As Accertatori_MancataTimbraturaDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TPER_Accertatori")) Is Nothing) Then
                Me.Tables.Add(New TPER_AccertatoriDataTable(ds.Tables("TPER_Accertatori")))
            End If
            If (Not (ds.Tables("Accertatori_MancataTimbratura")) Is Nothing) Then
                Me.Tables.Add(New Accertatori_MancataTimbraturaDataTable(ds.Tables("Accertatori_MancataTimbratura")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TPER_Accertatori As TPER_AccertatoriDataTable
        Get
            Return Me.tableTPER_Accertatori
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accertatori_MancataTimbratura As Accertatori_MancataTimbraturaDataTable
        Get
            Return Me.tableAccertatori_MancataTimbratura
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsMancataTimbratura = CType(MyBase.Clone,DsMancataTimbratura)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("TPER_Accertatori")) Is Nothing) Then
            Me.Tables.Add(New TPER_AccertatoriDataTable(ds.Tables("TPER_Accertatori")))
        End If
        If (Not (ds.Tables("Accertatori_MancataTimbratura")) Is Nothing) Then
            Me.Tables.Add(New Accertatori_MancataTimbraturaDataTable(ds.Tables("Accertatori_MancataTimbratura")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableTPER_Accertatori = CType(Me.Tables("TPER_Accertatori"),TPER_AccertatoriDataTable)
        If (Not (Me.tableTPER_Accertatori) Is Nothing) Then
            Me.tableTPER_Accertatori.InitVars
        End If
        Me.tableAccertatori_MancataTimbratura = CType(Me.Tables("Accertatori_MancataTimbratura"),Accertatori_MancataTimbraturaDataTable)
        If (Not (Me.tableAccertatori_MancataTimbratura) Is Nothing) Then
            Me.tableAccertatori_MancataTimbratura.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsMancataTimbratura"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsMancataTimbratura.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableTPER_Accertatori = New TPER_AccertatoriDataTable
        Me.Tables.Add(Me.tableTPER_Accertatori)
        Me.tableAccertatori_MancataTimbratura = New Accertatori_MancataTimbraturaDataTable
        Me.Tables.Add(Me.tableAccertatori_MancataTimbratura)
    End Sub
    
    Private Function ShouldSerializeTPER_Accertatori() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccertatori_MancataTimbratura() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub TPER_AccertatoriRowChangeEventHandler(ByVal sender As Object, ByVal e As TPER_AccertatoriRowChangeEvent)
    
    Public Delegate Sub Accertatori_MancataTimbraturaRowChangeEventHandler(ByVal sender As Object, ByVal e As Accertatori_MancataTimbraturaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TPER_AccertatoriDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnNomeCognome As DataColumn
        
        Friend Sub New()
            MyBase.New("TPER_Accertatori")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NomeCognomeColumn As DataColumn
            Get
                Return Me.columnNomeCognome
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TPER_AccertatoriRow
            Get
                Return CType(Me.Rows(index),TPER_AccertatoriRow)
            End Get
        End Property
        
        Public Event TPER_AccertatoriRowChanged As TPER_AccertatoriRowChangeEventHandler
        
        Public Event TPER_AccertatoriRowChanging As TPER_AccertatoriRowChangeEventHandler
        
        Public Event TPER_AccertatoriRowDeleted As TPER_AccertatoriRowChangeEventHandler
        
        Public Event TPER_AccertatoriRowDeleting As TPER_AccertatoriRowChangeEventHandler
        
        Public Overloads Sub AddTPER_AccertatoriRow(ByVal row As TPER_AccertatoriRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTPER_AccertatoriRow(ByVal NomeCognome As String) As TPER_AccertatoriRow
            Dim rowTPER_AccertatoriRow As TPER_AccertatoriRow = CType(Me.NewRow,TPER_AccertatoriRow)
            rowTPER_AccertatoriRow.ItemArray = New Object() {Nothing, NomeCognome}
            Me.Rows.Add(rowTPER_AccertatoriRow)
            Return rowTPER_AccertatoriRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As TPER_AccertatoriRow
            Return CType(Me.Rows.Find(New Object() {ID}),TPER_AccertatoriRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TPER_AccertatoriDataTable = CType(MyBase.Clone,TPER_AccertatoriDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TPER_AccertatoriDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnNomeCognome = Me.Columns("NomeCognome")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnNomeCognome = New DataColumn("NomeCognome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNomeCognome)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnNomeCognome.ReadOnly = true
        End Sub
        
        Public Function NewTPER_AccertatoriRow() As TPER_AccertatoriRow
            Return CType(Me.NewRow,TPER_AccertatoriRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TPER_AccertatoriRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TPER_AccertatoriRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TPER_AccertatoriRowChangedEvent) Is Nothing) Then
                RaiseEvent TPER_AccertatoriRowChanged(Me, New TPER_AccertatoriRowChangeEvent(CType(e.Row,TPER_AccertatoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TPER_AccertatoriRowChangingEvent) Is Nothing) Then
                RaiseEvent TPER_AccertatoriRowChanging(Me, New TPER_AccertatoriRowChangeEvent(CType(e.Row,TPER_AccertatoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TPER_AccertatoriRowDeletedEvent) Is Nothing) Then
                RaiseEvent TPER_AccertatoriRowDeleted(Me, New TPER_AccertatoriRowChangeEvent(CType(e.Row,TPER_AccertatoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TPER_AccertatoriRowDeletingEvent) Is Nothing) Then
                RaiseEvent TPER_AccertatoriRowDeleting(Me, New TPER_AccertatoriRowChangeEvent(CType(e.Row,TPER_AccertatoriRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTPER_AccertatoriRow(ByVal row As TPER_AccertatoriRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TPER_AccertatoriRow
        Inherits DataRow
        
        Private tableTPER_Accertatori As TPER_AccertatoriDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTPER_Accertatori = CType(Me.Table,TPER_AccertatoriDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableTPER_Accertatori.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTPER_Accertatori.IDColumn) = value
            End Set
        End Property
        
        Public Property NomeCognome As String
            Get
                Try 
                    Return CType(Me(Me.tableTPER_Accertatori.NomeCognomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPER_Accertatori.NomeCognomeColumn) = value
            End Set
        End Property
        
        Public Function IsNomeCognomeNull() As Boolean
            Return Me.IsNull(Me.tableTPER_Accertatori.NomeCognomeColumn)
        End Function
        
        Public Sub SetNomeCognomeNull()
            Me(Me.tableTPER_Accertatori.NomeCognomeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TPER_AccertatoriRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TPER_AccertatoriRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TPER_AccertatoriRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TPER_AccertatoriRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_MancataTimbraturaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApprovatore As DataColumn
        
        Private columnID As DataColumn
        
        Private columnAccertatoreId As DataColumn
        
        Private columnData As DataColumn
        
        Private columnEntrata1 As DataColumn
        
        Private columnUscita1 As DataColumn
        
        Private columnEntrata2 As DataColumn
        
        Private columnUscita2 As DataColumn
        
        Private columnDalleOre1 As DataColumn
        
        Private columnAlleOre1 As DataColumn
        
        Private columnDalleOre2 As DataColumn
        
        Private columnAlleOre2 As DataColumn
        
        Private columnDalleMin1 As DataColumn
        
        Private columnAlleMin1 As DataColumn
        
        Private columnDalleMin2 As DataColumn
        
        Private columnAlleMin2 As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnApprovatoDa As DataColumn
        
        Private columnCreatedOn As DataColumn
        
        Private columnCognomeNome As DataColumn
        
        Private columnDataInserimento As DataColumn
        
        Private columnStatoMancataTimbratura As DataColumn
        
        Private columnCreatedBy As DataColumn
        
        Private columnModifiedOn As DataColumn
        
        Private columnModifiedBy As DataColumn
        
        Friend Sub New()
            MyBase.New("Accertatori_MancataTimbratura")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoreColumn As DataColumn
            Get
                Return Me.columnApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property AccertatoreIdColumn As DataColumn
            Get
                Return Me.columnAccertatoreId
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property Entrata1Column As DataColumn
            Get
                Return Me.columnEntrata1
            End Get
        End Property
        
        Friend ReadOnly Property Uscita1Column As DataColumn
            Get
                Return Me.columnUscita1
            End Get
        End Property
        
        Friend ReadOnly Property Entrata2Column As DataColumn
            Get
                Return Me.columnEntrata2
            End Get
        End Property
        
        Friend ReadOnly Property Uscita2Column As DataColumn
            Get
                Return Me.columnUscita2
            End Get
        End Property
        
        Friend ReadOnly Property DalleOre1Column As DataColumn
            Get
                Return Me.columnDalleOre1
            End Get
        End Property
        
        Friend ReadOnly Property AlleOre1Column As DataColumn
            Get
                Return Me.columnAlleOre1
            End Get
        End Property
        
        Friend ReadOnly Property DalleOre2Column As DataColumn
            Get
                Return Me.columnDalleOre2
            End Get
        End Property
        
        Friend ReadOnly Property AlleOre2Column As DataColumn
            Get
                Return Me.columnAlleOre2
            End Get
        End Property
        
        Friend ReadOnly Property DalleMin1Column As DataColumn
            Get
                Return Me.columnDalleMin1
            End Get
        End Property
        
        Friend ReadOnly Property AlleMin1Column As DataColumn
            Get
                Return Me.columnAlleMin1
            End Get
        End Property
        
        Friend ReadOnly Property DalleMin2Column As DataColumn
            Get
                Return Me.columnDalleMin2
            End Get
        End Property
        
        Friend ReadOnly Property AlleMin2Column As DataColumn
            Get
                Return Me.columnAlleMin2
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoDaColumn As DataColumn
            Get
                Return Me.columnApprovatoDa
            End Get
        End Property
        
        Friend ReadOnly Property CreatedOnColumn As DataColumn
            Get
                Return Me.columnCreatedOn
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeColumn As DataColumn
            Get
                Return Me.columnCognomeNome
            End Get
        End Property
        
        Friend ReadOnly Property DataInserimentoColumn As DataColumn
            Get
                Return Me.columnDataInserimento
            End Get
        End Property
        
        Friend ReadOnly Property StatoMancataTimbraturaColumn As DataColumn
            Get
                Return Me.columnStatoMancataTimbratura
            End Get
        End Property
        
        Friend ReadOnly Property CreatedByColumn As DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedOnColumn As DataColumn
            Get
                Return Me.columnModifiedOn
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedByColumn As DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Accertatori_MancataTimbraturaRow
            Get
                Return CType(Me.Rows(index),Accertatori_MancataTimbraturaRow)
            End Get
        End Property
        
        Public Event Accertatori_MancataTimbraturaRowChanged As Accertatori_MancataTimbraturaRowChangeEventHandler
        
        Public Event Accertatori_MancataTimbraturaRowChanging As Accertatori_MancataTimbraturaRowChangeEventHandler
        
        Public Event Accertatori_MancataTimbraturaRowDeleted As Accertatori_MancataTimbraturaRowChangeEventHandler
        
        Public Event Accertatori_MancataTimbraturaRowDeleting As Accertatori_MancataTimbraturaRowChangeEventHandler
        
        Public Overloads Sub AddAccertatori_MancataTimbraturaRow(ByVal row As Accertatori_MancataTimbraturaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatori_MancataTimbraturaRow( _
                    ByVal Approvatore As String,  _
                    ByVal ID As System.Guid,  _
                    ByVal AccertatoreId As Integer,  _
                    ByVal Data As Date,  _
                    ByVal Entrata1 As Date,  _
                    ByVal Uscita1 As Date,  _
                    ByVal Entrata2 As Date,  _
                    ByVal Uscita2 As Date,  _
                    ByVal DalleOre1 As Integer,  _
                    ByVal AlleOre1 As Integer,  _
                    ByVal DalleOre2 As Integer,  _
                    ByVal AlleOre2 As Integer,  _
                    ByVal DalleMin1 As Integer,  _
                    ByVal AlleMin1 As Integer,  _
                    ByVal DalleMin2 As Integer,  _
                    ByVal AlleMin2 As Integer,  _
                    ByVal StatoApprovazione As String,  _
                    ByVal DataApprovazione As Date,  _
                    ByVal ApprovatoDa As Integer,  _
                    ByVal CreatedOn As Date,  _
                    ByVal CognomeNome As String,  _
                    ByVal DataInserimento As Date,  _
                    ByVal StatoMancataTimbratura As Integer,  _
                    ByVal CreatedBy As String,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal ModifiedBy As String) As Accertatori_MancataTimbraturaRow
            Dim rowAccertatori_MancataTimbraturaRow As Accertatori_MancataTimbraturaRow = CType(Me.NewRow,Accertatori_MancataTimbraturaRow)
            rowAccertatori_MancataTimbraturaRow.ItemArray = New Object() {Approvatore, ID, AccertatoreId, Data, Entrata1, Uscita1, Entrata2, Uscita2, DalleOre1, AlleOre1, DalleOre2, AlleOre2, DalleMin1, AlleMin1, DalleMin2, AlleMin2, StatoApprovazione, DataApprovazione, ApprovatoDa, CreatedOn, CognomeNome, DataInserimento, StatoMancataTimbratura, CreatedBy, ModifiedOn, ModifiedBy}
            Me.Rows.Add(rowAccertatori_MancataTimbraturaRow)
            Return rowAccertatori_MancataTimbraturaRow
        End Function
        
        Public Function FindByID(ByVal ID As System.Guid) As Accertatori_MancataTimbraturaRow
            Return CType(Me.Rows.Find(New Object() {ID}),Accertatori_MancataTimbraturaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Accertatori_MancataTimbraturaDataTable = CType(MyBase.Clone,Accertatori_MancataTimbraturaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Accertatori_MancataTimbraturaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApprovatore = Me.Columns("Approvatore")
            Me.columnID = Me.Columns("ID")
            Me.columnAccertatoreId = Me.Columns("AccertatoreId")
            Me.columnData = Me.Columns("Data")
            Me.columnEntrata1 = Me.Columns("Entrata1")
            Me.columnUscita1 = Me.Columns("Uscita1")
            Me.columnEntrata2 = Me.Columns("Entrata2")
            Me.columnUscita2 = Me.Columns("Uscita2")
            Me.columnDalleOre1 = Me.Columns("DalleOre1")
            Me.columnAlleOre1 = Me.Columns("AlleOre1")
            Me.columnDalleOre2 = Me.Columns("DalleOre2")
            Me.columnAlleOre2 = Me.Columns("AlleOre2")
            Me.columnDalleMin1 = Me.Columns("DalleMin1")
            Me.columnAlleMin1 = Me.Columns("AlleMin1")
            Me.columnDalleMin2 = Me.Columns("DalleMin2")
            Me.columnAlleMin2 = Me.Columns("AlleMin2")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnApprovatoDa = Me.Columns("ApprovatoDa")
            Me.columnCreatedOn = Me.Columns("CreatedOn")
            Me.columnCognomeNome = Me.Columns("CognomeNome")
            Me.columnDataInserimento = Me.Columns("DataInserimento")
            Me.columnStatoMancataTimbratura = Me.Columns("StatoMancataTimbratura")
            Me.columnCreatedBy = Me.Columns("CreatedBy")
            Me.columnModifiedOn = Me.Columns("ModifiedOn")
            Me.columnModifiedBy = Me.Columns("ModifiedBy")
        End Sub
        
        Private Sub InitClass()
            Me.columnApprovatore = New DataColumn("Approvatore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatore)
            Me.columnID = New DataColumn("ID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnAccertatoreId = New DataColumn("AccertatoreId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccertatoreId)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnEntrata1 = New DataColumn("Entrata1", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEntrata1)
            Me.columnUscita1 = New DataColumn("Uscita1", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUscita1)
            Me.columnEntrata2 = New DataColumn("Entrata2", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEntrata2)
            Me.columnUscita2 = New DataColumn("Uscita2", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUscita2)
            Me.columnDalleOre1 = New DataColumn("DalleOre1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalleOre1)
            Me.columnAlleOre1 = New DataColumn("AlleOre1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlleOre1)
            Me.columnDalleOre2 = New DataColumn("DalleOre2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalleOre2)
            Me.columnAlleOre2 = New DataColumn("AlleOre2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlleOre2)
            Me.columnDalleMin1 = New DataColumn("DalleMin1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalleMin1)
            Me.columnAlleMin1 = New DataColumn("AlleMin1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlleMin1)
            Me.columnDalleMin2 = New DataColumn("DalleMin2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalleMin2)
            Me.columnAlleMin2 = New DataColumn("AlleMin2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlleMin2)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnApprovatoDa = New DataColumn("ApprovatoDa", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatoDa)
            Me.columnCreatedOn = New DataColumn("CreatedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedOn)
            Me.columnCognomeNome = New DataColumn("CognomeNome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNome)
            Me.columnDataInserimento = New DataColumn("DataInserimento", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataInserimento)
            Me.columnStatoMancataTimbratura = New DataColumn("StatoMancataTimbratura", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoMancataTimbratura)
            Me.columnCreatedBy = New DataColumn("CreatedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedBy)
            Me.columnModifiedOn = New DataColumn("ModifiedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedOn)
            Me.columnModifiedBy = New DataColumn("ModifiedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedBy)
            Me.Constraints.Add(New UniqueConstraint("DsMancataTimbraturaKey1", New DataColumn() {Me.columnID}, true))
            Me.columnApprovatore.ReadOnly = true
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnDalleOre1.ReadOnly = true
            Me.columnAlleOre1.ReadOnly = true
            Me.columnDalleOre2.ReadOnly = true
            Me.columnAlleOre2.ReadOnly = true
            Me.columnDalleMin1.ReadOnly = true
            Me.columnAlleMin1.ReadOnly = true
            Me.columnDalleMin2.ReadOnly = true
            Me.columnAlleMin2.ReadOnly = true
            Me.columnStatoApprovazione.ReadOnly = true
            Me.columnCognomeNome.ReadOnly = true
        End Sub
        
        Public Function NewAccertatori_MancataTimbraturaRow() As Accertatori_MancataTimbraturaRow
            Return CType(Me.NewRow,Accertatori_MancataTimbraturaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Accertatori_MancataTimbraturaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Accertatori_MancataTimbraturaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Accertatori_MancataTimbraturaRowChangedEvent) Is Nothing) Then
                RaiseEvent Accertatori_MancataTimbraturaRowChanged(Me, New Accertatori_MancataTimbraturaRowChangeEvent(CType(e.Row,Accertatori_MancataTimbraturaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Accertatori_MancataTimbraturaRowChangingEvent) Is Nothing) Then
                RaiseEvent Accertatori_MancataTimbraturaRowChanging(Me, New Accertatori_MancataTimbraturaRowChangeEvent(CType(e.Row,Accertatori_MancataTimbraturaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Accertatori_MancataTimbraturaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Accertatori_MancataTimbraturaRowDeleted(Me, New Accertatori_MancataTimbraturaRowChangeEvent(CType(e.Row,Accertatori_MancataTimbraturaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Accertatori_MancataTimbraturaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Accertatori_MancataTimbraturaRowDeleting(Me, New Accertatori_MancataTimbraturaRowChangeEvent(CType(e.Row,Accertatori_MancataTimbraturaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatori_MancataTimbraturaRow(ByVal row As Accertatori_MancataTimbraturaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_MancataTimbraturaRow
        Inherits DataRow
        
        Private tableAccertatori_MancataTimbratura As Accertatori_MancataTimbraturaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatori_MancataTimbratura = CType(Me.Table,Accertatori_MancataTimbraturaDataTable)
        End Sub
        
        Public Property Approvatore As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.ApprovatoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.ApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property ID As System.Guid
            Get
                Return CType(Me(Me.tableAccertatori_MancataTimbratura.IDColumn),System.Guid)
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.IDColumn) = value
            End Set
        End Property
        
        Public Property AccertatoreId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.AccertatoreIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.AccertatoreIdColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.DataColumn) = value
            End Set
        End Property
        
        Public Property Entrata1 As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.Entrata1Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.Entrata1Column) = value
            End Set
        End Property
        
        Public Property Uscita1 As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.Uscita1Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.Uscita1Column) = value
            End Set
        End Property
        
        Public Property Entrata2 As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.Entrata2Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.Entrata2Column) = value
            End Set
        End Property
        
        Public Property Uscita2 As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.Uscita2Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.Uscita2Column) = value
            End Set
        End Property
        
        Public Property DalleOre1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.DalleOre1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.DalleOre1Column) = value
            End Set
        End Property
        
        Public Property AlleOre1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.AlleOre1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.AlleOre1Column) = value
            End Set
        End Property
        
        Public Property DalleOre2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.DalleOre2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.DalleOre2Column) = value
            End Set
        End Property
        
        Public Property AlleOre2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.AlleOre2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.AlleOre2Column) = value
            End Set
        End Property
        
        Public Property DalleMin1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.DalleMin1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.DalleMin1Column) = value
            End Set
        End Property
        
        Public Property AlleMin1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.AlleMin1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.AlleMin1Column) = value
            End Set
        End Property
        
        Public Property DalleMin2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.DalleMin2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.DalleMin2Column) = value
            End Set
        End Property
        
        Public Property AlleMin2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.AlleMin2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.AlleMin2Column) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.StatoApprovazioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property ApprovatoDa As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.ApprovatoDaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.ApprovatoDaColumn) = value
            End Set
        End Property
        
        Public Property CreatedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.CreatedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.CreatedOnColumn) = value
            End Set
        End Property
        
        Public Property CognomeNome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.CognomeNomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.CognomeNomeColumn) = value
            End Set
        End Property
        
        Public Property DataInserimento As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.DataInserimentoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.DataInserimentoColumn) = value
            End Set
        End Property
        
        Public Property StatoMancataTimbratura As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.StatoMancataTimbraturaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.StatoMancataTimbraturaColumn) = value
            End Set
        End Property
        
        Public Property CreatedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.CreatedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.CreatedByColumn) = value
            End Set
        End Property
        
        Public Property ModifiedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.ModifiedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.ModifiedOnColumn) = value
            End Set
        End Property
        
        Public Property ModifiedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.ModifiedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.ModifiedByColumn) = value
            End Set
        End Property
        
        Public Function IsApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.ApprovatoreColumn)
        End Function
        
        Public Sub SetApprovatoreNull()
            Me(Me.tableAccertatori_MancataTimbratura.ApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAccertatoreIdNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.AccertatoreIdColumn)
        End Function
        
        Public Sub SetAccertatoreIdNull()
            Me(Me.tableAccertatori_MancataTimbratura.AccertatoreIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableAccertatori_MancataTimbratura.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEntrata1Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.Entrata1Column)
        End Function
        
        Public Sub SetEntrata1Null()
            Me(Me.tableAccertatori_MancataTimbratura.Entrata1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsUscita1Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.Uscita1Column)
        End Function
        
        Public Sub SetUscita1Null()
            Me(Me.tableAccertatori_MancataTimbratura.Uscita1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsEntrata2Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.Entrata2Column)
        End Function
        
        Public Sub SetEntrata2Null()
            Me(Me.tableAccertatori_MancataTimbratura.Entrata2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsUscita2Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.Uscita2Column)
        End Function
        
        Public Sub SetUscita2Null()
            Me(Me.tableAccertatori_MancataTimbratura.Uscita2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalleOre1Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.DalleOre1Column)
        End Function
        
        Public Sub SetDalleOre1Null()
            Me(Me.tableAccertatori_MancataTimbratura.DalleOre1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlleOre1Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.AlleOre1Column)
        End Function
        
        Public Sub SetAlleOre1Null()
            Me(Me.tableAccertatori_MancataTimbratura.AlleOre1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalleOre2Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.DalleOre2Column)
        End Function
        
        Public Sub SetDalleOre2Null()
            Me(Me.tableAccertatori_MancataTimbratura.DalleOre2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlleOre2Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.AlleOre2Column)
        End Function
        
        Public Sub SetAlleOre2Null()
            Me(Me.tableAccertatori_MancataTimbratura.AlleOre2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalleMin1Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.DalleMin1Column)
        End Function
        
        Public Sub SetDalleMin1Null()
            Me(Me.tableAccertatori_MancataTimbratura.DalleMin1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlleMin1Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.AlleMin1Column)
        End Function
        
        Public Sub SetAlleMin1Null()
            Me(Me.tableAccertatori_MancataTimbratura.AlleMin1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalleMin2Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.DalleMin2Column)
        End Function
        
        Public Sub SetDalleMin2Null()
            Me(Me.tableAccertatori_MancataTimbratura.DalleMin2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlleMin2Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.AlleMin2Column)
        End Function
        
        Public Sub SetAlleMin2Null()
            Me(Me.tableAccertatori_MancataTimbratura.AlleMin2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableAccertatori_MancataTimbratura.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableAccertatori_MancataTimbratura.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApprovatoDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.ApprovatoDaColumn)
        End Function
        
        Public Sub SetApprovatoDaNull()
            Me(Me.tableAccertatori_MancataTimbratura.ApprovatoDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.CreatedOnColumn)
        End Function
        
        Public Sub SetCreatedOnNull()
            Me(Me.tableAccertatori_MancataTimbratura.CreatedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.CognomeNomeColumn)
        End Function
        
        Public Sub SetCognomeNomeNull()
            Me(Me.tableAccertatori_MancataTimbratura.CognomeNomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataInserimentoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.DataInserimentoColumn)
        End Function
        
        Public Sub SetDataInserimentoNull()
            Me(Me.tableAccertatori_MancataTimbratura.DataInserimentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoMancataTimbraturaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.StatoMancataTimbraturaColumn)
        End Function
        
        Public Sub SetStatoMancataTimbraturaNull()
            Me(Me.tableAccertatori_MancataTimbratura.StatoMancataTimbraturaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.CreatedByColumn)
        End Function
        
        Public Sub SetCreatedByNull()
            Me(Me.tableAccertatori_MancataTimbratura.CreatedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.ModifiedOnColumn)
        End Function
        
        Public Sub SetModifiedOnNull()
            Me(Me.tableAccertatori_MancataTimbratura.ModifiedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.ModifiedByColumn)
        End Function
        
        Public Sub SetModifiedByNull()
            Me(Me.tableAccertatori_MancataTimbratura.ModifiedByColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_MancataTimbraturaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Accertatori_MancataTimbraturaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Accertatori_MancataTimbraturaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Accertatori_MancataTimbraturaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
