'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2503
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsConfMobilita
    Inherits DataSet
    
    Private tableConf_Mobilita As Conf_MobilitaDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Conf_Mobilita")) Is Nothing) Then
                Me.Tables.Add(New Conf_MobilitaDataTable(ds.Tables("Conf_Mobilita")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Conf_Mobilita As Conf_MobilitaDataTable
        Get
            Return Me.tableConf_Mobilita
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsConfMobilita = CType(MyBase.Clone,DsConfMobilita)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Conf_Mobilita")) Is Nothing) Then
            Me.Tables.Add(New Conf_MobilitaDataTable(ds.Tables("Conf_Mobilita")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableConf_Mobilita = CType(Me.Tables("Conf_Mobilita"),Conf_MobilitaDataTable)
        If (Not (Me.tableConf_Mobilita) Is Nothing) Then
            Me.tableConf_Mobilita.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsConfMobilita"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsConfMobilita.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableConf_Mobilita = New Conf_MobilitaDataTable
        Me.Tables.Add(Me.tableConf_Mobilita)
    End Sub
    
    Private Function ShouldSerializeConf_Mobilita() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Conf_MobilitaRowChangeEventHandler(ByVal sender As Object, ByVal e As Conf_MobilitaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Conf_MobilitaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNr_CambiGStessoTipo As DataColumn
        
        Private columnNr_CambiMStessoTipo As DataColumn
        
        Private columnCreateOn As DataColumn
        
        Private columnModifiedOn As DataColumn
        
        Private columnCreatedBy As DataColumn
        
        Private columnModifiedBy As DataColumn
        
        Private columnId As DataColumn
        
        Friend Sub New()
            MyBase.New("Conf_Mobilita")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Nr_CambiGStessoTipoColumn As DataColumn
            Get
                Return Me.columnNr_CambiGStessoTipo
            End Get
        End Property
        
        Friend ReadOnly Property Nr_CambiMStessoTipoColumn As DataColumn
            Get
                Return Me.columnNr_CambiMStessoTipo
            End Get
        End Property
        
        Friend ReadOnly Property CreateOnColumn As DataColumn
            Get
                Return Me.columnCreateOn
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedOnColumn As DataColumn
            Get
                Return Me.columnModifiedOn
            End Get
        End Property
        
        Friend ReadOnly Property CreatedByColumn As DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedByColumn As DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Conf_MobilitaRow
            Get
                Return CType(Me.Rows(index),Conf_MobilitaRow)
            End Get
        End Property
        
        Public Event Conf_MobilitaRowChanged As Conf_MobilitaRowChangeEventHandler
        
        Public Event Conf_MobilitaRowChanging As Conf_MobilitaRowChangeEventHandler
        
        Public Event Conf_MobilitaRowDeleted As Conf_MobilitaRowChangeEventHandler
        
        Public Event Conf_MobilitaRowDeleting As Conf_MobilitaRowChangeEventHandler
        
        Public Overloads Sub AddConf_MobilitaRow(ByVal row As Conf_MobilitaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddConf_MobilitaRow(ByVal Nr_CambiGStessoTipo As Integer, ByVal Nr_CambiMStessoTipo As Integer, ByVal CreateOn As Date, ByVal ModifiedOn As Date, ByVal CreatedBy As String, ByVal ModifiedBy As String, ByVal Id As System.Guid) As Conf_MobilitaRow
            Dim rowConf_MobilitaRow As Conf_MobilitaRow = CType(Me.NewRow,Conf_MobilitaRow)
            rowConf_MobilitaRow.ItemArray = New Object() {Nr_CambiGStessoTipo, Nr_CambiMStessoTipo, CreateOn, ModifiedOn, CreatedBy, ModifiedBy, Id}
            Me.Rows.Add(rowConf_MobilitaRow)
            Return rowConf_MobilitaRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As Conf_MobilitaRow
            Return CType(Me.Rows.Find(New Object() {Id}),Conf_MobilitaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Conf_MobilitaDataTable = CType(MyBase.Clone,Conf_MobilitaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Conf_MobilitaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNr_CambiGStessoTipo = Me.Columns("Nr_CambiGStessoTipo")
            Me.columnNr_CambiMStessoTipo = Me.Columns("Nr_CambiMStessoTipo")
            Me.columnCreateOn = Me.Columns("CreateOn")
            Me.columnModifiedOn = Me.Columns("ModifiedOn")
            Me.columnCreatedBy = Me.Columns("CreatedBy")
            Me.columnModifiedBy = Me.Columns("ModifiedBy")
            Me.columnId = Me.Columns("Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnNr_CambiGStessoTipo = New DataColumn("Nr_CambiGStessoTipo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNr_CambiGStessoTipo)
            Me.columnNr_CambiMStessoTipo = New DataColumn("Nr_CambiMStessoTipo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNr_CambiMStessoTipo)
            Me.columnCreateOn = New DataColumn("CreateOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreateOn)
            Me.columnModifiedOn = New DataColumn("ModifiedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedOn)
            Me.columnCreatedBy = New DataColumn("CreatedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedBy)
            Me.columnModifiedBy = New DataColumn("ModifiedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedBy)
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewConf_MobilitaRow() As Conf_MobilitaRow
            Return CType(Me.NewRow,Conf_MobilitaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Conf_MobilitaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Conf_MobilitaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Conf_MobilitaRowChangedEvent) Is Nothing) Then
                RaiseEvent Conf_MobilitaRowChanged(Me, New Conf_MobilitaRowChangeEvent(CType(e.Row,Conf_MobilitaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Conf_MobilitaRowChangingEvent) Is Nothing) Then
                RaiseEvent Conf_MobilitaRowChanging(Me, New Conf_MobilitaRowChangeEvent(CType(e.Row,Conf_MobilitaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Conf_MobilitaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Conf_MobilitaRowDeleted(Me, New Conf_MobilitaRowChangeEvent(CType(e.Row,Conf_MobilitaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Conf_MobilitaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Conf_MobilitaRowDeleting(Me, New Conf_MobilitaRowChangeEvent(CType(e.Row,Conf_MobilitaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveConf_MobilitaRow(ByVal row As Conf_MobilitaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Conf_MobilitaRow
        Inherits DataRow
        
        Private tableConf_Mobilita As Conf_MobilitaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableConf_Mobilita = CType(Me.Table,Conf_MobilitaDataTable)
        End Sub
        
        Public Property Nr_CambiGStessoTipo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableConf_Mobilita.Nr_CambiGStessoTipoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConf_Mobilita.Nr_CambiGStessoTipoColumn) = value
            End Set
        End Property
        
        Public Property Nr_CambiMStessoTipo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableConf_Mobilita.Nr_CambiMStessoTipoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConf_Mobilita.Nr_CambiMStessoTipoColumn) = value
            End Set
        End Property
        
        Public Property CreateOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableConf_Mobilita.CreateOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConf_Mobilita.CreateOnColumn) = value
            End Set
        End Property
        
        Public Property ModifiedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableConf_Mobilita.ModifiedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConf_Mobilita.ModifiedOnColumn) = value
            End Set
        End Property
        
        Public Property CreatedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableConf_Mobilita.CreatedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConf_Mobilita.CreatedByColumn) = value
            End Set
        End Property
        
        Public Property ModifiedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableConf_Mobilita.ModifiedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConf_Mobilita.ModifiedByColumn) = value
            End Set
        End Property
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableConf_Mobilita.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableConf_Mobilita.IdColumn) = value
            End Set
        End Property
        
        Public Function IsNr_CambiGStessoTipoNull() As Boolean
            Return Me.IsNull(Me.tableConf_Mobilita.Nr_CambiGStessoTipoColumn)
        End Function
        
        Public Sub SetNr_CambiGStessoTipoNull()
            Me(Me.tableConf_Mobilita.Nr_CambiGStessoTipoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNr_CambiMStessoTipoNull() As Boolean
            Return Me.IsNull(Me.tableConf_Mobilita.Nr_CambiMStessoTipoColumn)
        End Function
        
        Public Sub SetNr_CambiMStessoTipoNull()
            Me(Me.tableConf_Mobilita.Nr_CambiMStessoTipoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreateOnNull() As Boolean
            Return Me.IsNull(Me.tableConf_Mobilita.CreateOnColumn)
        End Function
        
        Public Sub SetCreateOnNull()
            Me(Me.tableConf_Mobilita.CreateOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedOnNull() As Boolean
            Return Me.IsNull(Me.tableConf_Mobilita.ModifiedOnColumn)
        End Function
        
        Public Sub SetModifiedOnNull()
            Me(Me.tableConf_Mobilita.ModifiedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tableConf_Mobilita.CreatedByColumn)
        End Function
        
        Public Sub SetCreatedByNull()
            Me(Me.tableConf_Mobilita.CreatedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableConf_Mobilita.ModifiedByColumn)
        End Function
        
        Public Sub SetModifiedByNull()
            Me(Me.tableConf_Mobilita.ModifiedByColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Conf_MobilitaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Conf_MobilitaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Conf_MobilitaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Conf_MobilitaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
