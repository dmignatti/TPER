'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2503
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsRichiestaPrenotazione
    Inherits DataSet
    
    Private tableAccertatori_PrenotazioneIntervalliValidi As Accertatori_PrenotazioneIntervalliValidiDataTable
    
    Private tableAccertatori_PrenotazioneRichiesta As Accertatori_PrenotazioneRichiestaDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Accertatori_PrenotazioneIntervalliValidi")) Is Nothing) Then
                Me.Tables.Add(New Accertatori_PrenotazioneIntervalliValidiDataTable(ds.Tables("Accertatori_PrenotazioneIntervalliValidi")))
            End If
            If (Not (ds.Tables("Accertatori_PrenotazioneRichiesta")) Is Nothing) Then
                Me.Tables.Add(New Accertatori_PrenotazioneRichiestaDataTable(ds.Tables("Accertatori_PrenotazioneRichiesta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accertatori_PrenotazioneIntervalliValidi As Accertatori_PrenotazioneIntervalliValidiDataTable
        Get
            Return Me.tableAccertatori_PrenotazioneIntervalliValidi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accertatori_PrenotazioneRichiesta As Accertatori_PrenotazioneRichiestaDataTable
        Get
            Return Me.tableAccertatori_PrenotazioneRichiesta
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsRichiestaPrenotazione = CType(MyBase.Clone,DsRichiestaPrenotazione)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Accertatori_PrenotazioneIntervalliValidi")) Is Nothing) Then
            Me.Tables.Add(New Accertatori_PrenotazioneIntervalliValidiDataTable(ds.Tables("Accertatori_PrenotazioneIntervalliValidi")))
        End If
        If (Not (ds.Tables("Accertatori_PrenotazioneRichiesta")) Is Nothing) Then
            Me.Tables.Add(New Accertatori_PrenotazioneRichiestaDataTable(ds.Tables("Accertatori_PrenotazioneRichiesta")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAccertatori_PrenotazioneIntervalliValidi = CType(Me.Tables("Accertatori_PrenotazioneIntervalliValidi"),Accertatori_PrenotazioneIntervalliValidiDataTable)
        If (Not (Me.tableAccertatori_PrenotazioneIntervalliValidi) Is Nothing) Then
            Me.tableAccertatori_PrenotazioneIntervalliValidi.InitVars
        End If
        Me.tableAccertatori_PrenotazioneRichiesta = CType(Me.Tables("Accertatori_PrenotazioneRichiesta"),Accertatori_PrenotazioneRichiestaDataTable)
        If (Not (Me.tableAccertatori_PrenotazioneRichiesta) Is Nothing) Then
            Me.tableAccertatori_PrenotazioneRichiesta.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsRichiestaPrenotazione"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsRichiestaPrenotazione.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAccertatori_PrenotazioneIntervalliValidi = New Accertatori_PrenotazioneIntervalliValidiDataTable
        Me.Tables.Add(Me.tableAccertatori_PrenotazioneIntervalliValidi)
        Me.tableAccertatori_PrenotazioneRichiesta = New Accertatori_PrenotazioneRichiestaDataTable
        Me.Tables.Add(Me.tableAccertatori_PrenotazioneRichiesta)
    End Sub
    
    Private Function ShouldSerializeAccertatori_PrenotazioneIntervalliValidi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccertatori_PrenotazioneRichiesta() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Accertatori_PrenotazioneIntervalliValidiRowChangeEventHandler(ByVal sender As Object, ByVal e As Accertatori_PrenotazioneIntervalliValidiRowChangeEvent)
    
    Public Delegate Sub Accertatori_PrenotazioneRichiestaRowChangeEventHandler(ByVal sender As Object, ByVal e As Accertatori_PrenotazioneRichiestaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_PrenotazioneIntervalliValidiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnNome As DataColumn
        
        Private columnAccertatori_PrenotazioniPeriodoId As DataColumn
        
        Private columnIntervalloDa As DataColumn
        
        Private columnIntervalloA As DataColumn
        
        Private columnMaxPrenotazione As DataColumn
        
        Private columnNumPrenotati As DataColumn
        
        Private columnNumDisponibilita As DataColumn
        
        Private columnUltimaPrenotazione As DataColumn
        
        Private columnPubblicato As DataColumn
        
        Private columnPrenotabileDa As DataColumn
        
        Private columnPrenotabileA As DataColumn
        
        Private columnNumMaxIntervalli As DataColumn
        
        Friend Sub New()
            MyBase.New("Accertatori_PrenotazioneIntervalliValidi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property Accertatori_PrenotazioniPeriodoIdColumn As DataColumn
            Get
                Return Me.columnAccertatori_PrenotazioniPeriodoId
            End Get
        End Property
        
        Friend ReadOnly Property IntervalloDaColumn As DataColumn
            Get
                Return Me.columnIntervalloDa
            End Get
        End Property
        
        Friend ReadOnly Property IntervalloAColumn As DataColumn
            Get
                Return Me.columnIntervalloA
            End Get
        End Property
        
        Friend ReadOnly Property MaxPrenotazioneColumn As DataColumn
            Get
                Return Me.columnMaxPrenotazione
            End Get
        End Property
        
        Friend ReadOnly Property NumPrenotatiColumn As DataColumn
            Get
                Return Me.columnNumPrenotati
            End Get
        End Property
        
        Friend ReadOnly Property NumDisponibilitaColumn As DataColumn
            Get
                Return Me.columnNumDisponibilita
            End Get
        End Property
        
        Friend ReadOnly Property UltimaPrenotazioneColumn As DataColumn
            Get
                Return Me.columnUltimaPrenotazione
            End Get
        End Property
        
        Friend ReadOnly Property PubblicatoColumn As DataColumn
            Get
                Return Me.columnPubblicato
            End Get
        End Property
        
        Friend ReadOnly Property PrenotabileDaColumn As DataColumn
            Get
                Return Me.columnPrenotabileDa
            End Get
        End Property
        
        Friend ReadOnly Property PrenotabileAColumn As DataColumn
            Get
                Return Me.columnPrenotabileA
            End Get
        End Property
        
        Friend ReadOnly Property NumMaxIntervalliColumn As DataColumn
            Get
                Return Me.columnNumMaxIntervalli
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Accertatori_PrenotazioneIntervalliValidiRow
            Get
                Return CType(Me.Rows(index),Accertatori_PrenotazioneIntervalliValidiRow)
            End Get
        End Property
        
        Public Event Accertatori_PrenotazioneIntervalliValidiRowChanged As Accertatori_PrenotazioneIntervalliValidiRowChangeEventHandler
        
        Public Event Accertatori_PrenotazioneIntervalliValidiRowChanging As Accertatori_PrenotazioneIntervalliValidiRowChangeEventHandler
        
        Public Event Accertatori_PrenotazioneIntervalliValidiRowDeleted As Accertatori_PrenotazioneIntervalliValidiRowChangeEventHandler
        
        Public Event Accertatori_PrenotazioneIntervalliValidiRowDeleting As Accertatori_PrenotazioneIntervalliValidiRowChangeEventHandler
        
        Public Overloads Sub AddAccertatori_PrenotazioneIntervalliValidiRow(ByVal row As Accertatori_PrenotazioneIntervalliValidiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatori_PrenotazioneIntervalliValidiRow(ByVal ID As System.Guid, ByVal Nome As String, ByVal Accertatori_PrenotazioniPeriodoId As System.Guid, ByVal IntervalloDa As Date, ByVal IntervalloA As Date, ByVal MaxPrenotazione As Integer, ByVal NumPrenotati As Integer, ByVal NumDisponibilita As Integer, ByVal UltimaPrenotazione As Date, ByVal Pubblicato As Boolean, ByVal PrenotabileDa As Date, ByVal PrenotabileA As Date, ByVal NumMaxIntervalli As Integer) As Accertatori_PrenotazioneIntervalliValidiRow
            Dim rowAccertatori_PrenotazioneIntervalliValidiRow As Accertatori_PrenotazioneIntervalliValidiRow = CType(Me.NewRow,Accertatori_PrenotazioneIntervalliValidiRow)
            rowAccertatori_PrenotazioneIntervalliValidiRow.ItemArray = New Object() {ID, Nome, Accertatori_PrenotazioniPeriodoId, IntervalloDa, IntervalloA, MaxPrenotazione, NumPrenotati, NumDisponibilita, UltimaPrenotazione, Pubblicato, PrenotabileDa, PrenotabileA, NumMaxIntervalli}
            Me.Rows.Add(rowAccertatori_PrenotazioneIntervalliValidiRow)
            Return rowAccertatori_PrenotazioneIntervalliValidiRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Accertatori_PrenotazioneIntervalliValidiDataTable = CType(MyBase.Clone,Accertatori_PrenotazioneIntervalliValidiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Accertatori_PrenotazioneIntervalliValidiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnNome = Me.Columns("Nome")
            Me.columnAccertatori_PrenotazioniPeriodoId = Me.Columns("Accertatori_PrenotazioniPeriodoId")
            Me.columnIntervalloDa = Me.Columns("IntervalloDa")
            Me.columnIntervalloA = Me.Columns("IntervalloA")
            Me.columnMaxPrenotazione = Me.Columns("MaxPrenotazione")
            Me.columnNumPrenotati = Me.Columns("NumPrenotati")
            Me.columnNumDisponibilita = Me.Columns("NumDisponibilita")
            Me.columnUltimaPrenotazione = Me.Columns("UltimaPrenotazione")
            Me.columnPubblicato = Me.Columns("Pubblicato")
            Me.columnPrenotabileDa = Me.Columns("PrenotabileDa")
            Me.columnPrenotabileA = Me.Columns("PrenotabileA")
            Me.columnNumMaxIntervalli = Me.Columns("NumMaxIntervalli")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnAccertatori_PrenotazioniPeriodoId = New DataColumn("Accertatori_PrenotazioniPeriodoId", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccertatori_PrenotazioniPeriodoId)
            Me.columnIntervalloDa = New DataColumn("IntervalloDa", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIntervalloDa)
            Me.columnIntervalloA = New DataColumn("IntervalloA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIntervalloA)
            Me.columnMaxPrenotazione = New DataColumn("MaxPrenotazione", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxPrenotazione)
            Me.columnNumPrenotati = New DataColumn("NumPrenotati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumPrenotati)
            Me.columnNumDisponibilita = New DataColumn("NumDisponibilita", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumDisponibilita)
            Me.columnUltimaPrenotazione = New DataColumn("UltimaPrenotazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUltimaPrenotazione)
            Me.columnPubblicato = New DataColumn("Pubblicato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPubblicato)
            Me.columnPrenotabileDa = New DataColumn("PrenotabileDa", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrenotabileDa)
            Me.columnPrenotabileA = New DataColumn("PrenotabileA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrenotabileA)
            Me.columnNumMaxIntervalli = New DataColumn("NumMaxIntervalli", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumMaxIntervalli)
            Me.columnID.AllowDBNull = false
            Me.columnNome.ReadOnly = true
        End Sub
        
        Public Function NewAccertatori_PrenotazioneIntervalliValidiRow() As Accertatori_PrenotazioneIntervalliValidiRow
            Return CType(Me.NewRow,Accertatori_PrenotazioneIntervalliValidiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Accertatori_PrenotazioneIntervalliValidiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Accertatori_PrenotazioneIntervalliValidiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Accertatori_PrenotazioneIntervalliValidiRowChangedEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioneIntervalliValidiRowChanged(Me, New Accertatori_PrenotazioneIntervalliValidiRowChangeEvent(CType(e.Row,Accertatori_PrenotazioneIntervalliValidiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Accertatori_PrenotazioneIntervalliValidiRowChangingEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioneIntervalliValidiRowChanging(Me, New Accertatori_PrenotazioneIntervalliValidiRowChangeEvent(CType(e.Row,Accertatori_PrenotazioneIntervalliValidiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Accertatori_PrenotazioneIntervalliValidiRowDeletedEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioneIntervalliValidiRowDeleted(Me, New Accertatori_PrenotazioneIntervalliValidiRowChangeEvent(CType(e.Row,Accertatori_PrenotazioneIntervalliValidiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Accertatori_PrenotazioneIntervalliValidiRowDeletingEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioneIntervalliValidiRowDeleting(Me, New Accertatori_PrenotazioneIntervalliValidiRowChangeEvent(CType(e.Row,Accertatori_PrenotazioneIntervalliValidiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatori_PrenotazioneIntervalliValidiRow(ByVal row As Accertatori_PrenotazioneIntervalliValidiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_PrenotazioneIntervalliValidiRow
        Inherits DataRow
        
        Private tableAccertatori_PrenotazioneIntervalliValidi As Accertatori_PrenotazioneIntervalliValidiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatori_PrenotazioneIntervalliValidi = CType(Me.Table,Accertatori_PrenotazioneIntervalliValidiDataTable)
        End Sub
        
        Public Property ID As System.Guid
            Get
                Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.IDColumn),System.Guid)
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.IDColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.NomeColumn) = value
            End Set
        End Property
        
        Public Property Accertatori_PrenotazioniPeriodoId As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.Accertatori_PrenotazioniPeriodoIdColumn),System.Guid)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.Accertatori_PrenotazioniPeriodoIdColumn) = value
            End Set
        End Property
        
        Public Property IntervalloDa As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.IntervalloDaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.IntervalloDaColumn) = value
            End Set
        End Property
        
        Public Property IntervalloA As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.IntervalloAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.IntervalloAColumn) = value
            End Set
        End Property
        
        Public Property MaxPrenotazione As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.MaxPrenotazioneColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.MaxPrenotazioneColumn) = value
            End Set
        End Property
        
        Public Property NumPrenotati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.NumPrenotatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.NumPrenotatiColumn) = value
            End Set
        End Property
        
        Public Property NumDisponibilita As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.NumDisponibilitaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.NumDisponibilitaColumn) = value
            End Set
        End Property
        
        Public Property UltimaPrenotazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.UltimaPrenotazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.UltimaPrenotazioneColumn) = value
            End Set
        End Property
        
        Public Property Pubblicato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.PubblicatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.PubblicatoColumn) = value
            End Set
        End Property
        
        Public Property PrenotabileDa As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.PrenotabileDaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.PrenotabileDaColumn) = value
            End Set
        End Property
        
        Public Property PrenotabileA As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.PrenotabileAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.PrenotabileAColumn) = value
            End Set
        End Property
        
        Public Property NumMaxIntervalli As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.NumMaxIntervalliColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.NumMaxIntervalliColumn) = value
            End Set
        End Property
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalliValidi.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAccertatori_PrenotazioniPeriodoIdNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalliValidi.Accertatori_PrenotazioniPeriodoIdColumn)
        End Function
        
        Public Sub SetAccertatori_PrenotazioniPeriodoIdNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.Accertatori_PrenotazioniPeriodoIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIntervalloDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalliValidi.IntervalloDaColumn)
        End Function
        
        Public Sub SetIntervalloDaNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.IntervalloDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIntervalloANull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalliValidi.IntervalloAColumn)
        End Function
        
        Public Sub SetIntervalloANull()
            Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.IntervalloAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxPrenotazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalliValidi.MaxPrenotazioneColumn)
        End Function
        
        Public Sub SetMaxPrenotazioneNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.MaxPrenotazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNumPrenotatiNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalliValidi.NumPrenotatiColumn)
        End Function
        
        Public Sub SetNumPrenotatiNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.NumPrenotatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNumDisponibilitaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalliValidi.NumDisponibilitaColumn)
        End Function
        
        Public Sub SetNumDisponibilitaNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.NumDisponibilitaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUltimaPrenotazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalliValidi.UltimaPrenotazioneColumn)
        End Function
        
        Public Sub SetUltimaPrenotazioneNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.UltimaPrenotazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPubblicatoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalliValidi.PubblicatoColumn)
        End Function
        
        Public Sub SetPubblicatoNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.PubblicatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrenotabileDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalliValidi.PrenotabileDaColumn)
        End Function
        
        Public Sub SetPrenotabileDaNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.PrenotabileDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrenotabileANull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalliValidi.PrenotabileAColumn)
        End Function
        
        Public Sub SetPrenotabileANull()
            Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.PrenotabileAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNumMaxIntervalliNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalliValidi.NumMaxIntervalliColumn)
        End Function
        
        Public Sub SetNumMaxIntervalliNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalliValidi.NumMaxIntervalliColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_PrenotazioneIntervalliValidiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Accertatori_PrenotazioneIntervalliValidiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Accertatori_PrenotazioneIntervalliValidiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Accertatori_PrenotazioneIntervalliValidiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_PrenotazioneRichiestaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnAccertatoreId As DataColumn
        
        Private columnAccertatori_PrenotazioneIntervalliId As DataColumn
        
        Private columnStatoPrenotazione As DataColumn
        
        Private columnDataPrenotazione As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnIdApprovatore As DataColumn
        
        Private columnModifiedOn As DataColumn
        
        Private columnCreatedBy As DataColumn
        
        Private columnModifiedBy As DataColumn
        
        Private columnNome As DataColumn
        
        Private columnStato As DataColumn
        
        Friend Sub New()
            MyBase.New("Accertatori_PrenotazioneRichiesta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property AccertatoreIdColumn As DataColumn
            Get
                Return Me.columnAccertatoreId
            End Get
        End Property
        
        Friend ReadOnly Property Accertatori_PrenotazioneIntervalliIdColumn As DataColumn
            Get
                Return Me.columnAccertatori_PrenotazioneIntervalliId
            End Get
        End Property
        
        Friend ReadOnly Property StatoPrenotazioneColumn As DataColumn
            Get
                Return Me.columnStatoPrenotazione
            End Get
        End Property
        
        Friend ReadOnly Property DataPrenotazioneColumn As DataColumn
            Get
                Return Me.columnDataPrenotazione
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property IdApprovatoreColumn As DataColumn
            Get
                Return Me.columnIdApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedOnColumn As DataColumn
            Get
                Return Me.columnModifiedOn
            End Get
        End Property
        
        Friend ReadOnly Property CreatedByColumn As DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedByColumn As DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property StatoColumn As DataColumn
            Get
                Return Me.columnStato
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Accertatori_PrenotazioneRichiestaRow
            Get
                Return CType(Me.Rows(index),Accertatori_PrenotazioneRichiestaRow)
            End Get
        End Property
        
        Public Event Accertatori_PrenotazioneRichiestaRowChanged As Accertatori_PrenotazioneRichiestaRowChangeEventHandler
        
        Public Event Accertatori_PrenotazioneRichiestaRowChanging As Accertatori_PrenotazioneRichiestaRowChangeEventHandler
        
        Public Event Accertatori_PrenotazioneRichiestaRowDeleted As Accertatori_PrenotazioneRichiestaRowChangeEventHandler
        
        Public Event Accertatori_PrenotazioneRichiestaRowDeleting As Accertatori_PrenotazioneRichiestaRowChangeEventHandler
        
        Public Overloads Sub AddAccertatori_PrenotazioneRichiestaRow(ByVal row As Accertatori_PrenotazioneRichiestaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatori_PrenotazioneRichiestaRow(ByVal ID As System.Guid, ByVal AccertatoreId As Integer, ByVal Accertatori_PrenotazioneIntervalliId As System.Guid, ByVal StatoPrenotazione As Integer, ByVal DataPrenotazione As Date, ByVal DataApprovazione As Date, ByVal IdApprovatore As Integer, ByVal ModifiedOn As Date, ByVal CreatedBy As String, ByVal ModifiedBy As String, ByVal Nome As String, ByVal Stato As String) As Accertatori_PrenotazioneRichiestaRow
            Dim rowAccertatori_PrenotazioneRichiestaRow As Accertatori_PrenotazioneRichiestaRow = CType(Me.NewRow,Accertatori_PrenotazioneRichiestaRow)
            rowAccertatori_PrenotazioneRichiestaRow.ItemArray = New Object() {ID, AccertatoreId, Accertatori_PrenotazioneIntervalliId, StatoPrenotazione, DataPrenotazione, DataApprovazione, IdApprovatore, ModifiedOn, CreatedBy, ModifiedBy, Nome, Stato}
            Me.Rows.Add(rowAccertatori_PrenotazioneRichiestaRow)
            Return rowAccertatori_PrenotazioneRichiestaRow
        End Function
        
        Public Function FindByID(ByVal ID As System.Guid) As Accertatori_PrenotazioneRichiestaRow
            Return CType(Me.Rows.Find(New Object() {ID}),Accertatori_PrenotazioneRichiestaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Accertatori_PrenotazioneRichiestaDataTable = CType(MyBase.Clone,Accertatori_PrenotazioneRichiestaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Accertatori_PrenotazioneRichiestaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnAccertatoreId = Me.Columns("AccertatoreId")
            Me.columnAccertatori_PrenotazioneIntervalliId = Me.Columns("Accertatori_PrenotazioneIntervalliId")
            Me.columnStatoPrenotazione = Me.Columns("StatoPrenotazione")
            Me.columnDataPrenotazione = Me.Columns("DataPrenotazione")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnIdApprovatore = Me.Columns("IdApprovatore")
            Me.columnModifiedOn = Me.Columns("ModifiedOn")
            Me.columnCreatedBy = Me.Columns("CreatedBy")
            Me.columnModifiedBy = Me.Columns("ModifiedBy")
            Me.columnNome = Me.Columns("Nome")
            Me.columnStato = Me.Columns("Stato")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnAccertatoreId = New DataColumn("AccertatoreId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccertatoreId)
            Me.columnAccertatori_PrenotazioneIntervalliId = New DataColumn("Accertatori_PrenotazioneIntervalliId", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccertatori_PrenotazioneIntervalliId)
            Me.columnStatoPrenotazione = New DataColumn("StatoPrenotazione", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoPrenotazione)
            Me.columnDataPrenotazione = New DataColumn("DataPrenotazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataPrenotazione)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnIdApprovatore = New DataColumn("IdApprovatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdApprovatore)
            Me.columnModifiedOn = New DataColumn("ModifiedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedOn)
            Me.columnCreatedBy = New DataColumn("CreatedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedBy)
            Me.columnModifiedBy = New DataColumn("ModifiedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedBy)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnStato = New DataColumn("Stato", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStato)
            Me.Constraints.Add(New UniqueConstraint("DsRichiestaPrenotazioneKey1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        Public Function NewAccertatori_PrenotazioneRichiestaRow() As Accertatori_PrenotazioneRichiestaRow
            Return CType(Me.NewRow,Accertatori_PrenotazioneRichiestaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Accertatori_PrenotazioneRichiestaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Accertatori_PrenotazioneRichiestaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Accertatori_PrenotazioneRichiestaRowChangedEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioneRichiestaRowChanged(Me, New Accertatori_PrenotazioneRichiestaRowChangeEvent(CType(e.Row,Accertatori_PrenotazioneRichiestaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Accertatori_PrenotazioneRichiestaRowChangingEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioneRichiestaRowChanging(Me, New Accertatori_PrenotazioneRichiestaRowChangeEvent(CType(e.Row,Accertatori_PrenotazioneRichiestaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Accertatori_PrenotazioneRichiestaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioneRichiestaRowDeleted(Me, New Accertatori_PrenotazioneRichiestaRowChangeEvent(CType(e.Row,Accertatori_PrenotazioneRichiestaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Accertatori_PrenotazioneRichiestaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioneRichiestaRowDeleting(Me, New Accertatori_PrenotazioneRichiestaRowChangeEvent(CType(e.Row,Accertatori_PrenotazioneRichiestaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatori_PrenotazioneRichiestaRow(ByVal row As Accertatori_PrenotazioneRichiestaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_PrenotazioneRichiestaRow
        Inherits DataRow
        
        Private tableAccertatori_PrenotazioneRichiesta As Accertatori_PrenotazioneRichiestaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatori_PrenotazioneRichiesta = CType(Me.Table,Accertatori_PrenotazioneRichiestaDataTable)
        End Sub
        
        Public Property ID As System.Guid
            Get
                Return CType(Me(Me.tableAccertatori_PrenotazioneRichiesta.IDColumn),System.Guid)
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneRichiesta.IDColumn) = value
            End Set
        End Property
        
        Public Property AccertatoreId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneRichiesta.AccertatoreIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneRichiesta.AccertatoreIdColumn) = value
            End Set
        End Property
        
        Public Property Accertatori_PrenotazioneIntervalliId As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneRichiesta.Accertatori_PrenotazioneIntervalliIdColumn),System.Guid)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneRichiesta.Accertatori_PrenotazioneIntervalliIdColumn) = value
            End Set
        End Property
        
        Public Property StatoPrenotazione As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneRichiesta.StatoPrenotazioneColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneRichiesta.StatoPrenotazioneColumn) = value
            End Set
        End Property
        
        Public Property DataPrenotazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneRichiesta.DataPrenotazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneRichiesta.DataPrenotazioneColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneRichiesta.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneRichiesta.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property IdApprovatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneRichiesta.IdApprovatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneRichiesta.IdApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property ModifiedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneRichiesta.ModifiedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneRichiesta.ModifiedOnColumn) = value
            End Set
        End Property
        
        Public Property CreatedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneRichiesta.CreatedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneRichiesta.CreatedByColumn) = value
            End Set
        End Property
        
        Public Property ModifiedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneRichiesta.ModifiedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneRichiesta.ModifiedByColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneRichiesta.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneRichiesta.NomeColumn) = value
            End Set
        End Property
        
        Public Property Stato As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneRichiesta.StatoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneRichiesta.StatoColumn) = value
            End Set
        End Property
        
        Public Function IsAccertatoreIdNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneRichiesta.AccertatoreIdColumn)
        End Function
        
        Public Sub SetAccertatoreIdNull()
            Me(Me.tableAccertatori_PrenotazioneRichiesta.AccertatoreIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAccertatori_PrenotazioneIntervalliIdNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneRichiesta.Accertatori_PrenotazioneIntervalliIdColumn)
        End Function
        
        Public Sub SetAccertatori_PrenotazioneIntervalliIdNull()
            Me(Me.tableAccertatori_PrenotazioneRichiesta.Accertatori_PrenotazioneIntervalliIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoPrenotazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneRichiesta.StatoPrenotazioneColumn)
        End Function
        
        Public Sub SetStatoPrenotazioneNull()
            Me(Me.tableAccertatori_PrenotazioneRichiesta.StatoPrenotazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataPrenotazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneRichiesta.DataPrenotazioneColumn)
        End Function
        
        Public Sub SetDataPrenotazioneNull()
            Me(Me.tableAccertatori_PrenotazioneRichiesta.DataPrenotazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneRichiesta.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableAccertatori_PrenotazioneRichiesta.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneRichiesta.IdApprovatoreColumn)
        End Function
        
        Public Sub SetIdApprovatoreNull()
            Me(Me.tableAccertatori_PrenotazioneRichiesta.IdApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneRichiesta.ModifiedOnColumn)
        End Function
        
        Public Sub SetModifiedOnNull()
            Me(Me.tableAccertatori_PrenotazioneRichiesta.ModifiedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneRichiesta.CreatedByColumn)
        End Function
        
        Public Sub SetCreatedByNull()
            Me(Me.tableAccertatori_PrenotazioneRichiesta.CreatedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneRichiesta.ModifiedByColumn)
        End Function
        
        Public Sub SetModifiedByNull()
            Me(Me.tableAccertatori_PrenotazioneRichiesta.ModifiedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneRichiesta.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableAccertatori_PrenotazioneRichiesta.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneRichiesta.StatoColumn)
        End Function
        
        Public Sub SetStatoNull()
            Me(Me.tableAccertatori_PrenotazioneRichiesta.StatoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_PrenotazioneRichiestaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Accertatori_PrenotazioneRichiestaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Accertatori_PrenotazioneRichiestaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Accertatori_PrenotazioneRichiestaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
