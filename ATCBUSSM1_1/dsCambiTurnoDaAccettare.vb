'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2503
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsCambiTurnoDaAccettare
    Inherits DataSet
    
    Private tableRichiesteCambiTurno As RichiesteCambiTurnoDataTable
    
    Private tableRichiesteCambiTurnoMensile As RichiesteCambiTurnoMensileDataTable
    
    Private tableRichiesteCambiTurnoNecessario As RichiesteCambiTurnoNecessarioDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("RichiesteCambiTurno")) Is Nothing) Then
                Me.Tables.Add(New RichiesteCambiTurnoDataTable(ds.Tables("RichiesteCambiTurno")))
            End If
            If (Not (ds.Tables("RichiesteCambiTurnoMensile")) Is Nothing) Then
                Me.Tables.Add(New RichiesteCambiTurnoMensileDataTable(ds.Tables("RichiesteCambiTurnoMensile")))
            End If
            If (Not (ds.Tables("RichiesteCambiTurnoNecessario")) Is Nothing) Then
                Me.Tables.Add(New RichiesteCambiTurnoNecessarioDataTable(ds.Tables("RichiesteCambiTurnoNecessario")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RichiesteCambiTurno As RichiesteCambiTurnoDataTable
        Get
            Return Me.tableRichiesteCambiTurno
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RichiesteCambiTurnoMensile As RichiesteCambiTurnoMensileDataTable
        Get
            Return Me.tableRichiesteCambiTurnoMensile
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RichiesteCambiTurnoNecessario As RichiesteCambiTurnoNecessarioDataTable
        Get
            Return Me.tableRichiesteCambiTurnoNecessario
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsCambiTurnoDaAccettare = CType(MyBase.Clone,dsCambiTurnoDaAccettare)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("RichiesteCambiTurno")) Is Nothing) Then
            Me.Tables.Add(New RichiesteCambiTurnoDataTable(ds.Tables("RichiesteCambiTurno")))
        End If
        If (Not (ds.Tables("RichiesteCambiTurnoMensile")) Is Nothing) Then
            Me.Tables.Add(New RichiesteCambiTurnoMensileDataTable(ds.Tables("RichiesteCambiTurnoMensile")))
        End If
        If (Not (ds.Tables("RichiesteCambiTurnoNecessario")) Is Nothing) Then
            Me.Tables.Add(New RichiesteCambiTurnoNecessarioDataTable(ds.Tables("RichiesteCambiTurnoNecessario")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableRichiesteCambiTurno = CType(Me.Tables("RichiesteCambiTurno"),RichiesteCambiTurnoDataTable)
        If (Not (Me.tableRichiesteCambiTurno) Is Nothing) Then
            Me.tableRichiesteCambiTurno.InitVars
        End If
        Me.tableRichiesteCambiTurnoMensile = CType(Me.Tables("RichiesteCambiTurnoMensile"),RichiesteCambiTurnoMensileDataTable)
        If (Not (Me.tableRichiesteCambiTurnoMensile) Is Nothing) Then
            Me.tableRichiesteCambiTurnoMensile.InitVars
        End If
        Me.tableRichiesteCambiTurnoNecessario = CType(Me.Tables("RichiesteCambiTurnoNecessario"),RichiesteCambiTurnoNecessarioDataTable)
        If (Not (Me.tableRichiesteCambiTurnoNecessario) Is Nothing) Then
            Me.tableRichiesteCambiTurnoNecessario.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsCambiTurnoDaAccettare"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsCambiTurnoDaAccettare.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableRichiesteCambiTurno = New RichiesteCambiTurnoDataTable
        Me.Tables.Add(Me.tableRichiesteCambiTurno)
        Me.tableRichiesteCambiTurnoMensile = New RichiesteCambiTurnoMensileDataTable
        Me.Tables.Add(Me.tableRichiesteCambiTurnoMensile)
        Me.tableRichiesteCambiTurnoNecessario = New RichiesteCambiTurnoNecessarioDataTable
        Me.Tables.Add(Me.tableRichiesteCambiTurnoNecessario)
    End Sub
    
    Private Function ShouldSerializeRichiesteCambiTurno() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRichiesteCambiTurnoMensile() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRichiesteCambiTurnoNecessario() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub RichiesteCambiTurnoRowChangeEventHandler(ByVal sender As Object, ByVal e As RichiesteCambiTurnoRowChangeEvent)
    
    Public Delegate Sub RichiesteCambiTurnoMensileRowChangeEventHandler(ByVal sender As Object, ByVal e As RichiesteCambiTurnoMensileRowChangeEvent)
    
    Public Delegate Sub RichiesteCambiTurnoNecessarioRowChangeEventHandler(ByVal sender As Object, ByVal e As RichiesteCambiTurnoNecessarioRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdRichiesta As DataColumn
        
        Private columnIdAccertatoreRichiedente As DataColumn
        
        Private columnIDuser As DataColumn
        
        Private columnTurnoRichiedente As DataColumn
        
        Private columnIdAccertatoreDestinatario As DataColumn
        
        Private columnTurnoDestinatario As DataColumn
        
        Private columnStatoRichiesta As DataColumn
        
        Private columnEtichettaStatoRichiesta As DataColumn
        
        Private columndata As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnIdApprovatore As DataColumn
        
        Private columnts As DataColumn
        
        Private columnID As DataColumn
        
        Friend Sub New()
            MyBase.New("RichiesteCambiTurno")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdRichiestaColumn As DataColumn
            Get
                Return Me.columnIdRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreRichiedenteColumn As DataColumn
            Get
                Return Me.columnIdAccertatoreRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property IDuserColumn As DataColumn
            Get
                Return Me.columnIDuser
            End Get
        End Property
        
        Friend ReadOnly Property TurnoRichiedenteColumn As DataColumn
            Get
                Return Me.columnTurnoRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreDestinatarioColumn As DataColumn
            Get
                Return Me.columnIdAccertatoreDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property TurnoDestinatarioColumn As DataColumn
            Get
                Return Me.columnTurnoDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property StatoRichiestaColumn As DataColumn
            Get
                Return Me.columnStatoRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property EtichettaStatoRichiestaColumn As DataColumn
            Get
                Return Me.columnEtichettaStatoRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property dataColumn As DataColumn
            Get
                Return Me.columndata
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property IdApprovatoreColumn As DataColumn
            Get
                Return Me.columnIdApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property tsColumn As DataColumn
            Get
                Return Me.columnts
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RichiesteCambiTurnoRow
            Get
                Return CType(Me.Rows(index),RichiesteCambiTurnoRow)
            End Get
        End Property
        
        Public Event RichiesteCambiTurnoRowChanged As RichiesteCambiTurnoRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoRowChanging As RichiesteCambiTurnoRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoRowDeleted As RichiesteCambiTurnoRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoRowDeleting As RichiesteCambiTurnoRowChangeEventHandler
        
        Public Overloads Sub AddRichiesteCambiTurnoRow(ByVal row As RichiesteCambiTurnoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRichiesteCambiTurnoRow(ByVal IdRichiesta As System.Guid, ByVal IdAccertatoreRichiedente As Integer, ByVal IDuser As String, ByVal TurnoRichiedente As String, ByVal IdAccertatoreDestinatario As Integer, ByVal TurnoDestinatario As String, ByVal StatoRichiesta As Integer, ByVal EtichettaStatoRichiesta As String, ByVal data As Date, ByVal StatoApprovazione As Integer, ByVal DataApprovazione As Date, ByVal IdApprovatore As Integer, ByVal ts As Date) As RichiesteCambiTurnoRow
            Dim rowRichiesteCambiTurnoRow As RichiesteCambiTurnoRow = CType(Me.NewRow,RichiesteCambiTurnoRow)
            rowRichiesteCambiTurnoRow.ItemArray = New Object() {IdRichiesta, IdAccertatoreRichiedente, IDuser, TurnoRichiedente, IdAccertatoreDestinatario, TurnoDestinatario, StatoRichiesta, EtichettaStatoRichiesta, data, StatoApprovazione, DataApprovazione, IdApprovatore, ts, Nothing}
            Me.Rows.Add(rowRichiesteCambiTurnoRow)
            Return rowRichiesteCambiTurnoRow
        End Function
        
        Public Function FindByIdRichiesta(ByVal IdRichiesta As System.Guid) As RichiesteCambiTurnoRow
            Return CType(Me.Rows.Find(New Object() {IdRichiesta}),RichiesteCambiTurnoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RichiesteCambiTurnoDataTable = CType(MyBase.Clone,RichiesteCambiTurnoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RichiesteCambiTurnoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdRichiesta = Me.Columns("IdRichiesta")
            Me.columnIdAccertatoreRichiedente = Me.Columns("IdAccertatoreRichiedente")
            Me.columnIDuser = Me.Columns("IDuser")
            Me.columnTurnoRichiedente = Me.Columns("TurnoRichiedente")
            Me.columnIdAccertatoreDestinatario = Me.Columns("IdAccertatoreDestinatario")
            Me.columnTurnoDestinatario = Me.Columns("TurnoDestinatario")
            Me.columnStatoRichiesta = Me.Columns("StatoRichiesta")
            Me.columnEtichettaStatoRichiesta = Me.Columns("EtichettaStatoRichiesta")
            Me.columndata = Me.Columns("data")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnIdApprovatore = Me.Columns("IdApprovatore")
            Me.columnts = Me.Columns("ts")
            Me.columnID = Me.Columns("ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdRichiesta = New DataColumn("IdRichiesta", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdRichiesta)
            Me.columnIdAccertatoreRichiedente = New DataColumn("IdAccertatoreRichiedente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatoreRichiedente)
            Me.columnIDuser = New DataColumn("IDuser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDuser)
            Me.columnTurnoRichiedente = New DataColumn("TurnoRichiedente", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnoRichiedente)
            Me.columnIdAccertatoreDestinatario = New DataColumn("IdAccertatoreDestinatario", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatoreDestinatario)
            Me.columnTurnoDestinatario = New DataColumn("TurnoDestinatario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnoDestinatario)
            Me.columnStatoRichiesta = New DataColumn("StatoRichiesta", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoRichiesta)
            Me.columnEtichettaStatoRichiesta = New DataColumn("EtichettaStatoRichiesta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEtichettaStatoRichiesta)
            Me.columndata = New DataColumn("data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndata)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnIdApprovatore = New DataColumn("IdApprovatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdApprovatore)
            Me.columnts = New DataColumn("ts", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnts)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdRichiesta}, true))
            Me.columnIdRichiesta.AllowDBNull = false
            Me.columnIdRichiesta.Unique = true
            Me.columnIDuser.ReadOnly = true
            Me.columnEtichettaStatoRichiesta.ReadOnly = true
            Me.columnID.AutoIncrement = true
            Me.columnID.ReadOnly = true
        End Sub
        
        Public Function NewRichiesteCambiTurnoRow() As RichiesteCambiTurnoRow
            Return CType(Me.NewRow,RichiesteCambiTurnoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RichiesteCambiTurnoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RichiesteCambiTurnoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RichiesteCambiTurnoRowChangedEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoRowChanged(Me, New RichiesteCambiTurnoRowChangeEvent(CType(e.Row,RichiesteCambiTurnoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RichiesteCambiTurnoRowChangingEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoRowChanging(Me, New RichiesteCambiTurnoRowChangeEvent(CType(e.Row,RichiesteCambiTurnoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RichiesteCambiTurnoRowDeletedEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoRowDeleted(Me, New RichiesteCambiTurnoRowChangeEvent(CType(e.Row,RichiesteCambiTurnoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RichiesteCambiTurnoRowDeletingEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoRowDeleting(Me, New RichiesteCambiTurnoRowChangeEvent(CType(e.Row,RichiesteCambiTurnoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRichiesteCambiTurnoRow(ByVal row As RichiesteCambiTurnoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoRow
        Inherits DataRow
        
        Private tableRichiesteCambiTurno As RichiesteCambiTurnoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRichiesteCambiTurno = CType(Me.Table,RichiesteCambiTurnoDataTable)
        End Sub
        
        Public Property IdRichiesta As System.Guid
            Get
                Return CType(Me(Me.tableRichiesteCambiTurno.IdRichiestaColumn),System.Guid)
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.IdRichiestaColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatoreRichiedente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.IdAccertatoreRichiedenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.IdAccertatoreRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property IDuser As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.IDuserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.IDuserColumn) = value
            End Set
        End Property
        
        Public Property TurnoRichiedente As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.TurnoRichiedenteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.TurnoRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatoreDestinatario As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.IdAccertatoreDestinatarioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.IdAccertatoreDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property TurnoDestinatario As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.TurnoDestinatarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.TurnoDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property StatoRichiesta As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.StatoRichiestaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.StatoRichiestaColumn) = value
            End Set
        End Property
        
        Public Property EtichettaStatoRichiesta As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.EtichettaStatoRichiestaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.EtichettaStatoRichiestaColumn) = value
            End Set
        End Property
        
        Public Property data As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.dataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.dataColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.StatoApprovazioneColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property IdApprovatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.IdApprovatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.IdApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property ts As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.tsColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.tsColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.IDColumn) = value
            End Set
        End Property
        
        Public Function IsIdAccertatoreRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.IdAccertatoreRichiedenteColumn)
        End Function
        
        Public Sub SetIdAccertatoreRichiedenteNull()
            Me(Me.tableRichiesteCambiTurno.IdAccertatoreRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDuserNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.IDuserColumn)
        End Function
        
        Public Sub SetIDuserNull()
            Me(Me.tableRichiesteCambiTurno.IDuserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.TurnoRichiedenteColumn)
        End Function
        
        Public Sub SetTurnoRichiedenteNull()
            Me(Me.tableRichiesteCambiTurno.TurnoRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdAccertatoreDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.IdAccertatoreDestinatarioColumn)
        End Function
        
        Public Sub SetIdAccertatoreDestinatarioNull()
            Me(Me.tableRichiesteCambiTurno.IdAccertatoreDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.TurnoDestinatarioColumn)
        End Function
        
        Public Sub SetTurnoDestinatarioNull()
            Me(Me.tableRichiesteCambiTurno.TurnoDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoRichiestaNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.StatoRichiestaColumn)
        End Function
        
        Public Sub SetStatoRichiestaNull()
            Me(Me.tableRichiesteCambiTurno.StatoRichiestaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEtichettaStatoRichiestaNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.EtichettaStatoRichiestaColumn)
        End Function
        
        Public Sub SetEtichettaStatoRichiestaNull()
            Me(Me.tableRichiesteCambiTurno.EtichettaStatoRichiestaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdataNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.dataColumn)
        End Function
        
        Public Sub SetdataNull()
            Me(Me.tableRichiesteCambiTurno.dataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableRichiesteCambiTurno.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableRichiesteCambiTurno.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.IdApprovatoreColumn)
        End Function
        
        Public Sub SetIdApprovatoreNull()
            Me(Me.tableRichiesteCambiTurno.IdApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstsNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.tsColumn)
        End Function
        
        Public Sub SettsNull()
            Me(Me.tableRichiesteCambiTurno.tsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableRichiesteCambiTurno.IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RichiesteCambiTurnoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RichiesteCambiTurnoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RichiesteCambiTurnoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoMensileDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdRichiesta As DataColumn
        
        Private columnIdAccertatoreRichiedente As DataColumn
        
        Private columnIDuser As DataColumn
        
        Private columnTurnoRichiedente As DataColumn
        
        Private columnIdAccertatoreDestinatario As DataColumn
        
        Private columnTurnoDestinatario As DataColumn
        
        Private columnStatoRichiesta As DataColumn
        
        Private columnEtichettaStatoRichiesta As DataColumn
        
        Private columndata As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnIdApprovatore As DataColumn
        
        Private columnts As DataColumn
        
        Private columnID As DataColumn
        
        Friend Sub New()
            MyBase.New("RichiesteCambiTurnoMensile")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdRichiestaColumn As DataColumn
            Get
                Return Me.columnIdRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreRichiedenteColumn As DataColumn
            Get
                Return Me.columnIdAccertatoreRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property IDuserColumn As DataColumn
            Get
                Return Me.columnIDuser
            End Get
        End Property
        
        Friend ReadOnly Property TurnoRichiedenteColumn As DataColumn
            Get
                Return Me.columnTurnoRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreDestinatarioColumn As DataColumn
            Get
                Return Me.columnIdAccertatoreDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property TurnoDestinatarioColumn As DataColumn
            Get
                Return Me.columnTurnoDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property StatoRichiestaColumn As DataColumn
            Get
                Return Me.columnStatoRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property EtichettaStatoRichiestaColumn As DataColumn
            Get
                Return Me.columnEtichettaStatoRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property dataColumn As DataColumn
            Get
                Return Me.columndata
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property IdApprovatoreColumn As DataColumn
            Get
                Return Me.columnIdApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property tsColumn As DataColumn
            Get
                Return Me.columnts
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RichiesteCambiTurnoMensileRow
            Get
                Return CType(Me.Rows(index),RichiesteCambiTurnoMensileRow)
            End Get
        End Property
        
        Public Event RichiesteCambiTurnoMensileRowChanged As RichiesteCambiTurnoMensileRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoMensileRowChanging As RichiesteCambiTurnoMensileRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoMensileRowDeleted As RichiesteCambiTurnoMensileRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoMensileRowDeleting As RichiesteCambiTurnoMensileRowChangeEventHandler
        
        Public Overloads Sub AddRichiesteCambiTurnoMensileRow(ByVal row As RichiesteCambiTurnoMensileRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRichiesteCambiTurnoMensileRow(ByVal IdRichiesta As System.Guid, ByVal IdAccertatoreRichiedente As Integer, ByVal IDuser As String, ByVal TurnoRichiedente As Integer, ByVal IdAccertatoreDestinatario As Integer, ByVal TurnoDestinatario As Integer, ByVal StatoRichiesta As Integer, ByVal EtichettaStatoRichiesta As String, ByVal data As Date, ByVal StatoApprovazione As Integer, ByVal DataApprovazione As Date, ByVal IdApprovatore As Integer, ByVal ts As Date) As RichiesteCambiTurnoMensileRow
            Dim rowRichiesteCambiTurnoMensileRow As RichiesteCambiTurnoMensileRow = CType(Me.NewRow,RichiesteCambiTurnoMensileRow)
            rowRichiesteCambiTurnoMensileRow.ItemArray = New Object() {IdRichiesta, IdAccertatoreRichiedente, IDuser, TurnoRichiedente, IdAccertatoreDestinatario, TurnoDestinatario, StatoRichiesta, EtichettaStatoRichiesta, data, StatoApprovazione, DataApprovazione, IdApprovatore, ts, Nothing}
            Me.Rows.Add(rowRichiesteCambiTurnoMensileRow)
            Return rowRichiesteCambiTurnoMensileRow
        End Function
        
        Public Function FindByIdRichiesta(ByVal IdRichiesta As System.Guid) As RichiesteCambiTurnoMensileRow
            Return CType(Me.Rows.Find(New Object() {IdRichiesta}),RichiesteCambiTurnoMensileRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RichiesteCambiTurnoMensileDataTable = CType(MyBase.Clone,RichiesteCambiTurnoMensileDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RichiesteCambiTurnoMensileDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdRichiesta = Me.Columns("IdRichiesta")
            Me.columnIdAccertatoreRichiedente = Me.Columns("IdAccertatoreRichiedente")
            Me.columnIDuser = Me.Columns("IDuser")
            Me.columnTurnoRichiedente = Me.Columns("TurnoRichiedente")
            Me.columnIdAccertatoreDestinatario = Me.Columns("IdAccertatoreDestinatario")
            Me.columnTurnoDestinatario = Me.Columns("TurnoDestinatario")
            Me.columnStatoRichiesta = Me.Columns("StatoRichiesta")
            Me.columnEtichettaStatoRichiesta = Me.Columns("EtichettaStatoRichiesta")
            Me.columndata = Me.Columns("data")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnIdApprovatore = Me.Columns("IdApprovatore")
            Me.columnts = Me.Columns("ts")
            Me.columnID = Me.Columns("ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdRichiesta = New DataColumn("IdRichiesta", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdRichiesta)
            Me.columnIdAccertatoreRichiedente = New DataColumn("IdAccertatoreRichiedente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatoreRichiedente)
            Me.columnIDuser = New DataColumn("IDuser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDuser)
            Me.columnTurnoRichiedente = New DataColumn("TurnoRichiedente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnoRichiedente)
            Me.columnIdAccertatoreDestinatario = New DataColumn("IdAccertatoreDestinatario", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatoreDestinatario)
            Me.columnTurnoDestinatario = New DataColumn("TurnoDestinatario", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnoDestinatario)
            Me.columnStatoRichiesta = New DataColumn("StatoRichiesta", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoRichiesta)
            Me.columnEtichettaStatoRichiesta = New DataColumn("EtichettaStatoRichiesta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEtichettaStatoRichiesta)
            Me.columndata = New DataColumn("data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndata)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnIdApprovatore = New DataColumn("IdApprovatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdApprovatore)
            Me.columnts = New DataColumn("ts", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnts)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdRichiesta}, true))
            Me.columnIdRichiesta.AllowDBNull = false
            Me.columnIdRichiesta.Unique = true
            Me.columnIDuser.ReadOnly = true
            Me.columnEtichettaStatoRichiesta.ReadOnly = true
            Me.columnID.AutoIncrement = true
            Me.columnID.ReadOnly = true
        End Sub
        
        Public Function NewRichiesteCambiTurnoMensileRow() As RichiesteCambiTurnoMensileRow
            Return CType(Me.NewRow,RichiesteCambiTurnoMensileRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RichiesteCambiTurnoMensileRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RichiesteCambiTurnoMensileRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RichiesteCambiTurnoMensileRowChangedEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensileRowChanged(Me, New RichiesteCambiTurnoMensileRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensileRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RichiesteCambiTurnoMensileRowChangingEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensileRowChanging(Me, New RichiesteCambiTurnoMensileRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensileRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RichiesteCambiTurnoMensileRowDeletedEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensileRowDeleted(Me, New RichiesteCambiTurnoMensileRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensileRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RichiesteCambiTurnoMensileRowDeletingEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensileRowDeleting(Me, New RichiesteCambiTurnoMensileRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensileRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRichiesteCambiTurnoMensileRow(ByVal row As RichiesteCambiTurnoMensileRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoMensileRow
        Inherits DataRow
        
        Private tableRichiesteCambiTurnoMensile As RichiesteCambiTurnoMensileDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRichiesteCambiTurnoMensile = CType(Me.Table,RichiesteCambiTurnoMensileDataTable)
        End Sub
        
        Public Property IdRichiesta As System.Guid
            Get
                Return CType(Me(Me.tableRichiesteCambiTurnoMensile.IdRichiestaColumn),System.Guid)
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.IdRichiestaColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatoreRichiedente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreRichiedenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property IDuser As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.IDuserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.IDuserColumn) = value
            End Set
        End Property
        
        Public Property TurnoRichiedente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.TurnoRichiedenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.TurnoRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatoreDestinatario As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreDestinatarioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property TurnoDestinatario As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.TurnoDestinatarioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.TurnoDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property StatoRichiesta As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.StatoRichiestaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.StatoRichiestaColumn) = value
            End Set
        End Property
        
        Public Property EtichettaStatoRichiesta As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.EtichettaStatoRichiestaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.EtichettaStatoRichiestaColumn) = value
            End Set
        End Property
        
        Public Property data As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.dataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.dataColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.StatoApprovazioneColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property IdApprovatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.IdApprovatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.IdApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property ts As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.tsColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.tsColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.IDColumn) = value
            End Set
        End Property
        
        Public Function IsIdAccertatoreRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreRichiedenteColumn)
        End Function
        
        Public Sub SetIdAccertatoreRichiedenteNull()
            Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDuserNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.IDuserColumn)
        End Function
        
        Public Sub SetIDuserNull()
            Me(Me.tableRichiesteCambiTurnoMensile.IDuserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.TurnoRichiedenteColumn)
        End Function
        
        Public Sub SetTurnoRichiedenteNull()
            Me(Me.tableRichiesteCambiTurnoMensile.TurnoRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdAccertatoreDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreDestinatarioColumn)
        End Function
        
        Public Sub SetIdAccertatoreDestinatarioNull()
            Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.TurnoDestinatarioColumn)
        End Function
        
        Public Sub SetTurnoDestinatarioNull()
            Me(Me.tableRichiesteCambiTurnoMensile.TurnoDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoRichiestaNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.StatoRichiestaColumn)
        End Function
        
        Public Sub SetStatoRichiestaNull()
            Me(Me.tableRichiesteCambiTurnoMensile.StatoRichiestaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEtichettaStatoRichiestaNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.EtichettaStatoRichiestaColumn)
        End Function
        
        Public Sub SetEtichettaStatoRichiestaNull()
            Me(Me.tableRichiesteCambiTurnoMensile.EtichettaStatoRichiestaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdataNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.dataColumn)
        End Function
        
        Public Sub SetdataNull()
            Me(Me.tableRichiesteCambiTurnoMensile.dataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableRichiesteCambiTurnoMensile.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableRichiesteCambiTurnoMensile.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.IdApprovatoreColumn)
        End Function
        
        Public Sub SetIdApprovatoreNull()
            Me(Me.tableRichiesteCambiTurnoMensile.IdApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstsNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.tsColumn)
        End Function
        
        Public Sub SettsNull()
            Me(Me.tableRichiesteCambiTurnoMensile.tsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableRichiesteCambiTurnoMensile.IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoMensileRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RichiesteCambiTurnoMensileRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RichiesteCambiTurnoMensileRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RichiesteCambiTurnoMensileRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoNecessarioDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdRichiesta As DataColumn
        
        Private columnIdAccertatoreRichiedente As DataColumn
        
        Private columnIDuser As DataColumn
        
        Private columnTurnoRichiedente As DataColumn
        
        Private columnIdAccertatoreDestinatario As DataColumn
        
        Private columnTurnoDestinatario As DataColumn
        
        Private columnStatoRichiesta As DataColumn
        
        Private columnEtichettaStatoRichiesta As DataColumn
        
        Private columndata As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnIdApprovatore As DataColumn
        
        Private columnts As DataColumn
        
        Private columnID As DataColumn
        
        Friend Sub New()
            MyBase.New("RichiesteCambiTurnoNecessario")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdRichiestaColumn As DataColumn
            Get
                Return Me.columnIdRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreRichiedenteColumn As DataColumn
            Get
                Return Me.columnIdAccertatoreRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property IDuserColumn As DataColumn
            Get
                Return Me.columnIDuser
            End Get
        End Property
        
        Friend ReadOnly Property TurnoRichiedenteColumn As DataColumn
            Get
                Return Me.columnTurnoRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreDestinatarioColumn As DataColumn
            Get
                Return Me.columnIdAccertatoreDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property TurnoDestinatarioColumn As DataColumn
            Get
                Return Me.columnTurnoDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property StatoRichiestaColumn As DataColumn
            Get
                Return Me.columnStatoRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property EtichettaStatoRichiestaColumn As DataColumn
            Get
                Return Me.columnEtichettaStatoRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property dataColumn As DataColumn
            Get
                Return Me.columndata
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property IdApprovatoreColumn As DataColumn
            Get
                Return Me.columnIdApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property tsColumn As DataColumn
            Get
                Return Me.columnts
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RichiesteCambiTurnoNecessarioRow
            Get
                Return CType(Me.Rows(index),RichiesteCambiTurnoNecessarioRow)
            End Get
        End Property
        
        Public Event RichiesteCambiTurnoNecessarioRowChanged As RichiesteCambiTurnoNecessarioRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoNecessarioRowChanging As RichiesteCambiTurnoNecessarioRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoNecessarioRowDeleted As RichiesteCambiTurnoNecessarioRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoNecessarioRowDeleting As RichiesteCambiTurnoNecessarioRowChangeEventHandler
        
        Public Overloads Sub AddRichiesteCambiTurnoNecessarioRow(ByVal row As RichiesteCambiTurnoNecessarioRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRichiesteCambiTurnoNecessarioRow(ByVal IdRichiesta As System.Guid, ByVal IdAccertatoreRichiedente As Integer, ByVal IDuser As String, ByVal TurnoRichiedente As String, ByVal IdAccertatoreDestinatario As Integer, ByVal TurnoDestinatario As String, ByVal StatoRichiesta As Integer, ByVal EtichettaStatoRichiesta As String, ByVal data As Date, ByVal StatoApprovazione As Integer, ByVal DataApprovazione As Date, ByVal IdApprovatore As Integer, ByVal ts As Date) As RichiesteCambiTurnoNecessarioRow
            Dim rowRichiesteCambiTurnoNecessarioRow As RichiesteCambiTurnoNecessarioRow = CType(Me.NewRow,RichiesteCambiTurnoNecessarioRow)
            rowRichiesteCambiTurnoNecessarioRow.ItemArray = New Object() {IdRichiesta, IdAccertatoreRichiedente, IDuser, TurnoRichiedente, IdAccertatoreDestinatario, TurnoDestinatario, StatoRichiesta, EtichettaStatoRichiesta, data, StatoApprovazione, DataApprovazione, IdApprovatore, ts, Nothing}
            Me.Rows.Add(rowRichiesteCambiTurnoNecessarioRow)
            Return rowRichiesteCambiTurnoNecessarioRow
        End Function
        
        Public Function FindByIdRichiesta(ByVal IdRichiesta As System.Guid) As RichiesteCambiTurnoNecessarioRow
            Return CType(Me.Rows.Find(New Object() {IdRichiesta}),RichiesteCambiTurnoNecessarioRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RichiesteCambiTurnoNecessarioDataTable = CType(MyBase.Clone,RichiesteCambiTurnoNecessarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RichiesteCambiTurnoNecessarioDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdRichiesta = Me.Columns("IdRichiesta")
            Me.columnIdAccertatoreRichiedente = Me.Columns("IdAccertatoreRichiedente")
            Me.columnIDuser = Me.Columns("IDuser")
            Me.columnTurnoRichiedente = Me.Columns("TurnoRichiedente")
            Me.columnIdAccertatoreDestinatario = Me.Columns("IdAccertatoreDestinatario")
            Me.columnTurnoDestinatario = Me.Columns("TurnoDestinatario")
            Me.columnStatoRichiesta = Me.Columns("StatoRichiesta")
            Me.columnEtichettaStatoRichiesta = Me.Columns("EtichettaStatoRichiesta")
            Me.columndata = Me.Columns("data")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnIdApprovatore = Me.Columns("IdApprovatore")
            Me.columnts = Me.Columns("ts")
            Me.columnID = Me.Columns("ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdRichiesta = New DataColumn("IdRichiesta", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdRichiesta)
            Me.columnIdAccertatoreRichiedente = New DataColumn("IdAccertatoreRichiedente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatoreRichiedente)
            Me.columnIDuser = New DataColumn("IDuser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDuser)
            Me.columnTurnoRichiedente = New DataColumn("TurnoRichiedente", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnoRichiedente)
            Me.columnIdAccertatoreDestinatario = New DataColumn("IdAccertatoreDestinatario", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatoreDestinatario)
            Me.columnTurnoDestinatario = New DataColumn("TurnoDestinatario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnoDestinatario)
            Me.columnStatoRichiesta = New DataColumn("StatoRichiesta", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoRichiesta)
            Me.columnEtichettaStatoRichiesta = New DataColumn("EtichettaStatoRichiesta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEtichettaStatoRichiesta)
            Me.columndata = New DataColumn("data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndata)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnIdApprovatore = New DataColumn("IdApprovatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdApprovatore)
            Me.columnts = New DataColumn("ts", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnts)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.Constraints.Add(New UniqueConstraint("dsCambiTurnoDaAccettareKey1", New DataColumn() {Me.columnIdRichiesta}, true))
            Me.columnIdRichiesta.AllowDBNull = false
            Me.columnIdRichiesta.Unique = true
            Me.columnIDuser.ReadOnly = true
            Me.columnEtichettaStatoRichiesta.ReadOnly = true
            Me.columnID.AutoIncrement = true
            Me.columnID.ReadOnly = true
        End Sub
        
        Public Function NewRichiesteCambiTurnoNecessarioRow() As RichiesteCambiTurnoNecessarioRow
            Return CType(Me.NewRow,RichiesteCambiTurnoNecessarioRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RichiesteCambiTurnoNecessarioRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RichiesteCambiTurnoNecessarioRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RichiesteCambiTurnoNecessarioRowChangedEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoNecessarioRowChanged(Me, New RichiesteCambiTurnoNecessarioRowChangeEvent(CType(e.Row,RichiesteCambiTurnoNecessarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RichiesteCambiTurnoNecessarioRowChangingEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoNecessarioRowChanging(Me, New RichiesteCambiTurnoNecessarioRowChangeEvent(CType(e.Row,RichiesteCambiTurnoNecessarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RichiesteCambiTurnoNecessarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoNecessarioRowDeleted(Me, New RichiesteCambiTurnoNecessarioRowChangeEvent(CType(e.Row,RichiesteCambiTurnoNecessarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RichiesteCambiTurnoNecessarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoNecessarioRowDeleting(Me, New RichiesteCambiTurnoNecessarioRowChangeEvent(CType(e.Row,RichiesteCambiTurnoNecessarioRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRichiesteCambiTurnoNecessarioRow(ByVal row As RichiesteCambiTurnoNecessarioRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoNecessarioRow
        Inherits DataRow
        
        Private tableRichiesteCambiTurnoNecessario As RichiesteCambiTurnoNecessarioDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRichiesteCambiTurnoNecessario = CType(Me.Table,RichiesteCambiTurnoNecessarioDataTable)
        End Sub
        
        Public Property IdRichiesta As System.Guid
            Get
                Return CType(Me(Me.tableRichiesteCambiTurnoNecessario.IdRichiestaColumn),System.Guid)
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoNecessario.IdRichiestaColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatoreRichiedente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoNecessario.IdAccertatoreRichiedenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoNecessario.IdAccertatoreRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property IDuser As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoNecessario.IDuserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoNecessario.IDuserColumn) = value
            End Set
        End Property
        
        Public Property TurnoRichiedente As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoNecessario.TurnoRichiedenteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoNecessario.TurnoRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatoreDestinatario As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoNecessario.IdAccertatoreDestinatarioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoNecessario.IdAccertatoreDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property TurnoDestinatario As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoNecessario.TurnoDestinatarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoNecessario.TurnoDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property StatoRichiesta As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoNecessario.StatoRichiestaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoNecessario.StatoRichiestaColumn) = value
            End Set
        End Property
        
        Public Property EtichettaStatoRichiesta As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoNecessario.EtichettaStatoRichiestaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoNecessario.EtichettaStatoRichiestaColumn) = value
            End Set
        End Property
        
        Public Property data As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoNecessario.dataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoNecessario.dataColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoNecessario.StatoApprovazioneColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoNecessario.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoNecessario.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoNecessario.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property IdApprovatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoNecessario.IdApprovatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoNecessario.IdApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property ts As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoNecessario.tsColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoNecessario.tsColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoNecessario.IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoNecessario.IDColumn) = value
            End Set
        End Property
        
        Public Function IsIdAccertatoreRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoNecessario.IdAccertatoreRichiedenteColumn)
        End Function
        
        Public Sub SetIdAccertatoreRichiedenteNull()
            Me(Me.tableRichiesteCambiTurnoNecessario.IdAccertatoreRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDuserNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoNecessario.IDuserColumn)
        End Function
        
        Public Sub SetIDuserNull()
            Me(Me.tableRichiesteCambiTurnoNecessario.IDuserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoNecessario.TurnoRichiedenteColumn)
        End Function
        
        Public Sub SetTurnoRichiedenteNull()
            Me(Me.tableRichiesteCambiTurnoNecessario.TurnoRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdAccertatoreDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoNecessario.IdAccertatoreDestinatarioColumn)
        End Function
        
        Public Sub SetIdAccertatoreDestinatarioNull()
            Me(Me.tableRichiesteCambiTurnoNecessario.IdAccertatoreDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoNecessario.TurnoDestinatarioColumn)
        End Function
        
        Public Sub SetTurnoDestinatarioNull()
            Me(Me.tableRichiesteCambiTurnoNecessario.TurnoDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoRichiestaNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoNecessario.StatoRichiestaColumn)
        End Function
        
        Public Sub SetStatoRichiestaNull()
            Me(Me.tableRichiesteCambiTurnoNecessario.StatoRichiestaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEtichettaStatoRichiestaNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoNecessario.EtichettaStatoRichiestaColumn)
        End Function
        
        Public Sub SetEtichettaStatoRichiestaNull()
            Me(Me.tableRichiesteCambiTurnoNecessario.EtichettaStatoRichiestaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdataNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoNecessario.dataColumn)
        End Function
        
        Public Sub SetdataNull()
            Me(Me.tableRichiesteCambiTurnoNecessario.dataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoNecessario.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableRichiesteCambiTurnoNecessario.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoNecessario.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableRichiesteCambiTurnoNecessario.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoNecessario.IdApprovatoreColumn)
        End Function
        
        Public Sub SetIdApprovatoreNull()
            Me(Me.tableRichiesteCambiTurnoNecessario.IdApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstsNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoNecessario.tsColumn)
        End Function
        
        Public Sub SettsNull()
            Me(Me.tableRichiesteCambiTurnoNecessario.tsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoNecessario.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableRichiesteCambiTurnoNecessario.IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoNecessarioRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RichiesteCambiTurnoNecessarioRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RichiesteCambiTurnoNecessarioRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RichiesteCambiTurnoNecessarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
