'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsRicaviSosta
    Inherits DataSet
    
    Private tableRicaviSosta As RicaviSostaDataTable
    
    Private tableConsuntivoSosta As ConsuntivoSostaDataTable
    
    Private tableBudgetSosta As BudgetSostaDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("RicaviSosta")) Is Nothing) Then
                Me.Tables.Add(New RicaviSostaDataTable(ds.Tables("RicaviSosta")))
            End If
            If (Not (ds.Tables("ConsuntivoSosta")) Is Nothing) Then
                Me.Tables.Add(New ConsuntivoSostaDataTable(ds.Tables("ConsuntivoSosta")))
            End If
            If (Not (ds.Tables("BudgetSosta")) Is Nothing) Then
                Me.Tables.Add(New BudgetSostaDataTable(ds.Tables("BudgetSosta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RicaviSosta As RicaviSostaDataTable
        Get
            Return Me.tableRicaviSosta
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ConsuntivoSosta As ConsuntivoSostaDataTable
        Get
            Return Me.tableConsuntivoSosta
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BudgetSosta As BudgetSostaDataTable
        Get
            Return Me.tableBudgetSosta
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsRicaviSosta = CType(MyBase.Clone,DsRicaviSosta)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("RicaviSosta")) Is Nothing) Then
            Me.Tables.Add(New RicaviSostaDataTable(ds.Tables("RicaviSosta")))
        End If
        If (Not (ds.Tables("ConsuntivoSosta")) Is Nothing) Then
            Me.Tables.Add(New ConsuntivoSostaDataTable(ds.Tables("ConsuntivoSosta")))
        End If
        If (Not (ds.Tables("BudgetSosta")) Is Nothing) Then
            Me.Tables.Add(New BudgetSostaDataTable(ds.Tables("BudgetSosta")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableRicaviSosta = CType(Me.Tables("RicaviSosta"),RicaviSostaDataTable)
        If (Not (Me.tableRicaviSosta) Is Nothing) Then
            Me.tableRicaviSosta.InitVars
        End If
        Me.tableConsuntivoSosta = CType(Me.Tables("ConsuntivoSosta"),ConsuntivoSostaDataTable)
        If (Not (Me.tableConsuntivoSosta) Is Nothing) Then
            Me.tableConsuntivoSosta.InitVars
        End If
        Me.tableBudgetSosta = CType(Me.Tables("BudgetSosta"),BudgetSostaDataTable)
        If (Not (Me.tableBudgetSosta) Is Nothing) Then
            Me.tableBudgetSosta.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsRicaviSosta"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsRicaviSosta.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableRicaviSosta = New RicaviSostaDataTable
        Me.Tables.Add(Me.tableRicaviSosta)
        Me.tableConsuntivoSosta = New ConsuntivoSostaDataTable
        Me.Tables.Add(Me.tableConsuntivoSosta)
        Me.tableBudgetSosta = New BudgetSostaDataTable
        Me.Tables.Add(Me.tableBudgetSosta)
    End Sub
    
    Private Function ShouldSerializeRicaviSosta() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeConsuntivoSosta() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBudgetSosta() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub RicaviSostaRowChangeEventHandler(ByVal sender As Object, ByVal e As RicaviSostaRowChangeEvent)
    
    Public Delegate Sub ConsuntivoSostaRowChangeEventHandler(ByVal sender As Object, ByVal e As ConsuntivoSostaRowChangeEvent)
    
    Public Delegate Sub BudgetSostaRowChangeEventHandler(ByVal sender As Object, ByVal e As BudgetSostaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RicaviSostaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnData As DataColumn
        
        Private columnBudget As DataColumn
        
        Private columnConsuntivo As DataColumn
        
        Friend Sub New()
            MyBase.New("RicaviSosta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property BudgetColumn As DataColumn
            Get
                Return Me.columnBudget
            End Get
        End Property
        
        Friend ReadOnly Property ConsuntivoColumn As DataColumn
            Get
                Return Me.columnConsuntivo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RicaviSostaRow
            Get
                Return CType(Me.Rows(index),RicaviSostaRow)
            End Get
        End Property
        
        Public Event RicaviSostaRowChanged As RicaviSostaRowChangeEventHandler
        
        Public Event RicaviSostaRowChanging As RicaviSostaRowChangeEventHandler
        
        Public Event RicaviSostaRowDeleted As RicaviSostaRowChangeEventHandler
        
        Public Event RicaviSostaRowDeleting As RicaviSostaRowChangeEventHandler
        
        Public Overloads Sub AddRicaviSostaRow(ByVal row As RicaviSostaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRicaviSostaRow(ByVal Id As System.Guid, ByVal Data As Date, ByVal Budget As Double, ByVal Consuntivo As Double) As RicaviSostaRow
            Dim rowRicaviSostaRow As RicaviSostaRow = CType(Me.NewRow,RicaviSostaRow)
            rowRicaviSostaRow.ItemArray = New Object() {Id, Data, Budget, Consuntivo}
            Me.Rows.Add(rowRicaviSostaRow)
            Return rowRicaviSostaRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As RicaviSostaRow
            Return CType(Me.Rows.Find(New Object() {Id}),RicaviSostaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RicaviSostaDataTable = CType(MyBase.Clone,RicaviSostaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RicaviSostaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnData = Me.Columns("Data")
            Me.columnBudget = Me.Columns("Budget")
            Me.columnConsuntivo = Me.Columns("Consuntivo")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnBudget = New DataColumn("Budget", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBudget)
            Me.columnConsuntivo = New DataColumn("Consuntivo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConsuntivo)
            Me.Constraints.Add(New UniqueConstraint("DsRicaviSostaKey", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewRicaviSostaRow() As RicaviSostaRow
            Return CType(Me.NewRow,RicaviSostaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RicaviSostaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RicaviSostaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RicaviSostaRowChangedEvent) Is Nothing) Then
                RaiseEvent RicaviSostaRowChanged(Me, New RicaviSostaRowChangeEvent(CType(e.Row,RicaviSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RicaviSostaRowChangingEvent) Is Nothing) Then
                RaiseEvent RicaviSostaRowChanging(Me, New RicaviSostaRowChangeEvent(CType(e.Row,RicaviSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RicaviSostaRowDeletedEvent) Is Nothing) Then
                RaiseEvent RicaviSostaRowDeleted(Me, New RicaviSostaRowChangeEvent(CType(e.Row,RicaviSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RicaviSostaRowDeletingEvent) Is Nothing) Then
                RaiseEvent RicaviSostaRowDeleting(Me, New RicaviSostaRowChangeEvent(CType(e.Row,RicaviSostaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRicaviSostaRow(ByVal row As RicaviSostaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RicaviSostaRow
        Inherits DataRow
        
        Private tableRicaviSosta As RicaviSostaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRicaviSosta = CType(Me.Table,RicaviSostaDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableRicaviSosta.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableRicaviSosta.IdColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableRicaviSosta.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRicaviSosta.DataColumn) = value
            End Set
        End Property
        
        Public Property Budget As Double
            Get
                Try 
                    Return CType(Me(Me.tableRicaviSosta.BudgetColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRicaviSosta.BudgetColumn) = value
            End Set
        End Property
        
        Public Property Consuntivo As Double
            Get
                Try 
                    Return CType(Me(Me.tableRicaviSosta.ConsuntivoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRicaviSosta.ConsuntivoColumn) = value
            End Set
        End Property
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableRicaviSosta.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableRicaviSosta.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBudgetNull() As Boolean
            Return Me.IsNull(Me.tableRicaviSosta.BudgetColumn)
        End Function
        
        Public Sub SetBudgetNull()
            Me(Me.tableRicaviSosta.BudgetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConsuntivoNull() As Boolean
            Return Me.IsNull(Me.tableRicaviSosta.ConsuntivoColumn)
        End Function
        
        Public Sub SetConsuntivoNull()
            Me(Me.tableRicaviSosta.ConsuntivoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RicaviSostaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RicaviSostaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RicaviSostaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RicaviSostaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsuntivoSostaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdC As DataColumn
        
        Private columnDataC As DataColumn
        
        Private columnConsuntivo As DataColumn
        
        Friend Sub New()
            MyBase.New("ConsuntivoSosta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdCColumn As DataColumn
            Get
                Return Me.columnIdC
            End Get
        End Property
        
        Friend ReadOnly Property DataCColumn As DataColumn
            Get
                Return Me.columnDataC
            End Get
        End Property
        
        Friend ReadOnly Property ConsuntivoColumn As DataColumn
            Get
                Return Me.columnConsuntivo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ConsuntivoSostaRow
            Get
                Return CType(Me.Rows(index),ConsuntivoSostaRow)
            End Get
        End Property
        
        Public Event ConsuntivoSostaRowChanged As ConsuntivoSostaRowChangeEventHandler
        
        Public Event ConsuntivoSostaRowChanging As ConsuntivoSostaRowChangeEventHandler
        
        Public Event ConsuntivoSostaRowDeleted As ConsuntivoSostaRowChangeEventHandler
        
        Public Event ConsuntivoSostaRowDeleting As ConsuntivoSostaRowChangeEventHandler
        
        Public Overloads Sub AddConsuntivoSostaRow(ByVal row As ConsuntivoSostaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddConsuntivoSostaRow(ByVal IdC As System.Guid, ByVal DataC As Date, ByVal Consuntivo As Double) As ConsuntivoSostaRow
            Dim rowConsuntivoSostaRow As ConsuntivoSostaRow = CType(Me.NewRow,ConsuntivoSostaRow)
            rowConsuntivoSostaRow.ItemArray = New Object() {IdC, DataC, Consuntivo}
            Me.Rows.Add(rowConsuntivoSostaRow)
            Return rowConsuntivoSostaRow
        End Function
        
        Public Function FindByIdC(ByVal IdC As System.Guid) As ConsuntivoSostaRow
            Return CType(Me.Rows.Find(New Object() {IdC}),ConsuntivoSostaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ConsuntivoSostaDataTable = CType(MyBase.Clone,ConsuntivoSostaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ConsuntivoSostaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdC = Me.Columns("IdC")
            Me.columnDataC = Me.Columns("DataC")
            Me.columnConsuntivo = Me.Columns("Consuntivo")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdC = New DataColumn("IdC", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdC)
            Me.columnDataC = New DataColumn("DataC", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataC)
            Me.columnConsuntivo = New DataColumn("Consuntivo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConsuntivo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdC}, true))
            Me.columnIdC.AllowDBNull = false
            Me.columnIdC.Unique = true
        End Sub
        
        Public Function NewConsuntivoSostaRow() As ConsuntivoSostaRow
            Return CType(Me.NewRow,ConsuntivoSostaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ConsuntivoSostaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ConsuntivoSostaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ConsuntivoSostaRowChangedEvent) Is Nothing) Then
                RaiseEvent ConsuntivoSostaRowChanged(Me, New ConsuntivoSostaRowChangeEvent(CType(e.Row,ConsuntivoSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ConsuntivoSostaRowChangingEvent) Is Nothing) Then
                RaiseEvent ConsuntivoSostaRowChanging(Me, New ConsuntivoSostaRowChangeEvent(CType(e.Row,ConsuntivoSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ConsuntivoSostaRowDeletedEvent) Is Nothing) Then
                RaiseEvent ConsuntivoSostaRowDeleted(Me, New ConsuntivoSostaRowChangeEvent(CType(e.Row,ConsuntivoSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ConsuntivoSostaRowDeletingEvent) Is Nothing) Then
                RaiseEvent ConsuntivoSostaRowDeleting(Me, New ConsuntivoSostaRowChangeEvent(CType(e.Row,ConsuntivoSostaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveConsuntivoSostaRow(ByVal row As ConsuntivoSostaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsuntivoSostaRow
        Inherits DataRow
        
        Private tableConsuntivoSosta As ConsuntivoSostaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableConsuntivoSosta = CType(Me.Table,ConsuntivoSostaDataTable)
        End Sub
        
        Public Property IdC As System.Guid
            Get
                Return CType(Me(Me.tableConsuntivoSosta.IdCColumn),System.Guid)
            End Get
            Set
                Me(Me.tableConsuntivoSosta.IdCColumn) = value
            End Set
        End Property
        
        Public Property DataC As Date
            Get
                Try 
                    Return CType(Me(Me.tableConsuntivoSosta.DataCColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsuntivoSosta.DataCColumn) = value
            End Set
        End Property
        
        Public Property Consuntivo As Double
            Get
                Try 
                    Return CType(Me(Me.tableConsuntivoSosta.ConsuntivoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsuntivoSosta.ConsuntivoColumn) = value
            End Set
        End Property
        
        Public Function IsDataCNull() As Boolean
            Return Me.IsNull(Me.tableConsuntivoSosta.DataCColumn)
        End Function
        
        Public Sub SetDataCNull()
            Me(Me.tableConsuntivoSosta.DataCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConsuntivoNull() As Boolean
            Return Me.IsNull(Me.tableConsuntivoSosta.ConsuntivoColumn)
        End Function
        
        Public Sub SetConsuntivoNull()
            Me(Me.tableConsuntivoSosta.ConsuntivoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsuntivoSostaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ConsuntivoSostaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ConsuntivoSostaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ConsuntivoSostaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetSostaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnData As DataColumn
        
        Private columnBudget As DataColumn
        
        Private columnConsuntivo As DataColumn
        
        Private columnConsuntivoFiere As DataColumn
        
        Friend Sub New()
            MyBase.New("BudgetSosta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property BudgetColumn As DataColumn
            Get
                Return Me.columnBudget
            End Get
        End Property
        
        Friend ReadOnly Property ConsuntivoColumn As DataColumn
            Get
                Return Me.columnConsuntivo
            End Get
        End Property
        
        Friend ReadOnly Property ConsuntivoFiereColumn As DataColumn
            Get
                Return Me.columnConsuntivoFiere
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BudgetSostaRow
            Get
                Return CType(Me.Rows(index),BudgetSostaRow)
            End Get
        End Property
        
        Public Event BudgetSostaRowChanged As BudgetSostaRowChangeEventHandler
        
        Public Event BudgetSostaRowChanging As BudgetSostaRowChangeEventHandler
        
        Public Event BudgetSostaRowDeleted As BudgetSostaRowChangeEventHandler
        
        Public Event BudgetSostaRowDeleting As BudgetSostaRowChangeEventHandler
        
        Public Overloads Sub AddBudgetSostaRow(ByVal row As BudgetSostaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBudgetSostaRow(ByVal Id As System.Guid, ByVal Data As Date, ByVal Budget As Double, ByVal Consuntivo As Double, ByVal ConsuntivoFiere As Double) As BudgetSostaRow
            Dim rowBudgetSostaRow As BudgetSostaRow = CType(Me.NewRow,BudgetSostaRow)
            rowBudgetSostaRow.ItemArray = New Object() {Id, Data, Budget, Consuntivo, ConsuntivoFiere}
            Me.Rows.Add(rowBudgetSostaRow)
            Return rowBudgetSostaRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As BudgetSostaRow
            Return CType(Me.Rows.Find(New Object() {Id}),BudgetSostaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BudgetSostaDataTable = CType(MyBase.Clone,BudgetSostaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BudgetSostaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnData = Me.Columns("Data")
            Me.columnBudget = Me.Columns("Budget")
            Me.columnConsuntivo = Me.Columns("Consuntivo")
            Me.columnConsuntivoFiere = Me.Columns("ConsuntivoFiere")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnBudget = New DataColumn("Budget", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBudget)
            Me.columnConsuntivo = New DataColumn("Consuntivo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConsuntivo)
            Me.columnConsuntivoFiere = New DataColumn("ConsuntivoFiere", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConsuntivoFiere)
            Me.Constraints.Add(New UniqueConstraint("DsRicaviSostaKey1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewBudgetSostaRow() As BudgetSostaRow
            Return CType(Me.NewRow,BudgetSostaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BudgetSostaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BudgetSostaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BudgetSostaRowChangedEvent) Is Nothing) Then
                RaiseEvent BudgetSostaRowChanged(Me, New BudgetSostaRowChangeEvent(CType(e.Row,BudgetSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BudgetSostaRowChangingEvent) Is Nothing) Then
                RaiseEvent BudgetSostaRowChanging(Me, New BudgetSostaRowChangeEvent(CType(e.Row,BudgetSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BudgetSostaRowDeletedEvent) Is Nothing) Then
                RaiseEvent BudgetSostaRowDeleted(Me, New BudgetSostaRowChangeEvent(CType(e.Row,BudgetSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BudgetSostaRowDeletingEvent) Is Nothing) Then
                RaiseEvent BudgetSostaRowDeleting(Me, New BudgetSostaRowChangeEvent(CType(e.Row,BudgetSostaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBudgetSostaRow(ByVal row As BudgetSostaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetSostaRow
        Inherits DataRow
        
        Private tableBudgetSosta As BudgetSostaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBudgetSosta = CType(Me.Table,BudgetSostaDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableBudgetSosta.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableBudgetSosta.IdColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableBudgetSosta.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudgetSosta.DataColumn) = value
            End Set
        End Property
        
        Public Property Budget As Double
            Get
                Try 
                    Return CType(Me(Me.tableBudgetSosta.BudgetColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudgetSosta.BudgetColumn) = value
            End Set
        End Property
        
        Public Property Consuntivo As Double
            Get
                Try 
                    Return CType(Me(Me.tableBudgetSosta.ConsuntivoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudgetSosta.ConsuntivoColumn) = value
            End Set
        End Property
        
        Public Property ConsuntivoFiere As Double
            Get
                Try 
                    Return CType(Me(Me.tableBudgetSosta.ConsuntivoFiereColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudgetSosta.ConsuntivoFiereColumn) = value
            End Set
        End Property
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableBudgetSosta.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableBudgetSosta.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBudgetNull() As Boolean
            Return Me.IsNull(Me.tableBudgetSosta.BudgetColumn)
        End Function
        
        Public Sub SetBudgetNull()
            Me(Me.tableBudgetSosta.BudgetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConsuntivoNull() As Boolean
            Return Me.IsNull(Me.tableBudgetSosta.ConsuntivoColumn)
        End Function
        
        Public Sub SetConsuntivoNull()
            Me(Me.tableBudgetSosta.ConsuntivoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConsuntivoFiereNull() As Boolean
            Return Me.IsNull(Me.tableBudgetSosta.ConsuntivoFiereColumn)
        End Function
        
        Public Sub SetConsuntivoFiereNull()
            Me(Me.tableBudgetSosta.ConsuntivoFiereColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetSostaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BudgetSostaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BudgetSostaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BudgetSostaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
