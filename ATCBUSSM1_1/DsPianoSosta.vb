'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsPianoSosta
    Inherits DataSet
    
    Private tableLavoriStradaliZone As LavoriStradaliZoneDataTable
    
    Private tablePianoSosta As PianoSostaDataTable
    
    Private tablePianoSostaZona As PianoSostaZonaDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("LavoriStradaliZone")) Is Nothing) Then
                Me.Tables.Add(New LavoriStradaliZoneDataTable(ds.Tables("LavoriStradaliZone")))
            End If
            If (Not (ds.Tables("PianoSosta")) Is Nothing) Then
                Me.Tables.Add(New PianoSostaDataTable(ds.Tables("PianoSosta")))
            End If
            If (Not (ds.Tables("PianoSostaZona")) Is Nothing) Then
                Me.Tables.Add(New PianoSostaZonaDataTable(ds.Tables("PianoSostaZona")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LavoriStradaliZone As LavoriStradaliZoneDataTable
        Get
            Return Me.tableLavoriStradaliZone
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PianoSosta As PianoSostaDataTable
        Get
            Return Me.tablePianoSosta
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PianoSostaZona As PianoSostaZonaDataTable
        Get
            Return Me.tablePianoSostaZona
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsPianoSosta = CType(MyBase.Clone,DsPianoSosta)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("LavoriStradaliZone")) Is Nothing) Then
            Me.Tables.Add(New LavoriStradaliZoneDataTable(ds.Tables("LavoriStradaliZone")))
        End If
        If (Not (ds.Tables("PianoSosta")) Is Nothing) Then
            Me.Tables.Add(New PianoSostaDataTable(ds.Tables("PianoSosta")))
        End If
        If (Not (ds.Tables("PianoSostaZona")) Is Nothing) Then
            Me.Tables.Add(New PianoSostaZonaDataTable(ds.Tables("PianoSostaZona")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableLavoriStradaliZone = CType(Me.Tables("LavoriStradaliZone"),LavoriStradaliZoneDataTable)
        If (Not (Me.tableLavoriStradaliZone) Is Nothing) Then
            Me.tableLavoriStradaliZone.InitVars
        End If
        Me.tablePianoSosta = CType(Me.Tables("PianoSosta"),PianoSostaDataTable)
        If (Not (Me.tablePianoSosta) Is Nothing) Then
            Me.tablePianoSosta.InitVars
        End If
        Me.tablePianoSostaZona = CType(Me.Tables("PianoSostaZona"),PianoSostaZonaDataTable)
        If (Not (Me.tablePianoSostaZona) Is Nothing) Then
            Me.tablePianoSostaZona.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsPianoSosta"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsPianoSosta.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableLavoriStradaliZone = New LavoriStradaliZoneDataTable
        Me.Tables.Add(Me.tableLavoriStradaliZone)
        Me.tablePianoSosta = New PianoSostaDataTable
        Me.Tables.Add(Me.tablePianoSosta)
        Me.tablePianoSostaZona = New PianoSostaZonaDataTable
        Me.Tables.Add(Me.tablePianoSostaZona)
    End Sub
    
    Private Function ShouldSerializeLavoriStradaliZone() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePianoSosta() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePianoSostaZona() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub LavoriStradaliZoneRowChangeEventHandler(ByVal sender As Object, ByVal e As LavoriStradaliZoneRowChangeEvent)
    
    Public Delegate Sub PianoSostaRowChangeEventHandler(ByVal sender As Object, ByVal e As PianoSostaRowChangeEvent)
    
    Public Delegate Sub PianoSostaZonaRowChangeEventHandler(ByVal sender As Object, ByVal e As PianoSostaZonaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliZoneDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdZona As DataColumn
        
        Private columnZona As DataColumn
        
        Private columnTipo As DataColumn
        
        Friend Sub New()
            MyBase.New("LavoriStradaliZone")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdZonaColumn As DataColumn
            Get
                Return Me.columnIdZona
            End Get
        End Property
        
        Friend ReadOnly Property ZonaColumn As DataColumn
            Get
                Return Me.columnZona
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LavoriStradaliZoneRow
            Get
                Return CType(Me.Rows(index),LavoriStradaliZoneRow)
            End Get
        End Property
        
        Public Event LavoriStradaliZoneRowChanged As LavoriStradaliZoneRowChangeEventHandler
        
        Public Event LavoriStradaliZoneRowChanging As LavoriStradaliZoneRowChangeEventHandler
        
        Public Event LavoriStradaliZoneRowDeleted As LavoriStradaliZoneRowChangeEventHandler
        
        Public Event LavoriStradaliZoneRowDeleting As LavoriStradaliZoneRowChangeEventHandler
        
        Public Overloads Sub AddLavoriStradaliZoneRow(ByVal row As LavoriStradaliZoneRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLavoriStradaliZoneRow(ByVal IdZona As Integer, ByVal Zona As String, ByVal Tipo As Integer) As LavoriStradaliZoneRow
            Dim rowLavoriStradaliZoneRow As LavoriStradaliZoneRow = CType(Me.NewRow,LavoriStradaliZoneRow)
            rowLavoriStradaliZoneRow.ItemArray = New Object() {IdZona, Zona, Tipo}
            Me.Rows.Add(rowLavoriStradaliZoneRow)
            Return rowLavoriStradaliZoneRow
        End Function
        
        Public Function FindByIdZona(ByVal IdZona As Integer) As LavoriStradaliZoneRow
            Return CType(Me.Rows.Find(New Object() {IdZona}),LavoriStradaliZoneRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LavoriStradaliZoneDataTable = CType(MyBase.Clone,LavoriStradaliZoneDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LavoriStradaliZoneDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdZona = Me.Columns("IdZona")
            Me.columnZona = Me.Columns("Zona")
            Me.columnTipo = Me.Columns("Tipo")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdZona = New DataColumn("IdZona", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdZona)
            Me.columnZona = New DataColumn("Zona", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnZona)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdZona}, true))
            Me.columnIdZona.AllowDBNull = false
            Me.columnIdZona.Unique = true
        End Sub
        
        Public Function NewLavoriStradaliZoneRow() As LavoriStradaliZoneRow
            Return CType(Me.NewRow,LavoriStradaliZoneRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LavoriStradaliZoneRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LavoriStradaliZoneRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LavoriStradaliZoneRowChangedEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliZoneRowChanged(Me, New LavoriStradaliZoneRowChangeEvent(CType(e.Row,LavoriStradaliZoneRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LavoriStradaliZoneRowChangingEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliZoneRowChanging(Me, New LavoriStradaliZoneRowChangeEvent(CType(e.Row,LavoriStradaliZoneRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LavoriStradaliZoneRowDeletedEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliZoneRowDeleted(Me, New LavoriStradaliZoneRowChangeEvent(CType(e.Row,LavoriStradaliZoneRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LavoriStradaliZoneRowDeletingEvent) Is Nothing) Then
                RaiseEvent LavoriStradaliZoneRowDeleting(Me, New LavoriStradaliZoneRowChangeEvent(CType(e.Row,LavoriStradaliZoneRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLavoriStradaliZoneRow(ByVal row As LavoriStradaliZoneRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliZoneRow
        Inherits DataRow
        
        Private tableLavoriStradaliZone As LavoriStradaliZoneDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLavoriStradaliZone = CType(Me.Table,LavoriStradaliZoneDataTable)
        End Sub
        
        Public Property IdZona As Integer
            Get
                Return CType(Me(Me.tableLavoriStradaliZone.IdZonaColumn),Integer)
            End Get
            Set
                Me(Me.tableLavoriStradaliZone.IdZonaColumn) = value
            End Set
        End Property
        
        Public Property Zona As String
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradaliZone.ZonaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradaliZone.ZonaColumn) = value
            End Set
        End Property
        
        Public Property Tipo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLavoriStradaliZone.TipoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLavoriStradaliZone.TipoColumn) = value
            End Set
        End Property
        
        Public Function IsZonaNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradaliZone.ZonaColumn)
        End Function
        
        Public Sub SetZonaNull()
            Me(Me.tableLavoriStradaliZone.ZonaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableLavoriStradaliZone.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tableLavoriStradaliZone.TipoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LavoriStradaliZoneRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LavoriStradaliZoneRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LavoriStradaliZoneRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LavoriStradaliZoneRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PianoSostaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdZona As DataColumn
        
        Private columnOrdinaria As DataColumn
        
        Private columnRapidaRot As DataColumn
        
        Private columnResidenti As DataColumn
        
        Private columnDisabili As DataColumn
        
        Private columnGenerici As DataColumn
        
        Private columnCarico_scarico As DataColumn
        
        Private columnPostiMoto As DataColumn
        
        Friend Sub New()
            MyBase.New("PianoSosta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdZonaColumn As DataColumn
            Get
                Return Me.columnIdZona
            End Get
        End Property
        
        Friend ReadOnly Property OrdinariaColumn As DataColumn
            Get
                Return Me.columnOrdinaria
            End Get
        End Property
        
        Friend ReadOnly Property RapidaRotColumn As DataColumn
            Get
                Return Me.columnRapidaRot
            End Get
        End Property
        
        Friend ReadOnly Property ResidentiColumn As DataColumn
            Get
                Return Me.columnResidenti
            End Get
        End Property
        
        Friend ReadOnly Property DisabiliColumn As DataColumn
            Get
                Return Me.columnDisabili
            End Get
        End Property
        
        Friend ReadOnly Property GenericiColumn As DataColumn
            Get
                Return Me.columnGenerici
            End Get
        End Property
        
        Friend ReadOnly Property Carico_scaricoColumn As DataColumn
            Get
                Return Me.columnCarico_scarico
            End Get
        End Property
        
        Friend ReadOnly Property PostiMotoColumn As DataColumn
            Get
                Return Me.columnPostiMoto
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PianoSostaRow
            Get
                Return CType(Me.Rows(index),PianoSostaRow)
            End Get
        End Property
        
        Public Event PianoSostaRowChanged As PianoSostaRowChangeEventHandler
        
        Public Event PianoSostaRowChanging As PianoSostaRowChangeEventHandler
        
        Public Event PianoSostaRowDeleted As PianoSostaRowChangeEventHandler
        
        Public Event PianoSostaRowDeleting As PianoSostaRowChangeEventHandler
        
        Public Overloads Sub AddPianoSostaRow(ByVal row As PianoSostaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPianoSostaRow(ByVal Id As System.Guid, ByVal IdZona As Integer, ByVal Ordinaria As Integer, ByVal RapidaRot As Integer, ByVal Residenti As Integer, ByVal Disabili As Integer, ByVal Generici As Integer, ByVal Carico_scarico As Integer, ByVal PostiMoto As Integer) As PianoSostaRow
            Dim rowPianoSostaRow As PianoSostaRow = CType(Me.NewRow,PianoSostaRow)
            rowPianoSostaRow.ItemArray = New Object() {Id, IdZona, Ordinaria, RapidaRot, Residenti, Disabili, Generici, Carico_scarico, PostiMoto}
            Me.Rows.Add(rowPianoSostaRow)
            Return rowPianoSostaRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As PianoSostaRow
            Return CType(Me.Rows.Find(New Object() {Id}),PianoSostaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PianoSostaDataTable = CType(MyBase.Clone,PianoSostaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PianoSostaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdZona = Me.Columns("IdZona")
            Me.columnOrdinaria = Me.Columns("Ordinaria")
            Me.columnRapidaRot = Me.Columns("RapidaRot")
            Me.columnResidenti = Me.Columns("Residenti")
            Me.columnDisabili = Me.Columns("Disabili")
            Me.columnGenerici = Me.Columns("Generici")
            Me.columnCarico_scarico = Me.Columns("Carico_scarico")
            Me.columnPostiMoto = Me.Columns("PostiMoto")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdZona = New DataColumn("IdZona", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdZona)
            Me.columnOrdinaria = New DataColumn("Ordinaria", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdinaria)
            Me.columnRapidaRot = New DataColumn("RapidaRot", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRapidaRot)
            Me.columnResidenti = New DataColumn("Residenti", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResidenti)
            Me.columnDisabili = New DataColumn("Disabili", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDisabili)
            Me.columnGenerici = New DataColumn("Generici", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGenerici)
            Me.columnCarico_scarico = New DataColumn("Carico_scarico", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCarico_scarico)
            Me.columnPostiMoto = New DataColumn("PostiMoto", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPostiMoto)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewPianoSostaRow() As PianoSostaRow
            Return CType(Me.NewRow,PianoSostaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PianoSostaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PianoSostaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PianoSostaRowChangedEvent) Is Nothing) Then
                RaiseEvent PianoSostaRowChanged(Me, New PianoSostaRowChangeEvent(CType(e.Row,PianoSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PianoSostaRowChangingEvent) Is Nothing) Then
                RaiseEvent PianoSostaRowChanging(Me, New PianoSostaRowChangeEvent(CType(e.Row,PianoSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PianoSostaRowDeletedEvent) Is Nothing) Then
                RaiseEvent PianoSostaRowDeleted(Me, New PianoSostaRowChangeEvent(CType(e.Row,PianoSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PianoSostaRowDeletingEvent) Is Nothing) Then
                RaiseEvent PianoSostaRowDeleting(Me, New PianoSostaRowChangeEvent(CType(e.Row,PianoSostaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePianoSostaRow(ByVal row As PianoSostaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PianoSostaRow
        Inherits DataRow
        
        Private tablePianoSosta As PianoSostaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePianoSosta = CType(Me.Table,PianoSostaDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tablePianoSosta.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tablePianoSosta.IdColumn) = value
            End Set
        End Property
        
        Public Property IdZona As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSosta.IdZonaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSosta.IdZonaColumn) = value
            End Set
        End Property
        
        Public Property Ordinaria As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSosta.OrdinariaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSosta.OrdinariaColumn) = value
            End Set
        End Property
        
        Public Property RapidaRot As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSosta.RapidaRotColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSosta.RapidaRotColumn) = value
            End Set
        End Property
        
        Public Property Residenti As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSosta.ResidentiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSosta.ResidentiColumn) = value
            End Set
        End Property
        
        Public Property Disabili As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSosta.DisabiliColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSosta.DisabiliColumn) = value
            End Set
        End Property
        
        Public Property Generici As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSosta.GenericiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSosta.GenericiColumn) = value
            End Set
        End Property
        
        Public Property Carico_scarico As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSosta.Carico_scaricoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSosta.Carico_scaricoColumn) = value
            End Set
        End Property
        
        Public Property PostiMoto As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSosta.PostiMotoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSosta.PostiMotoColumn) = value
            End Set
        End Property
        
        Public Function IsIdZonaNull() As Boolean
            Return Me.IsNull(Me.tablePianoSosta.IdZonaColumn)
        End Function
        
        Public Sub SetIdZonaNull()
            Me(Me.tablePianoSosta.IdZonaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdinariaNull() As Boolean
            Return Me.IsNull(Me.tablePianoSosta.OrdinariaColumn)
        End Function
        
        Public Sub SetOrdinariaNull()
            Me(Me.tablePianoSosta.OrdinariaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRapidaRotNull() As Boolean
            Return Me.IsNull(Me.tablePianoSosta.RapidaRotColumn)
        End Function
        
        Public Sub SetRapidaRotNull()
            Me(Me.tablePianoSosta.RapidaRotColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResidentiNull() As Boolean
            Return Me.IsNull(Me.tablePianoSosta.ResidentiColumn)
        End Function
        
        Public Sub SetResidentiNull()
            Me(Me.tablePianoSosta.ResidentiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDisabiliNull() As Boolean
            Return Me.IsNull(Me.tablePianoSosta.DisabiliColumn)
        End Function
        
        Public Sub SetDisabiliNull()
            Me(Me.tablePianoSosta.DisabiliColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGenericiNull() As Boolean
            Return Me.IsNull(Me.tablePianoSosta.GenericiColumn)
        End Function
        
        Public Sub SetGenericiNull()
            Me(Me.tablePianoSosta.GenericiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCarico_scaricoNull() As Boolean
            Return Me.IsNull(Me.tablePianoSosta.Carico_scaricoColumn)
        End Function
        
        Public Sub SetCarico_scaricoNull()
            Me(Me.tablePianoSosta.Carico_scaricoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPostiMotoNull() As Boolean
            Return Me.IsNull(Me.tablePianoSosta.PostiMotoColumn)
        End Function
        
        Public Sub SetPostiMotoNull()
            Me(Me.tablePianoSosta.PostiMotoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PianoSostaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PianoSostaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PianoSostaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PianoSostaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PianoSostaZonaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdZona As DataColumn
        
        Private columnOrdinaria As DataColumn
        
        Private columnRapidaRot As DataColumn
        
        Private columnResidenti As DataColumn
        
        Private columnDisabili As DataColumn
        
        Private columnGenerici As DataColumn
        
        Private columnCarico_scarico As DataColumn
        
        Private columnPostiMoto As DataColumn
        
        Private columnZona As DataColumn
        
        Private columnTipo As DataColumn
        
        Friend Sub New()
            MyBase.New("PianoSostaZona")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdZonaColumn As DataColumn
            Get
                Return Me.columnIdZona
            End Get
        End Property
        
        Friend ReadOnly Property OrdinariaColumn As DataColumn
            Get
                Return Me.columnOrdinaria
            End Get
        End Property
        
        Friend ReadOnly Property RapidaRotColumn As DataColumn
            Get
                Return Me.columnRapidaRot
            End Get
        End Property
        
        Friend ReadOnly Property ResidentiColumn As DataColumn
            Get
                Return Me.columnResidenti
            End Get
        End Property
        
        Friend ReadOnly Property DisabiliColumn As DataColumn
            Get
                Return Me.columnDisabili
            End Get
        End Property
        
        Friend ReadOnly Property GenericiColumn As DataColumn
            Get
                Return Me.columnGenerici
            End Get
        End Property
        
        Friend ReadOnly Property Carico_scaricoColumn As DataColumn
            Get
                Return Me.columnCarico_scarico
            End Get
        End Property
        
        Friend ReadOnly Property PostiMotoColumn As DataColumn
            Get
                Return Me.columnPostiMoto
            End Get
        End Property
        
        Friend ReadOnly Property ZonaColumn As DataColumn
            Get
                Return Me.columnZona
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PianoSostaZonaRow
            Get
                Return CType(Me.Rows(index),PianoSostaZonaRow)
            End Get
        End Property
        
        Public Event PianoSostaZonaRowChanged As PianoSostaZonaRowChangeEventHandler
        
        Public Event PianoSostaZonaRowChanging As PianoSostaZonaRowChangeEventHandler
        
        Public Event PianoSostaZonaRowDeleted As PianoSostaZonaRowChangeEventHandler
        
        Public Event PianoSostaZonaRowDeleting As PianoSostaZonaRowChangeEventHandler
        
        Public Overloads Sub AddPianoSostaZonaRow(ByVal row As PianoSostaZonaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPianoSostaZonaRow(ByVal Id As System.Guid, ByVal IdZona As Integer, ByVal Ordinaria As Integer, ByVal RapidaRot As Integer, ByVal Residenti As Integer, ByVal Disabili As Integer, ByVal Generici As Integer, ByVal Carico_scarico As Integer, ByVal PostiMoto As Integer, ByVal Zona As String, ByVal Tipo As Integer) As PianoSostaZonaRow
            Dim rowPianoSostaZonaRow As PianoSostaZonaRow = CType(Me.NewRow,PianoSostaZonaRow)
            rowPianoSostaZonaRow.ItemArray = New Object() {Id, IdZona, Ordinaria, RapidaRot, Residenti, Disabili, Generici, Carico_scarico, PostiMoto, Zona, Tipo}
            Me.Rows.Add(rowPianoSostaZonaRow)
            Return rowPianoSostaZonaRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PianoSostaZonaDataTable = CType(MyBase.Clone,PianoSostaZonaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PianoSostaZonaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdZona = Me.Columns("IdZona")
            Me.columnOrdinaria = Me.Columns("Ordinaria")
            Me.columnRapidaRot = Me.Columns("RapidaRot")
            Me.columnResidenti = Me.Columns("Residenti")
            Me.columnDisabili = Me.Columns("Disabili")
            Me.columnGenerici = Me.Columns("Generici")
            Me.columnCarico_scarico = Me.Columns("Carico_scarico")
            Me.columnPostiMoto = Me.Columns("PostiMoto")
            Me.columnZona = Me.Columns("Zona")
            Me.columnTipo = Me.Columns("Tipo")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdZona = New DataColumn("IdZona", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdZona)
            Me.columnOrdinaria = New DataColumn("Ordinaria", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdinaria)
            Me.columnRapidaRot = New DataColumn("RapidaRot", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRapidaRot)
            Me.columnResidenti = New DataColumn("Residenti", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResidenti)
            Me.columnDisabili = New DataColumn("Disabili", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDisabili)
            Me.columnGenerici = New DataColumn("Generici", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGenerici)
            Me.columnCarico_scarico = New DataColumn("Carico_scarico", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCarico_scarico)
            Me.columnPostiMoto = New DataColumn("PostiMoto", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPostiMoto)
            Me.columnZona = New DataColumn("Zona", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnZona)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnId.AllowDBNull = false
        End Sub
        
        Public Function NewPianoSostaZonaRow() As PianoSostaZonaRow
            Return CType(Me.NewRow,PianoSostaZonaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PianoSostaZonaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PianoSostaZonaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PianoSostaZonaRowChangedEvent) Is Nothing) Then
                RaiseEvent PianoSostaZonaRowChanged(Me, New PianoSostaZonaRowChangeEvent(CType(e.Row,PianoSostaZonaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PianoSostaZonaRowChangingEvent) Is Nothing) Then
                RaiseEvent PianoSostaZonaRowChanging(Me, New PianoSostaZonaRowChangeEvent(CType(e.Row,PianoSostaZonaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PianoSostaZonaRowDeletedEvent) Is Nothing) Then
                RaiseEvent PianoSostaZonaRowDeleted(Me, New PianoSostaZonaRowChangeEvent(CType(e.Row,PianoSostaZonaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PianoSostaZonaRowDeletingEvent) Is Nothing) Then
                RaiseEvent PianoSostaZonaRowDeleting(Me, New PianoSostaZonaRowChangeEvent(CType(e.Row,PianoSostaZonaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePianoSostaZonaRow(ByVal row As PianoSostaZonaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PianoSostaZonaRow
        Inherits DataRow
        
        Private tablePianoSostaZona As PianoSostaZonaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePianoSostaZona = CType(Me.Table,PianoSostaZonaDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tablePianoSostaZona.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tablePianoSostaZona.IdColumn) = value
            End Set
        End Property
        
        Public Property IdZona As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSostaZona.IdZonaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSostaZona.IdZonaColumn) = value
            End Set
        End Property
        
        Public Property Ordinaria As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSostaZona.OrdinariaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSostaZona.OrdinariaColumn) = value
            End Set
        End Property
        
        Public Property RapidaRot As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSostaZona.RapidaRotColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSostaZona.RapidaRotColumn) = value
            End Set
        End Property
        
        Public Property Residenti As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSostaZona.ResidentiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSostaZona.ResidentiColumn) = value
            End Set
        End Property
        
        Public Property Disabili As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSostaZona.DisabiliColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSostaZona.DisabiliColumn) = value
            End Set
        End Property
        
        Public Property Generici As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSostaZona.GenericiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSostaZona.GenericiColumn) = value
            End Set
        End Property
        
        Public Property Carico_scarico As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSostaZona.Carico_scaricoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSostaZona.Carico_scaricoColumn) = value
            End Set
        End Property
        
        Public Property PostiMoto As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSostaZona.PostiMotoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSostaZona.PostiMotoColumn) = value
            End Set
        End Property
        
        Public Property Zona As String
            Get
                Try 
                    Return CType(Me(Me.tablePianoSostaZona.ZonaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSostaZona.ZonaColumn) = value
            End Set
        End Property
        
        Public Property Tipo As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePianoSostaZona.TipoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePianoSostaZona.TipoColumn) = value
            End Set
        End Property
        
        Public Function IsIdZonaNull() As Boolean
            Return Me.IsNull(Me.tablePianoSostaZona.IdZonaColumn)
        End Function
        
        Public Sub SetIdZonaNull()
            Me(Me.tablePianoSostaZona.IdZonaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdinariaNull() As Boolean
            Return Me.IsNull(Me.tablePianoSostaZona.OrdinariaColumn)
        End Function
        
        Public Sub SetOrdinariaNull()
            Me(Me.tablePianoSostaZona.OrdinariaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRapidaRotNull() As Boolean
            Return Me.IsNull(Me.tablePianoSostaZona.RapidaRotColumn)
        End Function
        
        Public Sub SetRapidaRotNull()
            Me(Me.tablePianoSostaZona.RapidaRotColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResidentiNull() As Boolean
            Return Me.IsNull(Me.tablePianoSostaZona.ResidentiColumn)
        End Function
        
        Public Sub SetResidentiNull()
            Me(Me.tablePianoSostaZona.ResidentiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDisabiliNull() As Boolean
            Return Me.IsNull(Me.tablePianoSostaZona.DisabiliColumn)
        End Function
        
        Public Sub SetDisabiliNull()
            Me(Me.tablePianoSostaZona.DisabiliColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGenericiNull() As Boolean
            Return Me.IsNull(Me.tablePianoSostaZona.GenericiColumn)
        End Function
        
        Public Sub SetGenericiNull()
            Me(Me.tablePianoSostaZona.GenericiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCarico_scaricoNull() As Boolean
            Return Me.IsNull(Me.tablePianoSostaZona.Carico_scaricoColumn)
        End Function
        
        Public Sub SetCarico_scaricoNull()
            Me(Me.tablePianoSostaZona.Carico_scaricoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPostiMotoNull() As Boolean
            Return Me.IsNull(Me.tablePianoSostaZona.PostiMotoColumn)
        End Function
        
        Public Sub SetPostiMotoNull()
            Me(Me.tablePianoSostaZona.PostiMotoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsZonaNull() As Boolean
            Return Me.IsNull(Me.tablePianoSostaZona.ZonaColumn)
        End Function
        
        Public Sub SetZonaNull()
            Me(Me.tablePianoSostaZona.ZonaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tablePianoSostaZona.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tablePianoSostaZona.TipoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PianoSostaZonaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PianoSostaZonaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PianoSostaZonaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PianoSostaZonaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
