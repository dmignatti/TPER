'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsOrdinanze
    Inherits DataSet
    
    Private tableOrdinanzeTipi As OrdinanzeTipiDataTable
    
    Private tableOrdinanze As OrdinanzeDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("OrdinanzeTipi")) Is Nothing) Then
                Me.Tables.Add(New OrdinanzeTipiDataTable(ds.Tables("OrdinanzeTipi")))
            End If
            If (Not (ds.Tables("Ordinanze")) Is Nothing) Then
                Me.Tables.Add(New OrdinanzeDataTable(ds.Tables("Ordinanze")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OrdinanzeTipi As OrdinanzeTipiDataTable
        Get
            Return Me.tableOrdinanzeTipi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ordinanze As OrdinanzeDataTable
        Get
            Return Me.tableOrdinanze
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsOrdinanze = CType(MyBase.Clone,dsOrdinanze)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("OrdinanzeTipi")) Is Nothing) Then
            Me.Tables.Add(New OrdinanzeTipiDataTable(ds.Tables("OrdinanzeTipi")))
        End If
        If (Not (ds.Tables("Ordinanze")) Is Nothing) Then
            Me.Tables.Add(New OrdinanzeDataTable(ds.Tables("Ordinanze")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableOrdinanzeTipi = CType(Me.Tables("OrdinanzeTipi"),OrdinanzeTipiDataTable)
        If (Not (Me.tableOrdinanzeTipi) Is Nothing) Then
            Me.tableOrdinanzeTipi.InitVars
        End If
        Me.tableOrdinanze = CType(Me.Tables("Ordinanze"),OrdinanzeDataTable)
        If (Not (Me.tableOrdinanze) Is Nothing) Then
            Me.tableOrdinanze.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsOrdinanze"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsOrdinanze.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableOrdinanzeTipi = New OrdinanzeTipiDataTable
        Me.Tables.Add(Me.tableOrdinanzeTipi)
        Me.tableOrdinanze = New OrdinanzeDataTable
        Me.Tables.Add(Me.tableOrdinanze)
    End Sub
    
    Private Function ShouldSerializeOrdinanzeTipi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOrdinanze() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub OrdinanzeTipiRowChangeEventHandler(ByVal sender As Object, ByVal e As OrdinanzeTipiRowChangeEvent)
    
    Public Delegate Sub OrdinanzeRowChangeEventHandler(ByVal sender As Object, ByVal e As OrdinanzeRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrdinanzeTipiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnTipo As DataColumn
        
        Friend Sub New()
            MyBase.New("OrdinanzeTipi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OrdinanzeTipiRow
            Get
                Return CType(Me.Rows(index),OrdinanzeTipiRow)
            End Get
        End Property
        
        Public Event OrdinanzeTipiRowChanged As OrdinanzeTipiRowChangeEventHandler
        
        Public Event OrdinanzeTipiRowChanging As OrdinanzeTipiRowChangeEventHandler
        
        Public Event OrdinanzeTipiRowDeleted As OrdinanzeTipiRowChangeEventHandler
        
        Public Event OrdinanzeTipiRowDeleting As OrdinanzeTipiRowChangeEventHandler
        
        Public Overloads Sub AddOrdinanzeTipiRow(ByVal row As OrdinanzeTipiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOrdinanzeTipiRow(ByVal Tipo As String) As OrdinanzeTipiRow
            Dim rowOrdinanzeTipiRow As OrdinanzeTipiRow = CType(Me.NewRow,OrdinanzeTipiRow)
            rowOrdinanzeTipiRow.ItemArray = New Object() {Nothing, Tipo}
            Me.Rows.Add(rowOrdinanzeTipiRow)
            Return rowOrdinanzeTipiRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As OrdinanzeTipiRow
            Return CType(Me.Rows.Find(New Object() {Id}),OrdinanzeTipiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OrdinanzeTipiDataTable = CType(MyBase.Clone,OrdinanzeTipiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OrdinanzeTipiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnTipo = Me.Columns("Tipo")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewOrdinanzeTipiRow() As OrdinanzeTipiRow
            Return CType(Me.NewRow,OrdinanzeTipiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OrdinanzeTipiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OrdinanzeTipiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrdinanzeTipiRowChangedEvent) Is Nothing) Then
                RaiseEvent OrdinanzeTipiRowChanged(Me, New OrdinanzeTipiRowChangeEvent(CType(e.Row,OrdinanzeTipiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrdinanzeTipiRowChangingEvent) Is Nothing) Then
                RaiseEvent OrdinanzeTipiRowChanging(Me, New OrdinanzeTipiRowChangeEvent(CType(e.Row,OrdinanzeTipiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrdinanzeTipiRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrdinanzeTipiRowDeleted(Me, New OrdinanzeTipiRowChangeEvent(CType(e.Row,OrdinanzeTipiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrdinanzeTipiRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrdinanzeTipiRowDeleting(Me, New OrdinanzeTipiRowChangeEvent(CType(e.Row,OrdinanzeTipiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOrdinanzeTipiRow(ByVal row As OrdinanzeTipiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrdinanzeTipiRow
        Inherits DataRow
        
        Private tableOrdinanzeTipi As OrdinanzeTipiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrdinanzeTipi = CType(Me.Table,OrdinanzeTipiDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableOrdinanzeTipi.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableOrdinanzeTipi.IdColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanzeTipi.TipoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanzeTipi.TipoColumn) = value
            End Set
        End Property
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanzeTipi.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tableOrdinanzeTipi.TipoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrdinanzeTipiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OrdinanzeTipiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OrdinanzeTipiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OrdinanzeTipiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrdinanzeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdVia As DataColumn
        
        Private columnCodice As DataColumn
        
        Private columnNome As DataColumn
        
        Private columnId As DataColumn
        
        Private columnTitolo As DataColumn
        
        Private columnTesto As DataColumn
        
        Private columnFile As DataColumn
        
        Private columnExt As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columndal As DataColumn
        
        Private columnal As DataColumn
        
        Private columnIdParent As DataColumn
        
        Private columnOrdinanza As DataColumn
        
        Private columnTipoOrdinanza As DataColumn
        
        Friend Sub New()
            MyBase.New("Ordinanze")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdViaColumn As DataColumn
            Get
                Return Me.columnIdVia
            End Get
        End Property
        
        Friend ReadOnly Property CodiceColumn As DataColumn
            Get
                Return Me.columnCodice
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property TitoloColumn As DataColumn
            Get
                Return Me.columnTitolo
            End Get
        End Property
        
        Friend ReadOnly Property TestoColumn As DataColumn
            Get
                Return Me.columnTesto
            End Get
        End Property
        
        Friend ReadOnly Property FileColumn As DataColumn
            Get
                Return Me.columnFile
            End Get
        End Property
        
        Friend ReadOnly Property ExtColumn As DataColumn
            Get
                Return Me.columnExt
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property dalColumn As DataColumn
            Get
                Return Me.columndal
            End Get
        End Property
        
        Friend ReadOnly Property alColumn As DataColumn
            Get
                Return Me.columnal
            End Get
        End Property
        
        Friend ReadOnly Property IdParentColumn As DataColumn
            Get
                Return Me.columnIdParent
            End Get
        End Property
        
        Friend ReadOnly Property OrdinanzaColumn As DataColumn
            Get
                Return Me.columnOrdinanza
            End Get
        End Property
        
        Friend ReadOnly Property TipoOrdinanzaColumn As DataColumn
            Get
                Return Me.columnTipoOrdinanza
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OrdinanzeRow
            Get
                Return CType(Me.Rows(index),OrdinanzeRow)
            End Get
        End Property
        
        Public Event OrdinanzeRowChanged As OrdinanzeRowChangeEventHandler
        
        Public Event OrdinanzeRowChanging As OrdinanzeRowChangeEventHandler
        
        Public Event OrdinanzeRowDeleted As OrdinanzeRowChangeEventHandler
        
        Public Event OrdinanzeRowDeleting As OrdinanzeRowChangeEventHandler
        
        Public Overloads Sub AddOrdinanzeRow(ByVal row As OrdinanzeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOrdinanzeRow(ByVal IdVia As Integer, ByVal Codice As Integer, ByVal Nome As String, ByVal Id As Integer, ByVal Titolo As String, ByVal Testo As String, ByVal File As System.Guid, ByVal Ext As String, ByVal Tipo As Short, ByVal dal As Date, ByVal al As Date, ByVal IdParent As Integer, ByVal Ordinanza As String, ByVal TipoOrdinanza As String) As OrdinanzeRow
            Dim rowOrdinanzeRow As OrdinanzeRow = CType(Me.NewRow,OrdinanzeRow)
            rowOrdinanzeRow.ItemArray = New Object() {IdVia, Codice, Nome, Id, Titolo, Testo, File, Ext, Tipo, dal, al, IdParent, Ordinanza, TipoOrdinanza}
            Me.Rows.Add(rowOrdinanzeRow)
            Return rowOrdinanzeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OrdinanzeDataTable = CType(MyBase.Clone,OrdinanzeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OrdinanzeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdVia = Me.Columns("IdVia")
            Me.columnCodice = Me.Columns("Codice")
            Me.columnNome = Me.Columns("Nome")
            Me.columnId = Me.Columns("Id")
            Me.columnTitolo = Me.Columns("Titolo")
            Me.columnTesto = Me.Columns("Testo")
            Me.columnFile = Me.Columns("File")
            Me.columnExt = Me.Columns("Ext")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columndal = Me.Columns("dal")
            Me.columnal = Me.Columns("al")
            Me.columnIdParent = Me.Columns("IdParent")
            Me.columnOrdinanza = Me.Columns("Ordinanza")
            Me.columnTipoOrdinanza = Me.Columns("TipoOrdinanza")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdVia = New DataColumn("IdVia", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdVia)
            Me.columnCodice = New DataColumn("Codice", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodice)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnTitolo = New DataColumn("Titolo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitolo)
            Me.columnTesto = New DataColumn("Testo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTesto)
            Me.columnFile = New DataColumn("File", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFile)
            Me.columnExt = New DataColumn("Ext", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExt)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columndal = New DataColumn("dal", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndal)
            Me.columnal = New DataColumn("al", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnal)
            Me.columnIdParent = New DataColumn("IdParent", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdParent)
            Me.columnOrdinanza = New DataColumn("Ordinanza", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdinanza)
            Me.columnTipoOrdinanza = New DataColumn("TipoOrdinanza", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoOrdinanza)
        End Sub
        
        Public Function NewOrdinanzeRow() As OrdinanzeRow
            Return CType(Me.NewRow,OrdinanzeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OrdinanzeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OrdinanzeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrdinanzeRowChangedEvent) Is Nothing) Then
                RaiseEvent OrdinanzeRowChanged(Me, New OrdinanzeRowChangeEvent(CType(e.Row,OrdinanzeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrdinanzeRowChangingEvent) Is Nothing) Then
                RaiseEvent OrdinanzeRowChanging(Me, New OrdinanzeRowChangeEvent(CType(e.Row,OrdinanzeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrdinanzeRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrdinanzeRowDeleted(Me, New OrdinanzeRowChangeEvent(CType(e.Row,OrdinanzeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrdinanzeRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrdinanzeRowDeleting(Me, New OrdinanzeRowChangeEvent(CType(e.Row,OrdinanzeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOrdinanzeRow(ByVal row As OrdinanzeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrdinanzeRow
        Inherits DataRow
        
        Private tableOrdinanze As OrdinanzeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrdinanze = CType(Me.Table,OrdinanzeDataTable)
        End Sub
        
        Public Property IdVia As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanze.IdViaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanze.IdViaColumn) = value
            End Set
        End Property
        
        Public Property Codice As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanze.CodiceColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanze.CodiceColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanze.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanze.NomeColumn) = value
            End Set
        End Property
        
        Public Property Id As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanze.IdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanze.IdColumn) = value
            End Set
        End Property
        
        Public Property Titolo As String
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanze.TitoloColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanze.TitoloColumn) = value
            End Set
        End Property
        
        Public Property Testo As String
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanze.TestoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanze.TestoColumn) = value
            End Set
        End Property
        
        Public Property File As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanze.FileColumn),System.Guid)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanze.FileColumn) = value
            End Set
        End Property
        
        Public Property Ext As String
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanze.ExtColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanze.ExtColumn) = value
            End Set
        End Property
        
        Public Property Tipo As Short
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanze.TipoColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanze.TipoColumn) = value
            End Set
        End Property
        
        Public Property dal As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanze.dalColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanze.dalColumn) = value
            End Set
        End Property
        
        Public Property al As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanze.alColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanze.alColumn) = value
            End Set
        End Property
        
        Public Property IdParent As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanze.IdParentColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanze.IdParentColumn) = value
            End Set
        End Property
        
        Public Property Ordinanza As String
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanze.OrdinanzaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanze.OrdinanzaColumn) = value
            End Set
        End Property
        
        Public Property TipoOrdinanza As String
            Get
                Try 
                    Return CType(Me(Me.tableOrdinanze.TipoOrdinanzaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdinanze.TipoOrdinanzaColumn) = value
            End Set
        End Property
        
        Public Function IsIdViaNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanze.IdViaColumn)
        End Function
        
        Public Sub SetIdViaNull()
            Me(Me.tableOrdinanze.IdViaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodiceNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanze.CodiceColumn)
        End Function
        
        Public Sub SetCodiceNull()
            Me(Me.tableOrdinanze.CodiceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanze.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableOrdinanze.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanze.IdColumn)
        End Function
        
        Public Sub SetIdNull()
            Me(Me.tableOrdinanze.IdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTitoloNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanze.TitoloColumn)
        End Function
        
        Public Sub SetTitoloNull()
            Me(Me.tableOrdinanze.TitoloColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTestoNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanze.TestoColumn)
        End Function
        
        Public Sub SetTestoNull()
            Me(Me.tableOrdinanze.TestoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFileNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanze.FileColumn)
        End Function
        
        Public Sub SetFileNull()
            Me(Me.tableOrdinanze.FileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExtNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanze.ExtColumn)
        End Function
        
        Public Sub SetExtNull()
            Me(Me.tableOrdinanze.ExtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanze.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tableOrdinanze.TipoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdalNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanze.dalColumn)
        End Function
        
        Public Sub SetdalNull()
            Me(Me.tableOrdinanze.dalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsalNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanze.alColumn)
        End Function
        
        Public Sub SetalNull()
            Me(Me.tableOrdinanze.alColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdParentNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanze.IdParentColumn)
        End Function
        
        Public Sub SetIdParentNull()
            Me(Me.tableOrdinanze.IdParentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdinanzaNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanze.OrdinanzaColumn)
        End Function
        
        Public Sub SetOrdinanzaNull()
            Me(Me.tableOrdinanze.OrdinanzaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoOrdinanzaNull() As Boolean
            Return Me.IsNull(Me.tableOrdinanze.TipoOrdinanzaColumn)
        End Function
        
        Public Sub SetTipoOrdinanzaNull()
            Me(Me.tableOrdinanze.TipoOrdinanzaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrdinanzeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OrdinanzeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OrdinanzeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OrdinanzeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
