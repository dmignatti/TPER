'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsOrganicoAcc
    Inherits DataSet
    
    Private tableOrganicoAcc As OrganicoAccDataTable
    
    Private tableOrganicoNoteSt As OrganicoNoteStDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("OrganicoAcc")) Is Nothing) Then
                Me.Tables.Add(New OrganicoAccDataTable(ds.Tables("OrganicoAcc")))
            End If
            If (Not (ds.Tables("OrganicoNoteSt")) Is Nothing) Then
                Me.Tables.Add(New OrganicoNoteStDataTable(ds.Tables("OrganicoNoteSt")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OrganicoAcc As OrganicoAccDataTable
        Get
            Return Me.tableOrganicoAcc
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OrganicoNoteSt As OrganicoNoteStDataTable
        Get
            Return Me.tableOrganicoNoteSt
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsOrganicoAcc = CType(MyBase.Clone,DsOrganicoAcc)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("OrganicoAcc")) Is Nothing) Then
            Me.Tables.Add(New OrganicoAccDataTable(ds.Tables("OrganicoAcc")))
        End If
        If (Not (ds.Tables("OrganicoNoteSt")) Is Nothing) Then
            Me.Tables.Add(New OrganicoNoteStDataTable(ds.Tables("OrganicoNoteSt")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableOrganicoAcc = CType(Me.Tables("OrganicoAcc"),OrganicoAccDataTable)
        If (Not (Me.tableOrganicoAcc) Is Nothing) Then
            Me.tableOrganicoAcc.InitVars
        End If
        Me.tableOrganicoNoteSt = CType(Me.Tables("OrganicoNoteSt"),OrganicoNoteStDataTable)
        If (Not (Me.tableOrganicoNoteSt) Is Nothing) Then
            Me.tableOrganicoNoteSt.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsOrganicoAcc"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsOrganicoAcc.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableOrganicoAcc = New OrganicoAccDataTable
        Me.Tables.Add(Me.tableOrganicoAcc)
        Me.tableOrganicoNoteSt = New OrganicoNoteStDataTable
        Me.Tables.Add(Me.tableOrganicoNoteSt)
    End Sub
    
    Private Function ShouldSerializeOrganicoAcc() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOrganicoNoteSt() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub OrganicoAccRowChangeEventHandler(ByVal sender As Object, ByVal e As OrganicoAccRowChangeEvent)
    
    Public Delegate Sub OrganicoNoteStRowChangeEventHandler(ByVal sender As Object, ByVal e As OrganicoNoteStRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrganicoAccDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnData As DataColumn
        
        Private columnPartTEff As DataColumn
        
        Private columnEquivEff As DataColumn
        
        Private columnFullTAsp As DataColumn
        
        Private columnPartTAsp As DataColumn
        
        Private columnEquivAsp As DataColumn
        
        Private columnDataCreazione As DataColumn
        
        Private columnFullTEff As DataColumn
        
        Friend Sub New()
            MyBase.New("OrganicoAcc")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property PartTEffColumn As DataColumn
            Get
                Return Me.columnPartTEff
            End Get
        End Property
        
        Friend ReadOnly Property EquivEffColumn As DataColumn
            Get
                Return Me.columnEquivEff
            End Get
        End Property
        
        Friend ReadOnly Property FullTAspColumn As DataColumn
            Get
                Return Me.columnFullTAsp
            End Get
        End Property
        
        Friend ReadOnly Property PartTAspColumn As DataColumn
            Get
                Return Me.columnPartTAsp
            End Get
        End Property
        
        Friend ReadOnly Property EquivAspColumn As DataColumn
            Get
                Return Me.columnEquivAsp
            End Get
        End Property
        
        Friend ReadOnly Property DataCreazioneColumn As DataColumn
            Get
                Return Me.columnDataCreazione
            End Get
        End Property
        
        Friend ReadOnly Property FullTEffColumn As DataColumn
            Get
                Return Me.columnFullTEff
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OrganicoAccRow
            Get
                Return CType(Me.Rows(index),OrganicoAccRow)
            End Get
        End Property
        
        Public Event OrganicoAccRowChanged As OrganicoAccRowChangeEventHandler
        
        Public Event OrganicoAccRowChanging As OrganicoAccRowChangeEventHandler
        
        Public Event OrganicoAccRowDeleted As OrganicoAccRowChangeEventHandler
        
        Public Event OrganicoAccRowDeleting As OrganicoAccRowChangeEventHandler
        
        Public Overloads Sub AddOrganicoAccRow(ByVal row As OrganicoAccRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOrganicoAccRow(ByVal Id As System.Guid, ByVal Data As Date, ByVal PartTEff As Double, ByVal EquivEff As Double, ByVal FullTAsp As Double, ByVal PartTAsp As Double, ByVal EquivAsp As Double, ByVal DataCreazione As Date, ByVal FullTEff As Double) As OrganicoAccRow
            Dim rowOrganicoAccRow As OrganicoAccRow = CType(Me.NewRow,OrganicoAccRow)
            rowOrganicoAccRow.ItemArray = New Object() {Id, Data, PartTEff, EquivEff, FullTAsp, PartTAsp, EquivAsp, DataCreazione, FullTEff}
            Me.Rows.Add(rowOrganicoAccRow)
            Return rowOrganicoAccRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As OrganicoAccRow
            Return CType(Me.Rows.Find(New Object() {Id}),OrganicoAccRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OrganicoAccDataTable = CType(MyBase.Clone,OrganicoAccDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OrganicoAccDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnData = Me.Columns("Data")
            Me.columnPartTEff = Me.Columns("PartTEff")
            Me.columnEquivEff = Me.Columns("EquivEff")
            Me.columnFullTAsp = Me.Columns("FullTAsp")
            Me.columnPartTAsp = Me.Columns("PartTAsp")
            Me.columnEquivAsp = Me.Columns("EquivAsp")
            Me.columnDataCreazione = Me.Columns("DataCreazione")
            Me.columnFullTEff = Me.Columns("FullTEff")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnPartTEff = New DataColumn("PartTEff", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPartTEff)
            Me.columnEquivEff = New DataColumn("EquivEff", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEquivEff)
            Me.columnFullTAsp = New DataColumn("FullTAsp", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFullTAsp)
            Me.columnPartTAsp = New DataColumn("PartTAsp", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPartTAsp)
            Me.columnEquivAsp = New DataColumn("EquivAsp", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEquivAsp)
            Me.columnDataCreazione = New DataColumn("DataCreazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataCreazione)
            Me.columnFullTEff = New DataColumn("FullTEff", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFullTEff)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewOrganicoAccRow() As OrganicoAccRow
            Return CType(Me.NewRow,OrganicoAccRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OrganicoAccRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OrganicoAccRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrganicoAccRowChangedEvent) Is Nothing) Then
                RaiseEvent OrganicoAccRowChanged(Me, New OrganicoAccRowChangeEvent(CType(e.Row,OrganicoAccRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrganicoAccRowChangingEvent) Is Nothing) Then
                RaiseEvent OrganicoAccRowChanging(Me, New OrganicoAccRowChangeEvent(CType(e.Row,OrganicoAccRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrganicoAccRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrganicoAccRowDeleted(Me, New OrganicoAccRowChangeEvent(CType(e.Row,OrganicoAccRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrganicoAccRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrganicoAccRowDeleting(Me, New OrganicoAccRowChangeEvent(CType(e.Row,OrganicoAccRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOrganicoAccRow(ByVal row As OrganicoAccRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrganicoAccRow
        Inherits DataRow
        
        Private tableOrganicoAcc As OrganicoAccDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrganicoAcc = CType(Me.Table,OrganicoAccDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableOrganicoAcc.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableOrganicoAcc.IdColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrganicoAcc.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrganicoAcc.DataColumn) = value
            End Set
        End Property
        
        Public Property PartTEff As Double
            Get
                Try 
                    Return CType(Me(Me.tableOrganicoAcc.PartTEffColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrganicoAcc.PartTEffColumn) = value
            End Set
        End Property
        
        Public Property EquivEff As Double
            Get
                Try 
                    Return CType(Me(Me.tableOrganicoAcc.EquivEffColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrganicoAcc.EquivEffColumn) = value
            End Set
        End Property
        
        Public Property FullTAsp As Double
            Get
                Try 
                    Return CType(Me(Me.tableOrganicoAcc.FullTAspColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrganicoAcc.FullTAspColumn) = value
            End Set
        End Property
        
        Public Property PartTAsp As Double
            Get
                Try 
                    Return CType(Me(Me.tableOrganicoAcc.PartTAspColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrganicoAcc.PartTAspColumn) = value
            End Set
        End Property
        
        Public Property EquivAsp As Double
            Get
                Try 
                    Return CType(Me(Me.tableOrganicoAcc.EquivAspColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrganicoAcc.EquivAspColumn) = value
            End Set
        End Property
        
        Public Property DataCreazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrganicoAcc.DataCreazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrganicoAcc.DataCreazioneColumn) = value
            End Set
        End Property
        
        Public Property FullTEff As Double
            Get
                Try 
                    Return CType(Me(Me.tableOrganicoAcc.FullTEffColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrganicoAcc.FullTEffColumn) = value
            End Set
        End Property
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableOrganicoAcc.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableOrganicoAcc.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPartTEffNull() As Boolean
            Return Me.IsNull(Me.tableOrganicoAcc.PartTEffColumn)
        End Function
        
        Public Sub SetPartTEffNull()
            Me(Me.tableOrganicoAcc.PartTEffColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEquivEffNull() As Boolean
            Return Me.IsNull(Me.tableOrganicoAcc.EquivEffColumn)
        End Function
        
        Public Sub SetEquivEffNull()
            Me(Me.tableOrganicoAcc.EquivEffColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFullTAspNull() As Boolean
            Return Me.IsNull(Me.tableOrganicoAcc.FullTAspColumn)
        End Function
        
        Public Sub SetFullTAspNull()
            Me(Me.tableOrganicoAcc.FullTAspColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPartTAspNull() As Boolean
            Return Me.IsNull(Me.tableOrganicoAcc.PartTAspColumn)
        End Function
        
        Public Sub SetPartTAspNull()
            Me(Me.tableOrganicoAcc.PartTAspColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEquivAspNull() As Boolean
            Return Me.IsNull(Me.tableOrganicoAcc.EquivAspColumn)
        End Function
        
        Public Sub SetEquivAspNull()
            Me(Me.tableOrganicoAcc.EquivAspColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataCreazioneNull() As Boolean
            Return Me.IsNull(Me.tableOrganicoAcc.DataCreazioneColumn)
        End Function
        
        Public Sub SetDataCreazioneNull()
            Me(Me.tableOrganicoAcc.DataCreazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFullTEffNull() As Boolean
            Return Me.IsNull(Me.tableOrganicoAcc.FullTEffColumn)
        End Function
        
        Public Sub SetFullTEffNull()
            Me(Me.tableOrganicoAcc.FullTEffColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrganicoAccRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OrganicoAccRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OrganicoAccRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OrganicoAccRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrganicoNoteStDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnData As DataColumn
        
        Private columnNota As DataColumn
        
        Private columnDataCreazione As DataColumn
        
        Friend Sub New()
            MyBase.New("OrganicoNoteSt")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property NotaColumn As DataColumn
            Get
                Return Me.columnNota
            End Get
        End Property
        
        Friend ReadOnly Property DataCreazioneColumn As DataColumn
            Get
                Return Me.columnDataCreazione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OrganicoNoteStRow
            Get
                Return CType(Me.Rows(index),OrganicoNoteStRow)
            End Get
        End Property
        
        Public Event OrganicoNoteStRowChanged As OrganicoNoteStRowChangeEventHandler
        
        Public Event OrganicoNoteStRowChanging As OrganicoNoteStRowChangeEventHandler
        
        Public Event OrganicoNoteStRowDeleted As OrganicoNoteStRowChangeEventHandler
        
        Public Event OrganicoNoteStRowDeleting As OrganicoNoteStRowChangeEventHandler
        
        Public Overloads Sub AddOrganicoNoteStRow(ByVal row As OrganicoNoteStRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOrganicoNoteStRow(ByVal Id As System.Guid, ByVal Data As Date, ByVal Nota As String, ByVal DataCreazione As Date) As OrganicoNoteStRow
            Dim rowOrganicoNoteStRow As OrganicoNoteStRow = CType(Me.NewRow,OrganicoNoteStRow)
            rowOrganicoNoteStRow.ItemArray = New Object() {Id, Data, Nota, DataCreazione}
            Me.Rows.Add(rowOrganicoNoteStRow)
            Return rowOrganicoNoteStRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As OrganicoNoteStRow
            Return CType(Me.Rows.Find(New Object() {Id}),OrganicoNoteStRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OrganicoNoteStDataTable = CType(MyBase.Clone,OrganicoNoteStDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OrganicoNoteStDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnData = Me.Columns("Data")
            Me.columnNota = Me.Columns("Nota")
            Me.columnDataCreazione = Me.Columns("DataCreazione")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnNota = New DataColumn("Nota", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNota)
            Me.columnDataCreazione = New DataColumn("DataCreazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataCreazione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewOrganicoNoteStRow() As OrganicoNoteStRow
            Return CType(Me.NewRow,OrganicoNoteStRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OrganicoNoteStRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OrganicoNoteStRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrganicoNoteStRowChangedEvent) Is Nothing) Then
                RaiseEvent OrganicoNoteStRowChanged(Me, New OrganicoNoteStRowChangeEvent(CType(e.Row,OrganicoNoteStRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrganicoNoteStRowChangingEvent) Is Nothing) Then
                RaiseEvent OrganicoNoteStRowChanging(Me, New OrganicoNoteStRowChangeEvent(CType(e.Row,OrganicoNoteStRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrganicoNoteStRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrganicoNoteStRowDeleted(Me, New OrganicoNoteStRowChangeEvent(CType(e.Row,OrganicoNoteStRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrganicoNoteStRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrganicoNoteStRowDeleting(Me, New OrganicoNoteStRowChangeEvent(CType(e.Row,OrganicoNoteStRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOrganicoNoteStRow(ByVal row As OrganicoNoteStRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrganicoNoteStRow
        Inherits DataRow
        
        Private tableOrganicoNoteSt As OrganicoNoteStDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrganicoNoteSt = CType(Me.Table,OrganicoNoteStDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableOrganicoNoteSt.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableOrganicoNoteSt.IdColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrganicoNoteSt.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrganicoNoteSt.DataColumn) = value
            End Set
        End Property
        
        Public Property Nota As String
            Get
                Try 
                    Return CType(Me(Me.tableOrganicoNoteSt.NotaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrganicoNoteSt.NotaColumn) = value
            End Set
        End Property
        
        Public Property DataCreazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrganicoNoteSt.DataCreazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrganicoNoteSt.DataCreazioneColumn) = value
            End Set
        End Property
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableOrganicoNoteSt.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableOrganicoNoteSt.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotaNull() As Boolean
            Return Me.IsNull(Me.tableOrganicoNoteSt.NotaColumn)
        End Function
        
        Public Sub SetNotaNull()
            Me(Me.tableOrganicoNoteSt.NotaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataCreazioneNull() As Boolean
            Return Me.IsNull(Me.tableOrganicoNoteSt.DataCreazioneColumn)
        End Function
        
        Public Sub SetDataCreazioneNull()
            Me(Me.tableOrganicoNoteSt.DataCreazioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrganicoNoteStRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OrganicoNoteStRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OrganicoNoteStRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OrganicoNoteStRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
