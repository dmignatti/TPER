'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsAutoPV
    Inherits DataSet
    
    Private tableCarSharing As CarSharingDataTable
    
    Private tableAutoparchimetri As AutoparchimetriDataTable
    
    Private tableAutoParchimetriNew As AutoParchimetriNewDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CarSharing")) Is Nothing) Then
                Me.Tables.Add(New CarSharingDataTable(ds.Tables("CarSharing")))
            End If
            If (Not (ds.Tables("Autoparchimetri")) Is Nothing) Then
                Me.Tables.Add(New AutoparchimetriDataTable(ds.Tables("Autoparchimetri")))
            End If
            If (Not (ds.Tables("AutoParchimetriNew")) Is Nothing) Then
                Me.Tables.Add(New AutoParchimetriNewDataTable(ds.Tables("AutoParchimetriNew")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CarSharing As CarSharingDataTable
        Get
            Return Me.tableCarSharing
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Autoparchimetri As AutoparchimetriDataTable
        Get
            Return Me.tableAutoparchimetri
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AutoParchimetriNew As AutoParchimetriNewDataTable
        Get
            Return Me.tableAutoParchimetriNew
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsAutoPV = CType(MyBase.Clone,DsAutoPV)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("CarSharing")) Is Nothing) Then
            Me.Tables.Add(New CarSharingDataTable(ds.Tables("CarSharing")))
        End If
        If (Not (ds.Tables("Autoparchimetri")) Is Nothing) Then
            Me.Tables.Add(New AutoparchimetriDataTable(ds.Tables("Autoparchimetri")))
        End If
        If (Not (ds.Tables("AutoParchimetriNew")) Is Nothing) Then
            Me.Tables.Add(New AutoParchimetriNewDataTable(ds.Tables("AutoParchimetriNew")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCarSharing = CType(Me.Tables("CarSharing"),CarSharingDataTable)
        If (Not (Me.tableCarSharing) Is Nothing) Then
            Me.tableCarSharing.InitVars
        End If
        Me.tableAutoparchimetri = CType(Me.Tables("Autoparchimetri"),AutoparchimetriDataTable)
        If (Not (Me.tableAutoparchimetri) Is Nothing) Then
            Me.tableAutoparchimetri.InitVars
        End If
        Me.tableAutoParchimetriNew = CType(Me.Tables("AutoParchimetriNew"),AutoParchimetriNewDataTable)
        If (Not (Me.tableAutoParchimetriNew) Is Nothing) Then
            Me.tableAutoParchimetriNew.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsAutoPV"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsAutoPV.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCarSharing = New CarSharingDataTable
        Me.Tables.Add(Me.tableCarSharing)
        Me.tableAutoparchimetri = New AutoparchimetriDataTable
        Me.Tables.Add(Me.tableAutoparchimetri)
        Me.tableAutoParchimetriNew = New AutoParchimetriNewDataTable
        Me.Tables.Add(Me.tableAutoParchimetriNew)
    End Sub
    
    Private Function ShouldSerializeCarSharing() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAutoparchimetri() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAutoParchimetriNew() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CarSharingRowChangeEventHandler(ByVal sender As Object, ByVal e As CarSharingRowChangeEvent)
    
    Public Delegate Sub AutoparchimetriRowChangeEventHandler(ByVal sender As Object, ByVal e As AutoparchimetriRowChangeEvent)
    
    Public Delegate Sub AutoParchimetriNewRowChangeEventHandler(ByVal sender As Object, ByVal e As AutoParchimetriNewRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CarSharingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnData As DataColumn
        
        Private columnIncassi As DataColumn
        
        Private columnKmMese As DataColumn
        
        Private columnTempoUt As DataColumn
        
        Private columnN_Corse As DataColumn
        
        Private columnN_Auto As DataColumn
        
        Private columnN_Parcheggi As DataColumn
        
        Private columnN_Utenti As DataColumn
        
        Private columnDataCreazione As DataColumn
        
        Friend Sub New()
            MyBase.New("CarSharing")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property IncassiColumn As DataColumn
            Get
                Return Me.columnIncassi
            End Get
        End Property
        
        Friend ReadOnly Property KmMeseColumn As DataColumn
            Get
                Return Me.columnKmMese
            End Get
        End Property
        
        Friend ReadOnly Property TempoUtColumn As DataColumn
            Get
                Return Me.columnTempoUt
            End Get
        End Property
        
        Friend ReadOnly Property N_CorseColumn As DataColumn
            Get
                Return Me.columnN_Corse
            End Get
        End Property
        
        Friend ReadOnly Property N_AutoColumn As DataColumn
            Get
                Return Me.columnN_Auto
            End Get
        End Property
        
        Friend ReadOnly Property N_ParcheggiColumn As DataColumn
            Get
                Return Me.columnN_Parcheggi
            End Get
        End Property
        
        Friend ReadOnly Property N_UtentiColumn As DataColumn
            Get
                Return Me.columnN_Utenti
            End Get
        End Property
        
        Friend ReadOnly Property DataCreazioneColumn As DataColumn
            Get
                Return Me.columnDataCreazione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CarSharingRow
            Get
                Return CType(Me.Rows(index),CarSharingRow)
            End Get
        End Property
        
        Public Event CarSharingRowChanged As CarSharingRowChangeEventHandler
        
        Public Event CarSharingRowChanging As CarSharingRowChangeEventHandler
        
        Public Event CarSharingRowDeleted As CarSharingRowChangeEventHandler
        
        Public Event CarSharingRowDeleting As CarSharingRowChangeEventHandler
        
        Public Overloads Sub AddCarSharingRow(ByVal row As CarSharingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCarSharingRow(ByVal Id As System.Guid, ByVal Data As Date, ByVal Incassi As Double, ByVal KmMese As Integer, ByVal TempoUt As Integer, ByVal N_Corse As Integer, ByVal N_Auto As Integer, ByVal N_Parcheggi As Integer, ByVal N_Utenti As Integer, ByVal DataCreazione As Date) As CarSharingRow
            Dim rowCarSharingRow As CarSharingRow = CType(Me.NewRow,CarSharingRow)
            rowCarSharingRow.ItemArray = New Object() {Id, Data, Incassi, KmMese, TempoUt, N_Corse, N_Auto, N_Parcheggi, N_Utenti, DataCreazione}
            Me.Rows.Add(rowCarSharingRow)
            Return rowCarSharingRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As CarSharingRow
            Return CType(Me.Rows.Find(New Object() {Id}),CarSharingRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CarSharingDataTable = CType(MyBase.Clone,CarSharingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CarSharingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnData = Me.Columns("Data")
            Me.columnIncassi = Me.Columns("Incassi")
            Me.columnKmMese = Me.Columns("KmMese")
            Me.columnTempoUt = Me.Columns("TempoUt")
            Me.columnN_Corse = Me.Columns("N_Corse")
            Me.columnN_Auto = Me.Columns("N_Auto")
            Me.columnN_Parcheggi = Me.Columns("N_Parcheggi")
            Me.columnN_Utenti = Me.Columns("N_Utenti")
            Me.columnDataCreazione = Me.Columns("DataCreazione")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnIncassi = New DataColumn("Incassi", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIncassi)
            Me.columnKmMese = New DataColumn("KmMese", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKmMese)
            Me.columnTempoUt = New DataColumn("TempoUt", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTempoUt)
            Me.columnN_Corse = New DataColumn("N_Corse", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_Corse)
            Me.columnN_Auto = New DataColumn("N_Auto", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_Auto)
            Me.columnN_Parcheggi = New DataColumn("N_Parcheggi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_Parcheggi)
            Me.columnN_Utenti = New DataColumn("N_Utenti", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_Utenti)
            Me.columnDataCreazione = New DataColumn("DataCreazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataCreazione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewCarSharingRow() As CarSharingRow
            Return CType(Me.NewRow,CarSharingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CarSharingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CarSharingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CarSharingRowChangedEvent) Is Nothing) Then
                RaiseEvent CarSharingRowChanged(Me, New CarSharingRowChangeEvent(CType(e.Row,CarSharingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CarSharingRowChangingEvent) Is Nothing) Then
                RaiseEvent CarSharingRowChanging(Me, New CarSharingRowChangeEvent(CType(e.Row,CarSharingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CarSharingRowDeletedEvent) Is Nothing) Then
                RaiseEvent CarSharingRowDeleted(Me, New CarSharingRowChangeEvent(CType(e.Row,CarSharingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CarSharingRowDeletingEvent) Is Nothing) Then
                RaiseEvent CarSharingRowDeleting(Me, New CarSharingRowChangeEvent(CType(e.Row,CarSharingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCarSharingRow(ByVal row As CarSharingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CarSharingRow
        Inherits DataRow
        
        Private tableCarSharing As CarSharingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCarSharing = CType(Me.Table,CarSharingDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableCarSharing.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableCarSharing.IdColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.DataColumn) = value
            End Set
        End Property
        
        Public Property Incassi As Double
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.IncassiColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.IncassiColumn) = value
            End Set
        End Property
        
        Public Property KmMese As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.KmMeseColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.KmMeseColumn) = value
            End Set
        End Property
        
        Public Property TempoUt As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.TempoUtColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.TempoUtColumn) = value
            End Set
        End Property
        
        Public Property N_Corse As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.N_CorseColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.N_CorseColumn) = value
            End Set
        End Property
        
        Public Property N_Auto As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.N_AutoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.N_AutoColumn) = value
            End Set
        End Property
        
        Public Property N_Parcheggi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.N_ParcheggiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.N_ParcheggiColumn) = value
            End Set
        End Property
        
        Public Property N_Utenti As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.N_UtentiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.N_UtentiColumn) = value
            End Set
        End Property
        
        Public Property DataCreazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.DataCreazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.DataCreazioneColumn) = value
            End Set
        End Property
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableCarSharing.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIncassiNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.IncassiColumn)
        End Function
        
        Public Sub SetIncassiNull()
            Me(Me.tableCarSharing.IncassiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKmMeseNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.KmMeseColumn)
        End Function
        
        Public Sub SetKmMeseNull()
            Me(Me.tableCarSharing.KmMeseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTempoUtNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.TempoUtColumn)
        End Function
        
        Public Sub SetTempoUtNull()
            Me(Me.tableCarSharing.TempoUtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_CorseNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.N_CorseColumn)
        End Function
        
        Public Sub SetN_CorseNull()
            Me(Me.tableCarSharing.N_CorseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_AutoNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.N_AutoColumn)
        End Function
        
        Public Sub SetN_AutoNull()
            Me(Me.tableCarSharing.N_AutoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_ParcheggiNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.N_ParcheggiColumn)
        End Function
        
        Public Sub SetN_ParcheggiNull()
            Me(Me.tableCarSharing.N_ParcheggiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_UtentiNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.N_UtentiColumn)
        End Function
        
        Public Sub SetN_UtentiNull()
            Me(Me.tableCarSharing.N_UtentiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataCreazioneNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.DataCreazioneColumn)
        End Function
        
        Public Sub SetDataCreazioneNull()
            Me(Me.tableCarSharing.DataCreazioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CarSharingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CarSharingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CarSharingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CarSharingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoparchimetriDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnData As DataColumn
        
        Private columnAcquistiATC As DataColumn
        
        Private columnAcquistiDSI As DataColumn
        
        Private columnVenditeSTD As DataColumn
        
        Private columnVenditeDSI As DataColumn
        
        Private columnResiSTD As DataColumn
        
        Private columnResiDSI As DataColumn
        
        Private columnDataCreazione As DataColumn
        
        Friend Sub New()
            MyBase.New("Autoparchimetri")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property AcquistiATCColumn As DataColumn
            Get
                Return Me.columnAcquistiATC
            End Get
        End Property
        
        Friend ReadOnly Property AcquistiDSIColumn As DataColumn
            Get
                Return Me.columnAcquistiDSI
            End Get
        End Property
        
        Friend ReadOnly Property VenditeSTDColumn As DataColumn
            Get
                Return Me.columnVenditeSTD
            End Get
        End Property
        
        Friend ReadOnly Property VenditeDSIColumn As DataColumn
            Get
                Return Me.columnVenditeDSI
            End Get
        End Property
        
        Friend ReadOnly Property ResiSTDColumn As DataColumn
            Get
                Return Me.columnResiSTD
            End Get
        End Property
        
        Friend ReadOnly Property ResiDSIColumn As DataColumn
            Get
                Return Me.columnResiDSI
            End Get
        End Property
        
        Friend ReadOnly Property DataCreazioneColumn As DataColumn
            Get
                Return Me.columnDataCreazione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AutoparchimetriRow
            Get
                Return CType(Me.Rows(index),AutoparchimetriRow)
            End Get
        End Property
        
        Public Event AutoparchimetriRowChanged As AutoparchimetriRowChangeEventHandler
        
        Public Event AutoparchimetriRowChanging As AutoparchimetriRowChangeEventHandler
        
        Public Event AutoparchimetriRowDeleted As AutoparchimetriRowChangeEventHandler
        
        Public Event AutoparchimetriRowDeleting As AutoparchimetriRowChangeEventHandler
        
        Public Overloads Sub AddAutoparchimetriRow(ByVal row As AutoparchimetriRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAutoparchimetriRow(ByVal Id As System.Guid, ByVal Data As Date, ByVal AcquistiATC As Integer, ByVal AcquistiDSI As Integer, ByVal VenditeSTD As Integer, ByVal VenditeDSI As Integer, ByVal ResiSTD As Integer, ByVal ResiDSI As Integer, ByVal DataCreazione As Date) As AutoparchimetriRow
            Dim rowAutoparchimetriRow As AutoparchimetriRow = CType(Me.NewRow,AutoparchimetriRow)
            rowAutoparchimetriRow.ItemArray = New Object() {Id, Data, AcquistiATC, AcquistiDSI, VenditeSTD, VenditeDSI, ResiSTD, ResiDSI, DataCreazione}
            Me.Rows.Add(rowAutoparchimetriRow)
            Return rowAutoparchimetriRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As AutoparchimetriRow
            Return CType(Me.Rows.Find(New Object() {Id}),AutoparchimetriRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AutoparchimetriDataTable = CType(MyBase.Clone,AutoparchimetriDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AutoparchimetriDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnData = Me.Columns("Data")
            Me.columnAcquistiATC = Me.Columns("AcquistiATC")
            Me.columnAcquistiDSI = Me.Columns("AcquistiDSI")
            Me.columnVenditeSTD = Me.Columns("VenditeSTD")
            Me.columnVenditeDSI = Me.Columns("VenditeDSI")
            Me.columnResiSTD = Me.Columns("ResiSTD")
            Me.columnResiDSI = Me.Columns("ResiDSI")
            Me.columnDataCreazione = Me.Columns("DataCreazione")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnAcquistiATC = New DataColumn("AcquistiATC", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcquistiATC)
            Me.columnAcquistiDSI = New DataColumn("AcquistiDSI", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcquistiDSI)
            Me.columnVenditeSTD = New DataColumn("VenditeSTD", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVenditeSTD)
            Me.columnVenditeDSI = New DataColumn("VenditeDSI", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVenditeDSI)
            Me.columnResiSTD = New DataColumn("ResiSTD", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResiSTD)
            Me.columnResiDSI = New DataColumn("ResiDSI", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResiDSI)
            Me.columnDataCreazione = New DataColumn("DataCreazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataCreazione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewAutoparchimetriRow() As AutoparchimetriRow
            Return CType(Me.NewRow,AutoparchimetriRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AutoparchimetriRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AutoparchimetriRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AutoparchimetriRowChangedEvent) Is Nothing) Then
                RaiseEvent AutoparchimetriRowChanged(Me, New AutoparchimetriRowChangeEvent(CType(e.Row,AutoparchimetriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AutoparchimetriRowChangingEvent) Is Nothing) Then
                RaiseEvent AutoparchimetriRowChanging(Me, New AutoparchimetriRowChangeEvent(CType(e.Row,AutoparchimetriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AutoparchimetriRowDeletedEvent) Is Nothing) Then
                RaiseEvent AutoparchimetriRowDeleted(Me, New AutoparchimetriRowChangeEvent(CType(e.Row,AutoparchimetriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AutoparchimetriRowDeletingEvent) Is Nothing) Then
                RaiseEvent AutoparchimetriRowDeleting(Me, New AutoparchimetriRowChangeEvent(CType(e.Row,AutoparchimetriRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAutoparchimetriRow(ByVal row As AutoparchimetriRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoparchimetriRow
        Inherits DataRow
        
        Private tableAutoparchimetri As AutoparchimetriDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAutoparchimetri = CType(Me.Table,AutoparchimetriDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableAutoparchimetri.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableAutoparchimetri.IdColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableAutoparchimetri.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoparchimetri.DataColumn) = value
            End Set
        End Property
        
        Public Property AcquistiATC As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoparchimetri.AcquistiATCColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoparchimetri.AcquistiATCColumn) = value
            End Set
        End Property
        
        Public Property AcquistiDSI As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoparchimetri.AcquistiDSIColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoparchimetri.AcquistiDSIColumn) = value
            End Set
        End Property
        
        Public Property VenditeSTD As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoparchimetri.VenditeSTDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoparchimetri.VenditeSTDColumn) = value
            End Set
        End Property
        
        Public Property VenditeDSI As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoparchimetri.VenditeDSIColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoparchimetri.VenditeDSIColumn) = value
            End Set
        End Property
        
        Public Property ResiSTD As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoparchimetri.ResiSTDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoparchimetri.ResiSTDColumn) = value
            End Set
        End Property
        
        Public Property ResiDSI As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoparchimetri.ResiDSIColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoparchimetri.ResiDSIColumn) = value
            End Set
        End Property
        
        Public Property DataCreazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableAutoparchimetri.DataCreazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoparchimetri.DataCreazioneColumn) = value
            End Set
        End Property
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableAutoparchimetri.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableAutoparchimetri.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAcquistiATCNull() As Boolean
            Return Me.IsNull(Me.tableAutoparchimetri.AcquistiATCColumn)
        End Function
        
        Public Sub SetAcquistiATCNull()
            Me(Me.tableAutoparchimetri.AcquistiATCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAcquistiDSINull() As Boolean
            Return Me.IsNull(Me.tableAutoparchimetri.AcquistiDSIColumn)
        End Function
        
        Public Sub SetAcquistiDSINull()
            Me(Me.tableAutoparchimetri.AcquistiDSIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVenditeSTDNull() As Boolean
            Return Me.IsNull(Me.tableAutoparchimetri.VenditeSTDColumn)
        End Function
        
        Public Sub SetVenditeSTDNull()
            Me(Me.tableAutoparchimetri.VenditeSTDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVenditeDSINull() As Boolean
            Return Me.IsNull(Me.tableAutoparchimetri.VenditeDSIColumn)
        End Function
        
        Public Sub SetVenditeDSINull()
            Me(Me.tableAutoparchimetri.VenditeDSIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResiSTDNull() As Boolean
            Return Me.IsNull(Me.tableAutoparchimetri.ResiSTDColumn)
        End Function
        
        Public Sub SetResiSTDNull()
            Me(Me.tableAutoparchimetri.ResiSTDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResiDSINull() As Boolean
            Return Me.IsNull(Me.tableAutoparchimetri.ResiDSIColumn)
        End Function
        
        Public Sub SetResiDSINull()
            Me(Me.tableAutoparchimetri.ResiDSIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataCreazioneNull() As Boolean
            Return Me.IsNull(Me.tableAutoparchimetri.DataCreazioneColumn)
        End Function
        
        Public Sub SetDataCreazioneNull()
            Me(Me.tableAutoparchimetri.DataCreazioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoparchimetriRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AutoparchimetriRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AutoparchimetriRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AutoparchimetriRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetriNewDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid As DataColumn
        
        Private columnData As DataColumn
        
        Private columnAcquistiATC As DataColumn
        
        Private columnAcquistiDSI As DataColumn
        
        Private columnVenditeSTD As DataColumn
        
        Private columnVenditeDSI As DataColumn
        
        Private columnResiSTD As DataColumn
        
        Private columnResiDSI As DataColumn
        
        Private columnDataCreazione As DataColumn
        
        Friend Sub New()
            MyBase.New("AutoParchimetriNew")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property idColumn As DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property AcquistiATCColumn As DataColumn
            Get
                Return Me.columnAcquistiATC
            End Get
        End Property
        
        Friend ReadOnly Property AcquistiDSIColumn As DataColumn
            Get
                Return Me.columnAcquistiDSI
            End Get
        End Property
        
        Friend ReadOnly Property VenditeSTDColumn As DataColumn
            Get
                Return Me.columnVenditeSTD
            End Get
        End Property
        
        Friend ReadOnly Property VenditeDSIColumn As DataColumn
            Get
                Return Me.columnVenditeDSI
            End Get
        End Property
        
        Friend ReadOnly Property ResiSTDColumn As DataColumn
            Get
                Return Me.columnResiSTD
            End Get
        End Property
        
        Friend ReadOnly Property ResiDSIColumn As DataColumn
            Get
                Return Me.columnResiDSI
            End Get
        End Property
        
        Friend ReadOnly Property DataCreazioneColumn As DataColumn
            Get
                Return Me.columnDataCreazione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AutoParchimetriNewRow
            Get
                Return CType(Me.Rows(index),AutoParchimetriNewRow)
            End Get
        End Property
        
        Public Event AutoParchimetriNewRowChanged As AutoParchimetriNewRowChangeEventHandler
        
        Public Event AutoParchimetriNewRowChanging As AutoParchimetriNewRowChangeEventHandler
        
        Public Event AutoParchimetriNewRowDeleted As AutoParchimetriNewRowChangeEventHandler
        
        Public Event AutoParchimetriNewRowDeleting As AutoParchimetriNewRowChangeEventHandler
        
        Public Overloads Sub AddAutoParchimetriNewRow(ByVal row As AutoParchimetriNewRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAutoParchimetriNewRow(ByVal id As System.Guid, ByVal Data As Date, ByVal AcquistiATC As Integer, ByVal AcquistiDSI As Integer, ByVal VenditeSTD As Integer, ByVal VenditeDSI As Integer, ByVal ResiSTD As Integer, ByVal ResiDSI As Integer, ByVal DataCreazione As Date) As AutoParchimetriNewRow
            Dim rowAutoParchimetriNewRow As AutoParchimetriNewRow = CType(Me.NewRow,AutoParchimetriNewRow)
            rowAutoParchimetriNewRow.ItemArray = New Object() {id, Data, AcquistiATC, AcquistiDSI, VenditeSTD, VenditeDSI, ResiSTD, ResiDSI, DataCreazione}
            Me.Rows.Add(rowAutoParchimetriNewRow)
            Return rowAutoParchimetriNewRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AutoParchimetriNewDataTable = CType(MyBase.Clone,AutoParchimetriNewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AutoParchimetriNewDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid = Me.Columns("id")
            Me.columnData = Me.Columns("Data")
            Me.columnAcquistiATC = Me.Columns("AcquistiATC")
            Me.columnAcquistiDSI = Me.Columns("AcquistiDSI")
            Me.columnVenditeSTD = Me.Columns("VenditeSTD")
            Me.columnVenditeDSI = Me.Columns("VenditeDSI")
            Me.columnResiSTD = Me.Columns("ResiSTD")
            Me.columnResiDSI = Me.Columns("ResiDSI")
            Me.columnDataCreazione = Me.Columns("DataCreazione")
        End Sub
        
        Private Sub InitClass()
            Me.columnid = New DataColumn("id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnAcquistiATC = New DataColumn("AcquistiATC", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcquistiATC)
            Me.columnAcquistiDSI = New DataColumn("AcquistiDSI", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcquistiDSI)
            Me.columnVenditeSTD = New DataColumn("VenditeSTD", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVenditeSTD)
            Me.columnVenditeDSI = New DataColumn("VenditeDSI", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVenditeDSI)
            Me.columnResiSTD = New DataColumn("ResiSTD", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResiSTD)
            Me.columnResiDSI = New DataColumn("ResiDSI", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResiDSI)
            Me.columnDataCreazione = New DataColumn("DataCreazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataCreazione)
            Me.columnid.AllowDBNull = false
            Me.columnAcquistiATC.ReadOnly = true
            Me.columnAcquistiDSI.ReadOnly = true
            Me.columnVenditeSTD.ReadOnly = true
            Me.columnVenditeDSI.ReadOnly = true
            Me.columnResiSTD.ReadOnly = true
            Me.columnResiDSI.ReadOnly = true
        End Sub
        
        Public Function NewAutoParchimetriNewRow() As AutoParchimetriNewRow
            Return CType(Me.NewRow,AutoParchimetriNewRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AutoParchimetriNewRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AutoParchimetriNewRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AutoParchimetriNewRowChangedEvent) Is Nothing) Then
                RaiseEvent AutoParchimetriNewRowChanged(Me, New AutoParchimetriNewRowChangeEvent(CType(e.Row,AutoParchimetriNewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AutoParchimetriNewRowChangingEvent) Is Nothing) Then
                RaiseEvent AutoParchimetriNewRowChanging(Me, New AutoParchimetriNewRowChangeEvent(CType(e.Row,AutoParchimetriNewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AutoParchimetriNewRowDeletedEvent) Is Nothing) Then
                RaiseEvent AutoParchimetriNewRowDeleted(Me, New AutoParchimetriNewRowChangeEvent(CType(e.Row,AutoParchimetriNewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AutoParchimetriNewRowDeletingEvent) Is Nothing) Then
                RaiseEvent AutoParchimetriNewRowDeleting(Me, New AutoParchimetriNewRowChangeEvent(CType(e.Row,AutoParchimetriNewRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAutoParchimetriNewRow(ByVal row As AutoParchimetriNewRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetriNewRow
        Inherits DataRow
        
        Private tableAutoParchimetriNew As AutoParchimetriNewDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAutoParchimetriNew = CType(Me.Table,AutoParchimetriNewDataTable)
        End Sub
        
        Public Property id As System.Guid
            Get
                Return CType(Me(Me.tableAutoParchimetriNew.idColumn),System.Guid)
            End Get
            Set
                Me(Me.tableAutoParchimetriNew.idColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetriNew.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetriNew.DataColumn) = value
            End Set
        End Property
        
        Public Property AcquistiATC As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetriNew.AcquistiATCColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetriNew.AcquistiATCColumn) = value
            End Set
        End Property
        
        Public Property AcquistiDSI As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetriNew.AcquistiDSIColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetriNew.AcquistiDSIColumn) = value
            End Set
        End Property
        
        Public Property VenditeSTD As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetriNew.VenditeSTDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetriNew.VenditeSTDColumn) = value
            End Set
        End Property
        
        Public Property VenditeDSI As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetriNew.VenditeDSIColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetriNew.VenditeDSIColumn) = value
            End Set
        End Property
        
        Public Property ResiSTD As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetriNew.ResiSTDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetriNew.ResiSTDColumn) = value
            End Set
        End Property
        
        Public Property ResiDSI As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetriNew.ResiDSIColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetriNew.ResiDSIColumn) = value
            End Set
        End Property
        
        Public Property DataCreazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetriNew.DataCreazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetriNew.DataCreazioneColumn) = value
            End Set
        End Property
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetriNew.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableAutoParchimetriNew.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAcquistiATCNull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetriNew.AcquistiATCColumn)
        End Function
        
        Public Sub SetAcquistiATCNull()
            Me(Me.tableAutoParchimetriNew.AcquistiATCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAcquistiDSINull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetriNew.AcquistiDSIColumn)
        End Function
        
        Public Sub SetAcquistiDSINull()
            Me(Me.tableAutoParchimetriNew.AcquistiDSIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVenditeSTDNull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetriNew.VenditeSTDColumn)
        End Function
        
        Public Sub SetVenditeSTDNull()
            Me(Me.tableAutoParchimetriNew.VenditeSTDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVenditeDSINull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetriNew.VenditeDSIColumn)
        End Function
        
        Public Sub SetVenditeDSINull()
            Me(Me.tableAutoParchimetriNew.VenditeDSIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResiSTDNull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetriNew.ResiSTDColumn)
        End Function
        
        Public Sub SetResiSTDNull()
            Me(Me.tableAutoParchimetriNew.ResiSTDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResiDSINull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetriNew.ResiDSIColumn)
        End Function
        
        Public Sub SetResiDSINull()
            Me(Me.tableAutoParchimetriNew.ResiDSIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataCreazioneNull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetriNew.DataCreazioneColumn)
        End Function
        
        Public Sub SetDataCreazioneNull()
            Me(Me.tableAutoParchimetriNew.DataCreazioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetriNewRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AutoParchimetriNewRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AutoParchimetriNewRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AutoParchimetriNewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
