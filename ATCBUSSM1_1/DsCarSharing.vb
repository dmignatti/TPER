'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsCarSharing
    Inherits DataSet
    
    Private tableConsumi As ConsumiDataTable
    
    Private tableCS_Gruppi As CS_GruppiDataTable
    
    Private tableCarSharing As CarSharingDataTable
    
    Private tableCS As CSDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Consumi")) Is Nothing) Then
                Me.Tables.Add(New ConsumiDataTable(ds.Tables("Consumi")))
            End If
            If (Not (ds.Tables("CS_Gruppi")) Is Nothing) Then
                Me.Tables.Add(New CS_GruppiDataTable(ds.Tables("CS_Gruppi")))
            End If
            If (Not (ds.Tables("CarSharing")) Is Nothing) Then
                Me.Tables.Add(New CarSharingDataTable(ds.Tables("CarSharing")))
            End If
            If (Not (ds.Tables("CS")) Is Nothing) Then
                Me.Tables.Add(New CSDataTable(ds.Tables("CS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Consumi As ConsumiDataTable
        Get
            Return Me.tableConsumi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CS_Gruppi As CS_GruppiDataTable
        Get
            Return Me.tableCS_Gruppi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CarSharing As CarSharingDataTable
        Get
            Return Me.tableCarSharing
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CS As CSDataTable
        Get
            Return Me.tableCS
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsCarSharing = CType(MyBase.Clone,DsCarSharing)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Consumi")) Is Nothing) Then
            Me.Tables.Add(New ConsumiDataTable(ds.Tables("Consumi")))
        End If
        If (Not (ds.Tables("CS_Gruppi")) Is Nothing) Then
            Me.Tables.Add(New CS_GruppiDataTable(ds.Tables("CS_Gruppi")))
        End If
        If (Not (ds.Tables("CarSharing")) Is Nothing) Then
            Me.Tables.Add(New CarSharingDataTable(ds.Tables("CarSharing")))
        End If
        If (Not (ds.Tables("CS")) Is Nothing) Then
            Me.Tables.Add(New CSDataTable(ds.Tables("CS")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableConsumi = CType(Me.Tables("Consumi"),ConsumiDataTable)
        If (Not (Me.tableConsumi) Is Nothing) Then
            Me.tableConsumi.InitVars
        End If
        Me.tableCS_Gruppi = CType(Me.Tables("CS_Gruppi"),CS_GruppiDataTable)
        If (Not (Me.tableCS_Gruppi) Is Nothing) Then
            Me.tableCS_Gruppi.InitVars
        End If
        Me.tableCarSharing = CType(Me.Tables("CarSharing"),CarSharingDataTable)
        If (Not (Me.tableCarSharing) Is Nothing) Then
            Me.tableCarSharing.InitVars
        End If
        Me.tableCS = CType(Me.Tables("CS"),CSDataTable)
        If (Not (Me.tableCS) Is Nothing) Then
            Me.tableCS.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsCarSharing"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsCarSharing.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableConsumi = New ConsumiDataTable
        Me.Tables.Add(Me.tableConsumi)
        Me.tableCS_Gruppi = New CS_GruppiDataTable
        Me.Tables.Add(Me.tableCS_Gruppi)
        Me.tableCarSharing = New CarSharingDataTable
        Me.Tables.Add(Me.tableCarSharing)
        Me.tableCS = New CSDataTable
        Me.Tables.Add(Me.tableCS)
    End Sub
    
    Private Function ShouldSerializeConsumi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCS_Gruppi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCarSharing() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCS() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ConsumiRowChangeEventHandler(ByVal sender As Object, ByVal e As ConsumiRowChangeEvent)
    
    Public Delegate Sub CS_GruppiRowChangeEventHandler(ByVal sender As Object, ByVal e As CS_GruppiRowChangeEvent)
    
    Public Delegate Sub CarSharingRowChangeEventHandler(ByVal sender As Object, ByVal e As CarSharingRowChangeEvent)
    
    Public Delegate Sub CSRowChangeEventHandler(ByVal sender As Object, ByVal e As CSRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsumiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdCentroCCS As DataColumn
        
        Private columnIdGruppoCCS As DataColumn
        
        Private columnData As DataColumn
        
        Private columnValore As DataColumn
        
        Private columnDataCreazione As DataColumn
        
        Private columnCentroCS As DataColumn
        
        Private columnGruppoCS As DataColumn
        
        Private columnOrdineC As DataColumn
        
        Private columnOrdineG As DataColumn
        
        Friend Sub New()
            MyBase.New("Consumi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdCentroCCSColumn As DataColumn
            Get
                Return Me.columnIdCentroCCS
            End Get
        End Property
        
        Friend ReadOnly Property IdGruppoCCSColumn As DataColumn
            Get
                Return Me.columnIdGruppoCCS
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property ValoreColumn As DataColumn
            Get
                Return Me.columnValore
            End Get
        End Property
        
        Friend ReadOnly Property DataCreazioneColumn As DataColumn
            Get
                Return Me.columnDataCreazione
            End Get
        End Property
        
        Friend ReadOnly Property CentroCSColumn As DataColumn
            Get
                Return Me.columnCentroCS
            End Get
        End Property
        
        Friend ReadOnly Property GruppoCSColumn As DataColumn
            Get
                Return Me.columnGruppoCS
            End Get
        End Property
        
        Friend ReadOnly Property OrdineCColumn As DataColumn
            Get
                Return Me.columnOrdineC
            End Get
        End Property
        
        Friend ReadOnly Property OrdineGColumn As DataColumn
            Get
                Return Me.columnOrdineG
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ConsumiRow
            Get
                Return CType(Me.Rows(index),ConsumiRow)
            End Get
        End Property
        
        Public Event ConsumiRowChanged As ConsumiRowChangeEventHandler
        
        Public Event ConsumiRowChanging As ConsumiRowChangeEventHandler
        
        Public Event ConsumiRowDeleted As ConsumiRowChangeEventHandler
        
        Public Event ConsumiRowDeleting As ConsumiRowChangeEventHandler
        
        Public Overloads Sub AddConsumiRow(ByVal row As ConsumiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddConsumiRow(ByVal IdCentroCCS As Integer, ByVal IdGruppoCCS As Integer, ByVal Data As Date, ByVal Valore As Double, ByVal DataCreazione As Date, ByVal CentroCS As String, ByVal GruppoCS As String, ByVal OrdineC As Integer, ByVal OrdineG As Integer) As ConsumiRow
            Dim rowConsumiRow As ConsumiRow = CType(Me.NewRow,ConsumiRow)
            rowConsumiRow.ItemArray = New Object() {Nothing, IdCentroCCS, IdGruppoCCS, Data, Valore, DataCreazione, CentroCS, GruppoCS, OrdineC, OrdineG}
            Me.Rows.Add(rowConsumiRow)
            Return rowConsumiRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ConsumiDataTable = CType(MyBase.Clone,ConsumiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ConsumiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdCentroCCS = Me.Columns("IdCentroCCS")
            Me.columnIdGruppoCCS = Me.Columns("IdGruppoCCS")
            Me.columnData = Me.Columns("Data")
            Me.columnValore = Me.Columns("Valore")
            Me.columnDataCreazione = Me.Columns("DataCreazione")
            Me.columnCentroCS = Me.Columns("CentroCS")
            Me.columnGruppoCS = Me.Columns("GruppoCS")
            Me.columnOrdineC = Me.Columns("OrdineC")
            Me.columnOrdineG = Me.Columns("OrdineG")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdCentroCCS = New DataColumn("IdCentroCCS", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdCentroCCS)
            Me.columnIdGruppoCCS = New DataColumn("IdGruppoCCS", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdGruppoCCS)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnValore = New DataColumn("Valore", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValore)
            Me.columnDataCreazione = New DataColumn("DataCreazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataCreazione)
            Me.columnCentroCS = New DataColumn("CentroCS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCentroCS)
            Me.columnGruppoCS = New DataColumn("GruppoCS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGruppoCS)
            Me.columnOrdineC = New DataColumn("OrdineC", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdineC)
            Me.columnOrdineG = New DataColumn("OrdineG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdineG)
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
        End Sub
        
        Public Function NewConsumiRow() As ConsumiRow
            Return CType(Me.NewRow,ConsumiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ConsumiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ConsumiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ConsumiRowChangedEvent) Is Nothing) Then
                RaiseEvent ConsumiRowChanged(Me, New ConsumiRowChangeEvent(CType(e.Row,ConsumiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ConsumiRowChangingEvent) Is Nothing) Then
                RaiseEvent ConsumiRowChanging(Me, New ConsumiRowChangeEvent(CType(e.Row,ConsumiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ConsumiRowDeletedEvent) Is Nothing) Then
                RaiseEvent ConsumiRowDeleted(Me, New ConsumiRowChangeEvent(CType(e.Row,ConsumiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ConsumiRowDeletingEvent) Is Nothing) Then
                RaiseEvent ConsumiRowDeleting(Me, New ConsumiRowChangeEvent(CType(e.Row,ConsumiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveConsumiRow(ByVal row As ConsumiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsumiRow
        Inherits DataRow
        
        Private tableConsumi As ConsumiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableConsumi = CType(Me.Table,ConsumiDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableConsumi.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableConsumi.IdColumn) = value
            End Set
        End Property
        
        Public Property IdCentroCCS As Integer
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.IdCentroCCSColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.IdCentroCCSColumn) = value
            End Set
        End Property
        
        Public Property IdGruppoCCS As Integer
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.IdGruppoCCSColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.IdGruppoCCSColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.DataColumn) = value
            End Set
        End Property
        
        Public Property Valore As Double
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.ValoreColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.ValoreColumn) = value
            End Set
        End Property
        
        Public Property DataCreazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.DataCreazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.DataCreazioneColumn) = value
            End Set
        End Property
        
        Public Property CentroCS As String
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.CentroCSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.CentroCSColumn) = value
            End Set
        End Property
        
        Public Property GruppoCS As String
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.GruppoCSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.GruppoCSColumn) = value
            End Set
        End Property
        
        Public Property OrdineC As Integer
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.OrdineCColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.OrdineCColumn) = value
            End Set
        End Property
        
        Public Property OrdineG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.OrdineGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.OrdineGColumn) = value
            End Set
        End Property
        
        Public Function IsIdCentroCCSNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.IdCentroCCSColumn)
        End Function
        
        Public Sub SetIdCentroCCSNull()
            Me(Me.tableConsumi.IdCentroCCSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdGruppoCCSNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.IdGruppoCCSColumn)
        End Function
        
        Public Sub SetIdGruppoCCSNull()
            Me(Me.tableConsumi.IdGruppoCCSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableConsumi.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValoreNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.ValoreColumn)
        End Function
        
        Public Sub SetValoreNull()
            Me(Me.tableConsumi.ValoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataCreazioneNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.DataCreazioneColumn)
        End Function
        
        Public Sub SetDataCreazioneNull()
            Me(Me.tableConsumi.DataCreazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCentroCSNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.CentroCSColumn)
        End Function
        
        Public Sub SetCentroCSNull()
            Me(Me.tableConsumi.CentroCSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGruppoCSNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.GruppoCSColumn)
        End Function
        
        Public Sub SetGruppoCSNull()
            Me(Me.tableConsumi.GruppoCSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdineCNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.OrdineCColumn)
        End Function
        
        Public Sub SetOrdineCNull()
            Me(Me.tableConsumi.OrdineCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdineGNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.OrdineGColumn)
        End Function
        
        Public Sub SetOrdineGNull()
            Me(Me.tableConsumi.OrdineGColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsumiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ConsumiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ConsumiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ConsumiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CS_GruppiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdGruppoCS As DataColumn
        
        Private columnGruppoCS As DataColumn
        
        Private columnOrdineG As DataColumn
        
        Friend Sub New()
            MyBase.New("CS_Gruppi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdGruppoCSColumn As DataColumn
            Get
                Return Me.columnIdGruppoCS
            End Get
        End Property
        
        Friend ReadOnly Property GruppoCSColumn As DataColumn
            Get
                Return Me.columnGruppoCS
            End Get
        End Property
        
        Friend ReadOnly Property OrdineGColumn As DataColumn
            Get
                Return Me.columnOrdineG
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CS_GruppiRow
            Get
                Return CType(Me.Rows(index),CS_GruppiRow)
            End Get
        End Property
        
        Public Event CS_GruppiRowChanged As CS_GruppiRowChangeEventHandler
        
        Public Event CS_GruppiRowChanging As CS_GruppiRowChangeEventHandler
        
        Public Event CS_GruppiRowDeleted As CS_GruppiRowChangeEventHandler
        
        Public Event CS_GruppiRowDeleting As CS_GruppiRowChangeEventHandler
        
        Public Overloads Sub AddCS_GruppiRow(ByVal row As CS_GruppiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCS_GruppiRow(ByVal GruppoCS As String, ByVal OrdineG As Integer) As CS_GruppiRow
            Dim rowCS_GruppiRow As CS_GruppiRow = CType(Me.NewRow,CS_GruppiRow)
            rowCS_GruppiRow.ItemArray = New Object() {Nothing, GruppoCS, OrdineG}
            Me.Rows.Add(rowCS_GruppiRow)
            Return rowCS_GruppiRow
        End Function
        
        Public Function FindByIdGruppoCS(ByVal IdGruppoCS As Integer) As CS_GruppiRow
            Return CType(Me.Rows.Find(New Object() {IdGruppoCS}),CS_GruppiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CS_GruppiDataTable = CType(MyBase.Clone,CS_GruppiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CS_GruppiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdGruppoCS = Me.Columns("IdGruppoCS")
            Me.columnGruppoCS = Me.Columns("GruppoCS")
            Me.columnOrdineG = Me.Columns("OrdineG")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdGruppoCS = New DataColumn("IdGruppoCS", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdGruppoCS)
            Me.columnGruppoCS = New DataColumn("GruppoCS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGruppoCS)
            Me.columnOrdineG = New DataColumn("OrdineG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdineG)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdGruppoCS}, true))
            Me.columnIdGruppoCS.AutoIncrement = true
            Me.columnIdGruppoCS.AllowDBNull = false
            Me.columnIdGruppoCS.ReadOnly = true
            Me.columnIdGruppoCS.Unique = true
        End Sub
        
        Public Function NewCS_GruppiRow() As CS_GruppiRow
            Return CType(Me.NewRow,CS_GruppiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CS_GruppiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CS_GruppiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CS_GruppiRowChangedEvent) Is Nothing) Then
                RaiseEvent CS_GruppiRowChanged(Me, New CS_GruppiRowChangeEvent(CType(e.Row,CS_GruppiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CS_GruppiRowChangingEvent) Is Nothing) Then
                RaiseEvent CS_GruppiRowChanging(Me, New CS_GruppiRowChangeEvent(CType(e.Row,CS_GruppiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CS_GruppiRowDeletedEvent) Is Nothing) Then
                RaiseEvent CS_GruppiRowDeleted(Me, New CS_GruppiRowChangeEvent(CType(e.Row,CS_GruppiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CS_GruppiRowDeletingEvent) Is Nothing) Then
                RaiseEvent CS_GruppiRowDeleting(Me, New CS_GruppiRowChangeEvent(CType(e.Row,CS_GruppiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCS_GruppiRow(ByVal row As CS_GruppiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CS_GruppiRow
        Inherits DataRow
        
        Private tableCS_Gruppi As CS_GruppiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCS_Gruppi = CType(Me.Table,CS_GruppiDataTable)
        End Sub
        
        Public Property IdGruppoCS As Integer
            Get
                Return CType(Me(Me.tableCS_Gruppi.IdGruppoCSColumn),Integer)
            End Get
            Set
                Me(Me.tableCS_Gruppi.IdGruppoCSColumn) = value
            End Set
        End Property
        
        Public Property GruppoCS As String
            Get
                Try 
                    Return CType(Me(Me.tableCS_Gruppi.GruppoCSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS_Gruppi.GruppoCSColumn) = value
            End Set
        End Property
        
        Public Property OrdineG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCS_Gruppi.OrdineGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS_Gruppi.OrdineGColumn) = value
            End Set
        End Property
        
        Public Function IsGruppoCSNull() As Boolean
            Return Me.IsNull(Me.tableCS_Gruppi.GruppoCSColumn)
        End Function
        
        Public Sub SetGruppoCSNull()
            Me(Me.tableCS_Gruppi.GruppoCSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdineGNull() As Boolean
            Return Me.IsNull(Me.tableCS_Gruppi.OrdineGColumn)
        End Function
        
        Public Sub SetOrdineGNull()
            Me(Me.tableCS_Gruppi.OrdineGColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CS_GruppiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CS_GruppiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CS_GruppiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CS_GruppiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CarSharingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnData As DataColumn
        
        Private columnIncassi As DataColumn
        
        Private columnKmMese As DataColumn
        
        Private columnTempoUt As DataColumn
        
        Private columnN_Corse As DataColumn
        
        Private columnN_Auto As DataColumn
        
        Private columnN_Parcheggi As DataColumn
        
        Private columnN_Utenti As DataColumn
        
        Private columnDataCreazione As DataColumn
        
        Friend Sub New()
            MyBase.New("CarSharing")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property IncassiColumn As DataColumn
            Get
                Return Me.columnIncassi
            End Get
        End Property
        
        Friend ReadOnly Property KmMeseColumn As DataColumn
            Get
                Return Me.columnKmMese
            End Get
        End Property
        
        Friend ReadOnly Property TempoUtColumn As DataColumn
            Get
                Return Me.columnTempoUt
            End Get
        End Property
        
        Friend ReadOnly Property N_CorseColumn As DataColumn
            Get
                Return Me.columnN_Corse
            End Get
        End Property
        
        Friend ReadOnly Property N_AutoColumn As DataColumn
            Get
                Return Me.columnN_Auto
            End Get
        End Property
        
        Friend ReadOnly Property N_ParcheggiColumn As DataColumn
            Get
                Return Me.columnN_Parcheggi
            End Get
        End Property
        
        Friend ReadOnly Property N_UtentiColumn As DataColumn
            Get
                Return Me.columnN_Utenti
            End Get
        End Property
        
        Friend ReadOnly Property DataCreazioneColumn As DataColumn
            Get
                Return Me.columnDataCreazione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CarSharingRow
            Get
                Return CType(Me.Rows(index),CarSharingRow)
            End Get
        End Property
        
        Public Event CarSharingRowChanged As CarSharingRowChangeEventHandler
        
        Public Event CarSharingRowChanging As CarSharingRowChangeEventHandler
        
        Public Event CarSharingRowDeleted As CarSharingRowChangeEventHandler
        
        Public Event CarSharingRowDeleting As CarSharingRowChangeEventHandler
        
        Public Overloads Sub AddCarSharingRow(ByVal row As CarSharingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCarSharingRow(ByVal Id As System.Guid, ByVal Data As Date, ByVal Incassi As Double, ByVal KmMese As Integer, ByVal TempoUt As Integer, ByVal N_Corse As Integer, ByVal N_Auto As Integer, ByVal N_Parcheggi As Integer, ByVal N_Utenti As Integer, ByVal DataCreazione As Date) As CarSharingRow
            Dim rowCarSharingRow As CarSharingRow = CType(Me.NewRow,CarSharingRow)
            rowCarSharingRow.ItemArray = New Object() {Id, Data, Incassi, KmMese, TempoUt, N_Corse, N_Auto, N_Parcheggi, N_Utenti, DataCreazione}
            Me.Rows.Add(rowCarSharingRow)
            Return rowCarSharingRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As CarSharingRow
            Return CType(Me.Rows.Find(New Object() {Id}),CarSharingRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CarSharingDataTable = CType(MyBase.Clone,CarSharingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CarSharingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnData = Me.Columns("Data")
            Me.columnIncassi = Me.Columns("Incassi")
            Me.columnKmMese = Me.Columns("KmMese")
            Me.columnTempoUt = Me.Columns("TempoUt")
            Me.columnN_Corse = Me.Columns("N_Corse")
            Me.columnN_Auto = Me.Columns("N_Auto")
            Me.columnN_Parcheggi = Me.Columns("N_Parcheggi")
            Me.columnN_Utenti = Me.Columns("N_Utenti")
            Me.columnDataCreazione = Me.Columns("DataCreazione")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnIncassi = New DataColumn("Incassi", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIncassi)
            Me.columnKmMese = New DataColumn("KmMese", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKmMese)
            Me.columnTempoUt = New DataColumn("TempoUt", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTempoUt)
            Me.columnN_Corse = New DataColumn("N_Corse", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_Corse)
            Me.columnN_Auto = New DataColumn("N_Auto", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_Auto)
            Me.columnN_Parcheggi = New DataColumn("N_Parcheggi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_Parcheggi)
            Me.columnN_Utenti = New DataColumn("N_Utenti", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_Utenti)
            Me.columnDataCreazione = New DataColumn("DataCreazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataCreazione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewCarSharingRow() As CarSharingRow
            Return CType(Me.NewRow,CarSharingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CarSharingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CarSharingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CarSharingRowChangedEvent) Is Nothing) Then
                RaiseEvent CarSharingRowChanged(Me, New CarSharingRowChangeEvent(CType(e.Row,CarSharingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CarSharingRowChangingEvent) Is Nothing) Then
                RaiseEvent CarSharingRowChanging(Me, New CarSharingRowChangeEvent(CType(e.Row,CarSharingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CarSharingRowDeletedEvent) Is Nothing) Then
                RaiseEvent CarSharingRowDeleted(Me, New CarSharingRowChangeEvent(CType(e.Row,CarSharingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CarSharingRowDeletingEvent) Is Nothing) Then
                RaiseEvent CarSharingRowDeleting(Me, New CarSharingRowChangeEvent(CType(e.Row,CarSharingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCarSharingRow(ByVal row As CarSharingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CarSharingRow
        Inherits DataRow
        
        Private tableCarSharing As CarSharingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCarSharing = CType(Me.Table,CarSharingDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableCarSharing.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableCarSharing.IdColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.DataColumn) = value
            End Set
        End Property
        
        Public Property Incassi As Double
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.IncassiColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.IncassiColumn) = value
            End Set
        End Property
        
        Public Property KmMese As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.KmMeseColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.KmMeseColumn) = value
            End Set
        End Property
        
        Public Property TempoUt As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.TempoUtColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.TempoUtColumn) = value
            End Set
        End Property
        
        Public Property N_Corse As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.N_CorseColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.N_CorseColumn) = value
            End Set
        End Property
        
        Public Property N_Auto As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.N_AutoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.N_AutoColumn) = value
            End Set
        End Property
        
        Public Property N_Parcheggi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.N_ParcheggiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.N_ParcheggiColumn) = value
            End Set
        End Property
        
        Public Property N_Utenti As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.N_UtentiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.N_UtentiColumn) = value
            End Set
        End Property
        
        Public Property DataCreazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableCarSharing.DataCreazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCarSharing.DataCreazioneColumn) = value
            End Set
        End Property
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableCarSharing.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIncassiNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.IncassiColumn)
        End Function
        
        Public Sub SetIncassiNull()
            Me(Me.tableCarSharing.IncassiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKmMeseNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.KmMeseColumn)
        End Function
        
        Public Sub SetKmMeseNull()
            Me(Me.tableCarSharing.KmMeseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTempoUtNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.TempoUtColumn)
        End Function
        
        Public Sub SetTempoUtNull()
            Me(Me.tableCarSharing.TempoUtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_CorseNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.N_CorseColumn)
        End Function
        
        Public Sub SetN_CorseNull()
            Me(Me.tableCarSharing.N_CorseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_AutoNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.N_AutoColumn)
        End Function
        
        Public Sub SetN_AutoNull()
            Me(Me.tableCarSharing.N_AutoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_ParcheggiNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.N_ParcheggiColumn)
        End Function
        
        Public Sub SetN_ParcheggiNull()
            Me(Me.tableCarSharing.N_ParcheggiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_UtentiNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.N_UtentiColumn)
        End Function
        
        Public Sub SetN_UtentiNull()
            Me(Me.tableCarSharing.N_UtentiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataCreazioneNull() As Boolean
            Return Me.IsNull(Me.tableCarSharing.DataCreazioneColumn)
        End Function
        
        Public Sub SetDataCreazioneNull()
            Me(Me.tableCarSharing.DataCreazioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CarSharingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CarSharingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CarSharingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CarSharingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnData As DataColumn
        
        Private columnIncassi As DataColumn
        
        Private columnDataCreazione As DataColumn
        
        Private columnKmMese As DataColumn
        
        Private columnTempoUt As DataColumn
        
        Private columnN_Corse As DataColumn
        
        Private columnN_AutoCosta As DataColumn
        
        Private columnN_ParcheggiCosta As DataColumn
        
        Private columnN_Utenti_tessere As DataColumn
        
        Private columnN_Utenti As DataColumn
        
        Private columnN_Parcheggi As DataColumn
        
        Private columnN_Auto As DataColumn
        
        Friend Sub New()
            MyBase.New("CS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property IncassiColumn As DataColumn
            Get
                Return Me.columnIncassi
            End Get
        End Property
        
        Friend ReadOnly Property DataCreazioneColumn As DataColumn
            Get
                Return Me.columnDataCreazione
            End Get
        End Property
        
        Friend ReadOnly Property KmMeseColumn As DataColumn
            Get
                Return Me.columnKmMese
            End Get
        End Property
        
        Friend ReadOnly Property TempoUtColumn As DataColumn
            Get
                Return Me.columnTempoUt
            End Get
        End Property
        
        Friend ReadOnly Property N_CorseColumn As DataColumn
            Get
                Return Me.columnN_Corse
            End Get
        End Property
        
        Friend ReadOnly Property N_AutoCostaColumn As DataColumn
            Get
                Return Me.columnN_AutoCosta
            End Get
        End Property
        
        Friend ReadOnly Property N_ParcheggiCostaColumn As DataColumn
            Get
                Return Me.columnN_ParcheggiCosta
            End Get
        End Property
        
        Friend ReadOnly Property N_Utenti_tessereColumn As DataColumn
            Get
                Return Me.columnN_Utenti_tessere
            End Get
        End Property
        
        Friend ReadOnly Property N_UtentiColumn As DataColumn
            Get
                Return Me.columnN_Utenti
            End Get
        End Property
        
        Friend ReadOnly Property N_ParcheggiColumn As DataColumn
            Get
                Return Me.columnN_Parcheggi
            End Get
        End Property
        
        Friend ReadOnly Property N_AutoColumn As DataColumn
            Get
                Return Me.columnN_Auto
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CSRow
            Get
                Return CType(Me.Rows(index),CSRow)
            End Get
        End Property
        
        Public Event CSRowChanged As CSRowChangeEventHandler
        
        Public Event CSRowChanging As CSRowChangeEventHandler
        
        Public Event CSRowDeleted As CSRowChangeEventHandler
        
        Public Event CSRowDeleting As CSRowChangeEventHandler
        
        Public Overloads Sub AddCSRow(ByVal row As CSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCSRow(ByVal Id As System.Guid, ByVal Data As Date, ByVal Incassi As Double, ByVal DataCreazione As Date, ByVal KmMese As Double, ByVal TempoUt As Double, ByVal N_Corse As Integer, ByVal N_AutoCosta As Integer, ByVal N_ParcheggiCosta As Integer, ByVal N_Utenti_tessere As Integer, ByVal N_Utenti As Integer, ByVal N_Parcheggi As Integer, ByVal N_Auto As Integer) As CSRow
            Dim rowCSRow As CSRow = CType(Me.NewRow,CSRow)
            rowCSRow.ItemArray = New Object() {Id, Data, Incassi, DataCreazione, KmMese, TempoUt, N_Corse, N_AutoCosta, N_ParcheggiCosta, N_Utenti_tessere, N_Utenti, N_Parcheggi, N_Auto}
            Me.Rows.Add(rowCSRow)
            Return rowCSRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As CSRow
            Return CType(Me.Rows.Find(New Object() {Id}),CSRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CSDataTable = CType(MyBase.Clone,CSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnData = Me.Columns("Data")
            Me.columnIncassi = Me.Columns("Incassi")
            Me.columnDataCreazione = Me.Columns("DataCreazione")
            Me.columnKmMese = Me.Columns("KmMese")
            Me.columnTempoUt = Me.Columns("TempoUt")
            Me.columnN_Corse = Me.Columns("N_Corse")
            Me.columnN_AutoCosta = Me.Columns("N_AutoCosta")
            Me.columnN_ParcheggiCosta = Me.Columns("N_ParcheggiCosta")
            Me.columnN_Utenti_tessere = Me.Columns("N_Utenti_tessere")
            Me.columnN_Utenti = Me.Columns("N_Utenti")
            Me.columnN_Parcheggi = Me.Columns("N_Parcheggi")
            Me.columnN_Auto = Me.Columns("N_Auto")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnIncassi = New DataColumn("Incassi", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIncassi)
            Me.columnDataCreazione = New DataColumn("DataCreazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataCreazione)
            Me.columnKmMese = New DataColumn("KmMese", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKmMese)
            Me.columnTempoUt = New DataColumn("TempoUt", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTempoUt)
            Me.columnN_Corse = New DataColumn("N_Corse", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_Corse)
            Me.columnN_AutoCosta = New DataColumn("N_AutoCosta", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_AutoCosta)
            Me.columnN_ParcheggiCosta = New DataColumn("N_ParcheggiCosta", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_ParcheggiCosta)
            Me.columnN_Utenti_tessere = New DataColumn("N_Utenti_tessere", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_Utenti_tessere)
            Me.columnN_Utenti = New DataColumn("N_Utenti", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_Utenti)
            Me.columnN_Parcheggi = New DataColumn("N_Parcheggi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_Parcheggi)
            Me.columnN_Auto = New DataColumn("N_Auto", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_Auto)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewCSRow() As CSRow
            Return CType(Me.NewRow,CSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CSRowChangedEvent) Is Nothing) Then
                RaiseEvent CSRowChanged(Me, New CSRowChangeEvent(CType(e.Row,CSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CSRowChangingEvent) Is Nothing) Then
                RaiseEvent CSRowChanging(Me, New CSRowChangeEvent(CType(e.Row,CSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CSRowDeleted(Me, New CSRowChangeEvent(CType(e.Row,CSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CSRowDeleting(Me, New CSRowChangeEvent(CType(e.Row,CSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCSRow(ByVal row As CSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CSRow
        Inherits DataRow
        
        Private tableCS As CSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCS = CType(Me.Table,CSDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableCS.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableCS.IdColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableCS.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS.DataColumn) = value
            End Set
        End Property
        
        Public Property Incassi As Double
            Get
                Try 
                    Return CType(Me(Me.tableCS.IncassiColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS.IncassiColumn) = value
            End Set
        End Property
        
        Public Property DataCreazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableCS.DataCreazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS.DataCreazioneColumn) = value
            End Set
        End Property
        
        Public Property KmMese As Double
            Get
                Try 
                    Return CType(Me(Me.tableCS.KmMeseColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS.KmMeseColumn) = value
            End Set
        End Property
        
        Public Property TempoUt As Double
            Get
                Try 
                    Return CType(Me(Me.tableCS.TempoUtColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS.TempoUtColumn) = value
            End Set
        End Property
        
        Public Property N_Corse As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCS.N_CorseColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS.N_CorseColumn) = value
            End Set
        End Property
        
        Public Property N_AutoCosta As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCS.N_AutoCostaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS.N_AutoCostaColumn) = value
            End Set
        End Property
        
        Public Property N_ParcheggiCosta As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCS.N_ParcheggiCostaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS.N_ParcheggiCostaColumn) = value
            End Set
        End Property
        
        Public Property N_Utenti_tessere As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCS.N_Utenti_tessereColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS.N_Utenti_tessereColumn) = value
            End Set
        End Property
        
        Public Property N_Utenti As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCS.N_UtentiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS.N_UtentiColumn) = value
            End Set
        End Property
        
        Public Property N_Parcheggi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCS.N_ParcheggiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS.N_ParcheggiColumn) = value
            End Set
        End Property
        
        Public Property N_Auto As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCS.N_AutoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS.N_AutoColumn) = value
            End Set
        End Property
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableCS.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableCS.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIncassiNull() As Boolean
            Return Me.IsNull(Me.tableCS.IncassiColumn)
        End Function
        
        Public Sub SetIncassiNull()
            Me(Me.tableCS.IncassiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataCreazioneNull() As Boolean
            Return Me.IsNull(Me.tableCS.DataCreazioneColumn)
        End Function
        
        Public Sub SetDataCreazioneNull()
            Me(Me.tableCS.DataCreazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKmMeseNull() As Boolean
            Return Me.IsNull(Me.tableCS.KmMeseColumn)
        End Function
        
        Public Sub SetKmMeseNull()
            Me(Me.tableCS.KmMeseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTempoUtNull() As Boolean
            Return Me.IsNull(Me.tableCS.TempoUtColumn)
        End Function
        
        Public Sub SetTempoUtNull()
            Me(Me.tableCS.TempoUtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_CorseNull() As Boolean
            Return Me.IsNull(Me.tableCS.N_CorseColumn)
        End Function
        
        Public Sub SetN_CorseNull()
            Me(Me.tableCS.N_CorseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_AutoCostaNull() As Boolean
            Return Me.IsNull(Me.tableCS.N_AutoCostaColumn)
        End Function
        
        Public Sub SetN_AutoCostaNull()
            Me(Me.tableCS.N_AutoCostaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_ParcheggiCostaNull() As Boolean
            Return Me.IsNull(Me.tableCS.N_ParcheggiCostaColumn)
        End Function
        
        Public Sub SetN_ParcheggiCostaNull()
            Me(Me.tableCS.N_ParcheggiCostaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_Utenti_tessereNull() As Boolean
            Return Me.IsNull(Me.tableCS.N_Utenti_tessereColumn)
        End Function
        
        Public Sub SetN_Utenti_tessereNull()
            Me(Me.tableCS.N_Utenti_tessereColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_UtentiNull() As Boolean
            Return Me.IsNull(Me.tableCS.N_UtentiColumn)
        End Function
        
        Public Sub SetN_UtentiNull()
            Me(Me.tableCS.N_UtentiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_ParcheggiNull() As Boolean
            Return Me.IsNull(Me.tableCS.N_ParcheggiColumn)
        End Function
        
        Public Sub SetN_ParcheggiNull()
            Me(Me.tableCS.N_ParcheggiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_AutoNull() As Boolean
            Return Me.IsNull(Me.tableCS.N_AutoColumn)
        End Function
        
        Public Sub SetN_AutoNull()
            Me(Me.tableCS.N_AutoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
