'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsCambiTurnoMensile
    Inherits DataSet
    
    Private tableRichiesteCambiTurnoMensile As RichiesteCambiTurnoMensileDataTable
    
    Private tableAccertatori As AccertatoriDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("RichiesteCambiTurnoMensile")) Is Nothing) Then
                Me.Tables.Add(New RichiesteCambiTurnoMensileDataTable(ds.Tables("RichiesteCambiTurnoMensile")))
            End If
            If (Not (ds.Tables("Accertatori")) Is Nothing) Then
                Me.Tables.Add(New AccertatoriDataTable(ds.Tables("Accertatori")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RichiesteCambiTurnoMensile As RichiesteCambiTurnoMensileDataTable
        Get
            Return Me.tableRichiesteCambiTurnoMensile
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accertatori As AccertatoriDataTable
        Get
            Return Me.tableAccertatori
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsCambiTurnoMensile = CType(MyBase.Clone,dsCambiTurnoMensile)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("RichiesteCambiTurnoMensile")) Is Nothing) Then
            Me.Tables.Add(New RichiesteCambiTurnoMensileDataTable(ds.Tables("RichiesteCambiTurnoMensile")))
        End If
        If (Not (ds.Tables("Accertatori")) Is Nothing) Then
            Me.Tables.Add(New AccertatoriDataTable(ds.Tables("Accertatori")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableRichiesteCambiTurnoMensile = CType(Me.Tables("RichiesteCambiTurnoMensile"),RichiesteCambiTurnoMensileDataTable)
        If (Not (Me.tableRichiesteCambiTurnoMensile) Is Nothing) Then
            Me.tableRichiesteCambiTurnoMensile.InitVars
        End If
        Me.tableAccertatori = CType(Me.Tables("Accertatori"),AccertatoriDataTable)
        If (Not (Me.tableAccertatori) Is Nothing) Then
            Me.tableAccertatori.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsCambiTurnoMensile"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsCambiTurnoMensile.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableRichiesteCambiTurnoMensile = New RichiesteCambiTurnoMensileDataTable
        Me.Tables.Add(Me.tableRichiesteCambiTurnoMensile)
        Me.tableAccertatori = New AccertatoriDataTable
        Me.Tables.Add(Me.tableAccertatori)
    End Sub
    
    Private Function ShouldSerializeRichiesteCambiTurnoMensile() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccertatori() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub RichiesteCambiTurnoMensileRowChangeEventHandler(ByVal sender As Object, ByVal e As RichiesteCambiTurnoMensileRowChangeEvent)
    
    Public Delegate Sub AccertatoriRowChangeEventHandler(ByVal sender As Object, ByVal e As AccertatoriRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoMensileDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdRichiesta As DataColumn
        
        Private columnIdAccertatoreRichiedente As DataColumn
        
        Private columnTurnoRichiedente As DataColumn
        
        Private columnIdAccertatoreDestinatario As DataColumn
        
        Private columnTurnoDestinatario As DataColumn
        
        Private columnDestinatario As DataColumn
        
        Private columnMatricolaAccertatoreDestinatario As DataColumn
        
        Private columndata As DataColumn
        
        Private columnStatoRichiesta As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnID As DataColumn
        
        Private columnts As DataColumn
        
        Friend Sub New()
            MyBase.New("RichiesteCambiTurnoMensile")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdRichiestaColumn As DataColumn
            Get
                Return Me.columnIdRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreRichiedenteColumn As DataColumn
            Get
                Return Me.columnIdAccertatoreRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property TurnoRichiedenteColumn As DataColumn
            Get
                Return Me.columnTurnoRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreDestinatarioColumn As DataColumn
            Get
                Return Me.columnIdAccertatoreDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property TurnoDestinatarioColumn As DataColumn
            Get
                Return Me.columnTurnoDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property DestinatarioColumn As DataColumn
            Get
                Return Me.columnDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property MatricolaAccertatoreDestinatarioColumn As DataColumn
            Get
                Return Me.columnMatricolaAccertatoreDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property dataColumn As DataColumn
            Get
                Return Me.columndata
            End Get
        End Property
        
        Friend ReadOnly Property StatoRichiestaColumn As DataColumn
            Get
                Return Me.columnStatoRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property tsColumn As DataColumn
            Get
                Return Me.columnts
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RichiesteCambiTurnoMensileRow
            Get
                Return CType(Me.Rows(index),RichiesteCambiTurnoMensileRow)
            End Get
        End Property
        
        Public Event RichiesteCambiTurnoMensileRowChanged As RichiesteCambiTurnoMensileRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoMensileRowChanging As RichiesteCambiTurnoMensileRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoMensileRowDeleted As RichiesteCambiTurnoMensileRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoMensileRowDeleting As RichiesteCambiTurnoMensileRowChangeEventHandler
        
        Public Overloads Sub AddRichiesteCambiTurnoMensileRow(ByVal row As RichiesteCambiTurnoMensileRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRichiesteCambiTurnoMensileRow(ByVal IdRichiesta As System.Guid, ByVal IdAccertatoreRichiedente As Integer, ByVal TurnoRichiedente As Integer, ByVal IdAccertatoreDestinatario As Integer, ByVal TurnoDestinatario As Integer, ByVal Destinatario As String, ByVal MatricolaAccertatoreDestinatario As String, ByVal data As Date, ByVal StatoRichiesta As String, ByVal StatoApprovazione As String, ByVal ts As Date) As RichiesteCambiTurnoMensileRow
            Dim rowRichiesteCambiTurnoMensileRow As RichiesteCambiTurnoMensileRow = CType(Me.NewRow,RichiesteCambiTurnoMensileRow)
            rowRichiesteCambiTurnoMensileRow.ItemArray = New Object() {IdRichiesta, IdAccertatoreRichiedente, TurnoRichiedente, IdAccertatoreDestinatario, TurnoDestinatario, Destinatario, MatricolaAccertatoreDestinatario, data, StatoRichiesta, StatoApprovazione, Nothing, ts}
            Me.Rows.Add(rowRichiesteCambiTurnoMensileRow)
            Return rowRichiesteCambiTurnoMensileRow
        End Function
        
        Public Function FindByIdRichiesta(ByVal IdRichiesta As System.Guid) As RichiesteCambiTurnoMensileRow
            Return CType(Me.Rows.Find(New Object() {IdRichiesta}),RichiesteCambiTurnoMensileRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RichiesteCambiTurnoMensileDataTable = CType(MyBase.Clone,RichiesteCambiTurnoMensileDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RichiesteCambiTurnoMensileDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdRichiesta = Me.Columns("IdRichiesta")
            Me.columnIdAccertatoreRichiedente = Me.Columns("IdAccertatoreRichiedente")
            Me.columnTurnoRichiedente = Me.Columns("TurnoRichiedente")
            Me.columnIdAccertatoreDestinatario = Me.Columns("IdAccertatoreDestinatario")
            Me.columnTurnoDestinatario = Me.Columns("TurnoDestinatario")
            Me.columnDestinatario = Me.Columns("Destinatario")
            Me.columnMatricolaAccertatoreDestinatario = Me.Columns("MatricolaAccertatoreDestinatario")
            Me.columndata = Me.Columns("data")
            Me.columnStatoRichiesta = Me.Columns("StatoRichiesta")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnID = Me.Columns("ID")
            Me.columnts = Me.Columns("ts")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdRichiesta = New DataColumn("IdRichiesta", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdRichiesta)
            Me.columnIdAccertatoreRichiedente = New DataColumn("IdAccertatoreRichiedente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatoreRichiedente)
            Me.columnTurnoRichiedente = New DataColumn("TurnoRichiedente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnoRichiedente)
            Me.columnIdAccertatoreDestinatario = New DataColumn("IdAccertatoreDestinatario", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatoreDestinatario)
            Me.columnTurnoDestinatario = New DataColumn("TurnoDestinatario", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnoDestinatario)
            Me.columnDestinatario = New DataColumn("Destinatario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDestinatario)
            Me.columnMatricolaAccertatoreDestinatario = New DataColumn("MatricolaAccertatoreDestinatario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMatricolaAccertatoreDestinatario)
            Me.columndata = New DataColumn("data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndata)
            Me.columnStatoRichiesta = New DataColumn("StatoRichiesta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoRichiesta)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnts = New DataColumn("ts", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnts)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdRichiesta}, true))
            Me.columnIdRichiesta.AllowDBNull = false
            Me.columnIdRichiesta.Unique = true
            Me.columnDestinatario.ReadOnly = true
            Me.columnStatoRichiesta.ReadOnly = true
            Me.columnStatoApprovazione.ReadOnly = true
            Me.columnID.AutoIncrement = true
            Me.columnID.ReadOnly = true
        End Sub
        
        Public Function NewRichiesteCambiTurnoMensileRow() As RichiesteCambiTurnoMensileRow
            Return CType(Me.NewRow,RichiesteCambiTurnoMensileRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RichiesteCambiTurnoMensileRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RichiesteCambiTurnoMensileRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RichiesteCambiTurnoMensileRowChangedEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensileRowChanged(Me, New RichiesteCambiTurnoMensileRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensileRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RichiesteCambiTurnoMensileRowChangingEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensileRowChanging(Me, New RichiesteCambiTurnoMensileRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensileRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RichiesteCambiTurnoMensileRowDeletedEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensileRowDeleted(Me, New RichiesteCambiTurnoMensileRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensileRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RichiesteCambiTurnoMensileRowDeletingEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensileRowDeleting(Me, New RichiesteCambiTurnoMensileRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensileRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRichiesteCambiTurnoMensileRow(ByVal row As RichiesteCambiTurnoMensileRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoMensileRow
        Inherits DataRow
        
        Private tableRichiesteCambiTurnoMensile As RichiesteCambiTurnoMensileDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRichiesteCambiTurnoMensile = CType(Me.Table,RichiesteCambiTurnoMensileDataTable)
        End Sub
        
        Public Property IdRichiesta As System.Guid
            Get
                Return CType(Me(Me.tableRichiesteCambiTurnoMensile.IdRichiestaColumn),System.Guid)
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.IdRichiestaColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatoreRichiedente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreRichiedenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property TurnoRichiedente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.TurnoRichiedenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.TurnoRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatoreDestinatario As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreDestinatarioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property TurnoDestinatario As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.TurnoDestinatarioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.TurnoDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property Destinatario As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.DestinatarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.DestinatarioColumn) = value
            End Set
        End Property
        
        Public Property MatricolaAccertatoreDestinatario As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.MatricolaAccertatoreDestinatarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.MatricolaAccertatoreDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property data As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.dataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.dataColumn) = value
            End Set
        End Property
        
        Public Property StatoRichiesta As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.StatoRichiestaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.StatoRichiestaColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.StatoApprovazioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.IDColumn) = value
            End Set
        End Property
        
        Public Property ts As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.tsColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.tsColumn) = value
            End Set
        End Property
        
        Public Function IsIdAccertatoreRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreRichiedenteColumn)
        End Function
        
        Public Sub SetIdAccertatoreRichiedenteNull()
            Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.TurnoRichiedenteColumn)
        End Function
        
        Public Sub SetTurnoRichiedenteNull()
            Me(Me.tableRichiesteCambiTurnoMensile.TurnoRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdAccertatoreDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreDestinatarioColumn)
        End Function
        
        Public Sub SetIdAccertatoreDestinatarioNull()
            Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.TurnoDestinatarioColumn)
        End Function
        
        Public Sub SetTurnoDestinatarioNull()
            Me(Me.tableRichiesteCambiTurnoMensile.TurnoDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.DestinatarioColumn)
        End Function
        
        Public Sub SetDestinatarioNull()
            Me(Me.tableRichiesteCambiTurnoMensile.DestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMatricolaAccertatoreDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.MatricolaAccertatoreDestinatarioColumn)
        End Function
        
        Public Sub SetMatricolaAccertatoreDestinatarioNull()
            Me(Me.tableRichiesteCambiTurnoMensile.MatricolaAccertatoreDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdataNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.dataColumn)
        End Function
        
        Public Sub SetdataNull()
            Me(Me.tableRichiesteCambiTurnoMensile.dataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoRichiestaNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.StatoRichiestaColumn)
        End Function
        
        Public Sub SetStatoRichiestaNull()
            Me(Me.tableRichiesteCambiTurnoMensile.StatoRichiestaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableRichiesteCambiTurnoMensile.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableRichiesteCambiTurnoMensile.IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstsNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.tsColumn)
        End Function
        
        Public Sub SettsNull()
            Me(Me.tableRichiesteCambiTurnoMensile.tsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoMensileRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RichiesteCambiTurnoMensileRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RichiesteCambiTurnoMensileRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RichiesteCambiTurnoMensileRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccertatoriDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMatricola As DataColumn
        
        Private columnAccertatore As DataColumn
        
        Private columnData As DataColumn
        
        Private columnTurno As DataColumn
        
        Private columnCognomeNome As DataColumn
        
        Private columnID As DataColumn
        
        Friend Sub New()
            MyBase.New("Accertatori")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MatricolaColumn As DataColumn
            Get
                Return Me.columnMatricola
            End Get
        End Property
        
        Friend ReadOnly Property AccertatoreColumn As DataColumn
            Get
                Return Me.columnAccertatore
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property TurnoColumn As DataColumn
            Get
                Return Me.columnTurno
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeColumn As DataColumn
            Get
                Return Me.columnCognomeNome
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AccertatoriRow
            Get
                Return CType(Me.Rows(index),AccertatoriRow)
            End Get
        End Property
        
        Public Event AccertatoriRowChanged As AccertatoriRowChangeEventHandler
        
        Public Event AccertatoriRowChanging As AccertatoriRowChangeEventHandler
        
        Public Event AccertatoriRowDeleted As AccertatoriRowChangeEventHandler
        
        Public Event AccertatoriRowDeleting As AccertatoriRowChangeEventHandler
        
        Public Overloads Sub AddAccertatoriRow(ByVal row As AccertatoriRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatoriRow(ByVal Matricola As Decimal, ByVal Accertatore As String, ByVal Data As Date, ByVal Turno As Decimal, ByVal CognomeNome As String) As AccertatoriRow
            Dim rowAccertatoriRow As AccertatoriRow = CType(Me.NewRow,AccertatoriRow)
            rowAccertatoriRow.ItemArray = New Object() {Matricola, Accertatore, Data, Turno, CognomeNome, Nothing}
            Me.Rows.Add(rowAccertatoriRow)
            Return rowAccertatoriRow
        End Function
        
        Public Function FindByMatricola(ByVal Matricola As Decimal) As AccertatoriRow
            Return CType(Me.Rows.Find(New Object() {Matricola}),AccertatoriRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AccertatoriDataTable = CType(MyBase.Clone,AccertatoriDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AccertatoriDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMatricola = Me.Columns("Matricola")
            Me.columnAccertatore = Me.Columns("Accertatore")
            Me.columnData = Me.Columns("Data")
            Me.columnTurno = Me.Columns("Turno")
            Me.columnCognomeNome = Me.Columns("CognomeNome")
            Me.columnID = Me.Columns("ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnMatricola = New DataColumn("Matricola", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMatricola)
            Me.columnAccertatore = New DataColumn("Accertatore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccertatore)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnTurno = New DataColumn("Turno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurno)
            Me.columnCognomeNome = New DataColumn("CognomeNome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNome)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.Constraints.Add(New UniqueConstraint("dsCambiTurnoMensileKey1", New DataColumn() {Me.columnMatricola}, true))
            Me.columnMatricola.AllowDBNull = false
            Me.columnMatricola.Unique = true
            Me.columnAccertatore.ReadOnly = true
            Me.columnID.AutoIncrement = true
            Me.columnID.ReadOnly = true
        End Sub
        
        Public Function NewAccertatoriRow() As AccertatoriRow
            Return CType(Me.NewRow,AccertatoriRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AccertatoriRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AccertatoriRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AccertatoriRowChangedEvent) Is Nothing) Then
                RaiseEvent AccertatoriRowChanged(Me, New AccertatoriRowChangeEvent(CType(e.Row,AccertatoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AccertatoriRowChangingEvent) Is Nothing) Then
                RaiseEvent AccertatoriRowChanging(Me, New AccertatoriRowChangeEvent(CType(e.Row,AccertatoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AccertatoriRowDeletedEvent) Is Nothing) Then
                RaiseEvent AccertatoriRowDeleted(Me, New AccertatoriRowChangeEvent(CType(e.Row,AccertatoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AccertatoriRowDeletingEvent) Is Nothing) Then
                RaiseEvent AccertatoriRowDeleting(Me, New AccertatoriRowChangeEvent(CType(e.Row,AccertatoriRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatoriRow(ByVal row As AccertatoriRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccertatoriRow
        Inherits DataRow
        
        Private tableAccertatori As AccertatoriDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatori = CType(Me.Table,AccertatoriDataTable)
        End Sub
        
        Public Property Matricola As Decimal
            Get
                Return CType(Me(Me.tableAccertatori.MatricolaColumn),Decimal)
            End Get
            Set
                Me(Me.tableAccertatori.MatricolaColumn) = value
            End Set
        End Property
        
        Public Property Accertatore As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori.AccertatoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori.AccertatoreColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori.DataColumn) = value
            End Set
        End Property
        
        Public Property Turno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori.TurnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori.TurnoColumn) = value
            End Set
        End Property
        
        Public Property CognomeNome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori.CognomeNomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori.CognomeNomeColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori.IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori.IDColumn) = value
            End Set
        End Property
        
        Public Function IsAccertatoreNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori.AccertatoreColumn)
        End Function
        
        Public Sub SetAccertatoreNull()
            Me(Me.tableAccertatori.AccertatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableAccertatori.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori.TurnoColumn)
        End Function
        
        Public Sub SetTurnoNull()
            Me(Me.tableAccertatori.TurnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori.CognomeNomeColumn)
        End Function
        
        Public Sub SetCognomeNomeNull()
            Me(Me.tableAccertatori.CognomeNomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableAccertatori.IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccertatoriRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AccertatoriRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AccertatoriRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AccertatoriRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
