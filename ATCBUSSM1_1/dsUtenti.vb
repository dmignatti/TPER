'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2503
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsUtenti
    Inherits DataSet
    
    Private tableATC_TipoUtente As ATC_TipoUtenteDataTable
    
    Private tableGruppiDiAppartenenza As GruppiDiAppartenenzaDataTable
    
    Private tableATC_Gruppi As ATC_GruppiDataTable
    
    Private tableUtentiDelGruppo As UtentiDelGruppoDataTable
    
    Private tableGruppiDelModulo As GruppiDelModuloDataTable
    
    Private tableATC_ModuliPortale As ATC_ModuliPortaleDataTable
    
    Private tableATC_Utenti As ATC_UtentiDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ATC_TipoUtente")) Is Nothing) Then
                Me.Tables.Add(New ATC_TipoUtenteDataTable(ds.Tables("ATC_TipoUtente")))
            End If
            If (Not (ds.Tables("GruppiDiAppartenenza")) Is Nothing) Then
                Me.Tables.Add(New GruppiDiAppartenenzaDataTable(ds.Tables("GruppiDiAppartenenza")))
            End If
            If (Not (ds.Tables("ATC_Gruppi")) Is Nothing) Then
                Me.Tables.Add(New ATC_GruppiDataTable(ds.Tables("ATC_Gruppi")))
            End If
            If (Not (ds.Tables("UtentiDelGruppo")) Is Nothing) Then
                Me.Tables.Add(New UtentiDelGruppoDataTable(ds.Tables("UtentiDelGruppo")))
            End If
            If (Not (ds.Tables("GruppiDelModulo")) Is Nothing) Then
                Me.Tables.Add(New GruppiDelModuloDataTable(ds.Tables("GruppiDelModulo")))
            End If
            If (Not (ds.Tables("ATC_ModuliPortale")) Is Nothing) Then
                Me.Tables.Add(New ATC_ModuliPortaleDataTable(ds.Tables("ATC_ModuliPortale")))
            End If
            If (Not (ds.Tables("ATC_Utenti")) Is Nothing) Then
                Me.Tables.Add(New ATC_UtentiDataTable(ds.Tables("ATC_Utenti")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ATC_TipoUtente As ATC_TipoUtenteDataTable
        Get
            Return Me.tableATC_TipoUtente
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GruppiDiAppartenenza As GruppiDiAppartenenzaDataTable
        Get
            Return Me.tableGruppiDiAppartenenza
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ATC_Gruppi As ATC_GruppiDataTable
        Get
            Return Me.tableATC_Gruppi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UtentiDelGruppo As UtentiDelGruppoDataTable
        Get
            Return Me.tableUtentiDelGruppo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GruppiDelModulo As GruppiDelModuloDataTable
        Get
            Return Me.tableGruppiDelModulo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ATC_ModuliPortale As ATC_ModuliPortaleDataTable
        Get
            Return Me.tableATC_ModuliPortale
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ATC_Utenti As ATC_UtentiDataTable
        Get
            Return Me.tableATC_Utenti
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsUtenti = CType(MyBase.Clone,dsUtenti)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ATC_TipoUtente")) Is Nothing) Then
            Me.Tables.Add(New ATC_TipoUtenteDataTable(ds.Tables("ATC_TipoUtente")))
        End If
        If (Not (ds.Tables("GruppiDiAppartenenza")) Is Nothing) Then
            Me.Tables.Add(New GruppiDiAppartenenzaDataTable(ds.Tables("GruppiDiAppartenenza")))
        End If
        If (Not (ds.Tables("ATC_Gruppi")) Is Nothing) Then
            Me.Tables.Add(New ATC_GruppiDataTable(ds.Tables("ATC_Gruppi")))
        End If
        If (Not (ds.Tables("UtentiDelGruppo")) Is Nothing) Then
            Me.Tables.Add(New UtentiDelGruppoDataTable(ds.Tables("UtentiDelGruppo")))
        End If
        If (Not (ds.Tables("GruppiDelModulo")) Is Nothing) Then
            Me.Tables.Add(New GruppiDelModuloDataTable(ds.Tables("GruppiDelModulo")))
        End If
        If (Not (ds.Tables("ATC_ModuliPortale")) Is Nothing) Then
            Me.Tables.Add(New ATC_ModuliPortaleDataTable(ds.Tables("ATC_ModuliPortale")))
        End If
        If (Not (ds.Tables("ATC_Utenti")) Is Nothing) Then
            Me.Tables.Add(New ATC_UtentiDataTable(ds.Tables("ATC_Utenti")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableATC_TipoUtente = CType(Me.Tables("ATC_TipoUtente"),ATC_TipoUtenteDataTable)
        If (Not (Me.tableATC_TipoUtente) Is Nothing) Then
            Me.tableATC_TipoUtente.InitVars
        End If
        Me.tableGruppiDiAppartenenza = CType(Me.Tables("GruppiDiAppartenenza"),GruppiDiAppartenenzaDataTable)
        If (Not (Me.tableGruppiDiAppartenenza) Is Nothing) Then
            Me.tableGruppiDiAppartenenza.InitVars
        End If
        Me.tableATC_Gruppi = CType(Me.Tables("ATC_Gruppi"),ATC_GruppiDataTable)
        If (Not (Me.tableATC_Gruppi) Is Nothing) Then
            Me.tableATC_Gruppi.InitVars
        End If
        Me.tableUtentiDelGruppo = CType(Me.Tables("UtentiDelGruppo"),UtentiDelGruppoDataTable)
        If (Not (Me.tableUtentiDelGruppo) Is Nothing) Then
            Me.tableUtentiDelGruppo.InitVars
        End If
        Me.tableGruppiDelModulo = CType(Me.Tables("GruppiDelModulo"),GruppiDelModuloDataTable)
        If (Not (Me.tableGruppiDelModulo) Is Nothing) Then
            Me.tableGruppiDelModulo.InitVars
        End If
        Me.tableATC_ModuliPortale = CType(Me.Tables("ATC_ModuliPortale"),ATC_ModuliPortaleDataTable)
        If (Not (Me.tableATC_ModuliPortale) Is Nothing) Then
            Me.tableATC_ModuliPortale.InitVars
        End If
        Me.tableATC_Utenti = CType(Me.Tables("ATC_Utenti"),ATC_UtentiDataTable)
        If (Not (Me.tableATC_Utenti) Is Nothing) Then
            Me.tableATC_Utenti.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsUtenti"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsUtenti.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableATC_TipoUtente = New ATC_TipoUtenteDataTable
        Me.Tables.Add(Me.tableATC_TipoUtente)
        Me.tableGruppiDiAppartenenza = New GruppiDiAppartenenzaDataTable
        Me.Tables.Add(Me.tableGruppiDiAppartenenza)
        Me.tableATC_Gruppi = New ATC_GruppiDataTable
        Me.Tables.Add(Me.tableATC_Gruppi)
        Me.tableUtentiDelGruppo = New UtentiDelGruppoDataTable
        Me.Tables.Add(Me.tableUtentiDelGruppo)
        Me.tableGruppiDelModulo = New GruppiDelModuloDataTable
        Me.Tables.Add(Me.tableGruppiDelModulo)
        Me.tableATC_ModuliPortale = New ATC_ModuliPortaleDataTable
        Me.Tables.Add(Me.tableATC_ModuliPortale)
        Me.tableATC_Utenti = New ATC_UtentiDataTable
        Me.Tables.Add(Me.tableATC_Utenti)
    End Sub
    
    Private Function ShouldSerializeATC_TipoUtente() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGruppiDiAppartenenza() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeATC_Gruppi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUtentiDelGruppo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGruppiDelModulo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeATC_ModuliPortale() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeATC_Utenti() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ATC_TipoUtenteRowChangeEventHandler(ByVal sender As Object, ByVal e As ATC_TipoUtenteRowChangeEvent)
    
    Public Delegate Sub GruppiDiAppartenenzaRowChangeEventHandler(ByVal sender As Object, ByVal e As GruppiDiAppartenenzaRowChangeEvent)
    
    Public Delegate Sub ATC_GruppiRowChangeEventHandler(ByVal sender As Object, ByVal e As ATC_GruppiRowChangeEvent)
    
    Public Delegate Sub UtentiDelGruppoRowChangeEventHandler(ByVal sender As Object, ByVal e As UtentiDelGruppoRowChangeEvent)
    
    Public Delegate Sub GruppiDelModuloRowChangeEventHandler(ByVal sender As Object, ByVal e As GruppiDelModuloRowChangeEvent)
    
    Public Delegate Sub ATC_ModuliPortaleRowChangeEventHandler(ByVal sender As Object, ByVal e As ATC_ModuliPortaleRowChangeEvent)
    
    Public Delegate Sub ATC_UtentiRowChangeEventHandler(ByVal sender As Object, ByVal e As ATC_UtentiRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATC_TipoUtenteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDescrizione As DataColumn
        
        Friend Sub New()
            MyBase.New("ATC_TipoUtente")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneColumn As DataColumn
            Get
                Return Me.columnDescrizione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ATC_TipoUtenteRow
            Get
                Return CType(Me.Rows(index),ATC_TipoUtenteRow)
            End Get
        End Property
        
        Public Event ATC_TipoUtenteRowChanged As ATC_TipoUtenteRowChangeEventHandler
        
        Public Event ATC_TipoUtenteRowChanging As ATC_TipoUtenteRowChangeEventHandler
        
        Public Event ATC_TipoUtenteRowDeleted As ATC_TipoUtenteRowChangeEventHandler
        
        Public Event ATC_TipoUtenteRowDeleting As ATC_TipoUtenteRowChangeEventHandler
        
        Public Overloads Sub AddATC_TipoUtenteRow(ByVal row As ATC_TipoUtenteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddATC_TipoUtenteRow(ByVal Descrizione As String) As ATC_TipoUtenteRow
            Dim rowATC_TipoUtenteRow As ATC_TipoUtenteRow = CType(Me.NewRow,ATC_TipoUtenteRow)
            rowATC_TipoUtenteRow.ItemArray = New Object() {Nothing, Descrizione}
            Me.Rows.Add(rowATC_TipoUtenteRow)
            Return rowATC_TipoUtenteRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As ATC_TipoUtenteRow
            Return CType(Me.Rows.Find(New Object() {ID}),ATC_TipoUtenteRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ATC_TipoUtenteDataTable = CType(MyBase.Clone,ATC_TipoUtenteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ATC_TipoUtenteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDescrizione = Me.Columns("Descrizione")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDescrizione = New DataColumn("Descrizione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDescrizione.AllowDBNull = false
        End Sub
        
        Public Function NewATC_TipoUtenteRow() As ATC_TipoUtenteRow
            Return CType(Me.NewRow,ATC_TipoUtenteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ATC_TipoUtenteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ATC_TipoUtenteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ATC_TipoUtenteRowChangedEvent) Is Nothing) Then
                RaiseEvent ATC_TipoUtenteRowChanged(Me, New ATC_TipoUtenteRowChangeEvent(CType(e.Row,ATC_TipoUtenteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ATC_TipoUtenteRowChangingEvent) Is Nothing) Then
                RaiseEvent ATC_TipoUtenteRowChanging(Me, New ATC_TipoUtenteRowChangeEvent(CType(e.Row,ATC_TipoUtenteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ATC_TipoUtenteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ATC_TipoUtenteRowDeleted(Me, New ATC_TipoUtenteRowChangeEvent(CType(e.Row,ATC_TipoUtenteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ATC_TipoUtenteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ATC_TipoUtenteRowDeleting(Me, New ATC_TipoUtenteRowChangeEvent(CType(e.Row,ATC_TipoUtenteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveATC_TipoUtenteRow(ByVal row As ATC_TipoUtenteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATC_TipoUtenteRow
        Inherits DataRow
        
        Private tableATC_TipoUtente As ATC_TipoUtenteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableATC_TipoUtente = CType(Me.Table,ATC_TipoUtenteDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableATC_TipoUtente.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableATC_TipoUtente.IDColumn) = value
            End Set
        End Property
        
        Public Property Descrizione As String
            Get
                Return CType(Me(Me.tableATC_TipoUtente.DescrizioneColumn),String)
            End Get
            Set
                Me(Me.tableATC_TipoUtente.DescrizioneColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATC_TipoUtenteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ATC_TipoUtenteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ATC_TipoUtenteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ATC_TipoUtenteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GruppiDiAppartenenzaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDescrizione As DataColumn
        
        Private columnAbilitato As DataColumn
        
        Private columnEMail As DataColumn
        
        Private columnAmministrazione As DataColumn
        
        Friend Sub New()
            MyBase.New("GruppiDiAppartenenza")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneColumn As DataColumn
            Get
                Return Me.columnDescrizione
            End Get
        End Property
        
        Friend ReadOnly Property AbilitatoColumn As DataColumn
            Get
                Return Me.columnAbilitato
            End Get
        End Property
        
        Friend ReadOnly Property EMailColumn As DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        Friend ReadOnly Property AmministrazioneColumn As DataColumn
            Get
                Return Me.columnAmministrazione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GruppiDiAppartenenzaRow
            Get
                Return CType(Me.Rows(index),GruppiDiAppartenenzaRow)
            End Get
        End Property
        
        Public Event GruppiDiAppartenenzaRowChanged As GruppiDiAppartenenzaRowChangeEventHandler
        
        Public Event GruppiDiAppartenenzaRowChanging As GruppiDiAppartenenzaRowChangeEventHandler
        
        Public Event GruppiDiAppartenenzaRowDeleted As GruppiDiAppartenenzaRowChangeEventHandler
        
        Public Event GruppiDiAppartenenzaRowDeleting As GruppiDiAppartenenzaRowChangeEventHandler
        
        Public Overloads Sub AddGruppiDiAppartenenzaRow(ByVal row As GruppiDiAppartenenzaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGruppiDiAppartenenzaRow(ByVal ID As Integer, ByVal Descrizione As String, ByVal Abilitato As Boolean, ByVal EMail As String, ByVal Amministrazione As Boolean) As GruppiDiAppartenenzaRow
            Dim rowGruppiDiAppartenenzaRow As GruppiDiAppartenenzaRow = CType(Me.NewRow,GruppiDiAppartenenzaRow)
            rowGruppiDiAppartenenzaRow.ItemArray = New Object() {ID, Descrizione, Abilitato, EMail, Amministrazione}
            Me.Rows.Add(rowGruppiDiAppartenenzaRow)
            Return rowGruppiDiAppartenenzaRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As GruppiDiAppartenenzaRow
            Return CType(Me.Rows.Find(New Object() {ID}),GruppiDiAppartenenzaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GruppiDiAppartenenzaDataTable = CType(MyBase.Clone,GruppiDiAppartenenzaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GruppiDiAppartenenzaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDescrizione = Me.Columns("Descrizione")
            Me.columnAbilitato = Me.Columns("Abilitato")
            Me.columnEMail = Me.Columns("EMail")
            Me.columnAmministrazione = Me.Columns("Amministrazione")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDescrizione = New DataColumn("Descrizione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizione)
            Me.columnAbilitato = New DataColumn("Abilitato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilitato)
            Me.columnEMail = New DataColumn("EMail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMail)
            Me.columnAmministrazione = New DataColumn("Amministrazione", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmministrazione)
            Me.Constraints.Add(New UniqueConstraint("dsUtentiKey3", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDescrizione.AllowDBNull = false
        End Sub
        
        Public Function NewGruppiDiAppartenenzaRow() As GruppiDiAppartenenzaRow
            Return CType(Me.NewRow,GruppiDiAppartenenzaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GruppiDiAppartenenzaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GruppiDiAppartenenzaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GruppiDiAppartenenzaRowChangedEvent) Is Nothing) Then
                RaiseEvent GruppiDiAppartenenzaRowChanged(Me, New GruppiDiAppartenenzaRowChangeEvent(CType(e.Row,GruppiDiAppartenenzaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GruppiDiAppartenenzaRowChangingEvent) Is Nothing) Then
                RaiseEvent GruppiDiAppartenenzaRowChanging(Me, New GruppiDiAppartenenzaRowChangeEvent(CType(e.Row,GruppiDiAppartenenzaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GruppiDiAppartenenzaRowDeletedEvent) Is Nothing) Then
                RaiseEvent GruppiDiAppartenenzaRowDeleted(Me, New GruppiDiAppartenenzaRowChangeEvent(CType(e.Row,GruppiDiAppartenenzaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GruppiDiAppartenenzaRowDeletingEvent) Is Nothing) Then
                RaiseEvent GruppiDiAppartenenzaRowDeleting(Me, New GruppiDiAppartenenzaRowChangeEvent(CType(e.Row,GruppiDiAppartenenzaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGruppiDiAppartenenzaRow(ByVal row As GruppiDiAppartenenzaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GruppiDiAppartenenzaRow
        Inherits DataRow
        
        Private tableGruppiDiAppartenenza As GruppiDiAppartenenzaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGruppiDiAppartenenza = CType(Me.Table,GruppiDiAppartenenzaDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableGruppiDiAppartenenza.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableGruppiDiAppartenenza.IDColumn) = value
            End Set
        End Property
        
        Public Property Descrizione As String
            Get
                Return CType(Me(Me.tableGruppiDiAppartenenza.DescrizioneColumn),String)
            End Get
            Set
                Me(Me.tableGruppiDiAppartenenza.DescrizioneColumn) = value
            End Set
        End Property
        
        Public Property Abilitato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGruppiDiAppartenenza.AbilitatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGruppiDiAppartenenza.AbilitatoColumn) = value
            End Set
        End Property
        
        Public Property EMail As String
            Get
                Try 
                    Return CType(Me(Me.tableGruppiDiAppartenenza.EMailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGruppiDiAppartenenza.EMailColumn) = value
            End Set
        End Property
        
        Public Property Amministrazione As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGruppiDiAppartenenza.AmministrazioneColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGruppiDiAppartenenza.AmministrazioneColumn) = value
            End Set
        End Property
        
        Public Function IsAbilitatoNull() As Boolean
            Return Me.IsNull(Me.tableGruppiDiAppartenenza.AbilitatoColumn)
        End Function
        
        Public Sub SetAbilitatoNull()
            Me(Me.tableGruppiDiAppartenenza.AbilitatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tableGruppiDiAppartenenza.EMailColumn)
        End Function
        
        Public Sub SetEMailNull()
            Me(Me.tableGruppiDiAppartenenza.EMailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmministrazioneNull() As Boolean
            Return Me.IsNull(Me.tableGruppiDiAppartenenza.AmministrazioneColumn)
        End Function
        
        Public Sub SetAmministrazioneNull()
            Me(Me.tableGruppiDiAppartenenza.AmministrazioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GruppiDiAppartenenzaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GruppiDiAppartenenzaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GruppiDiAppartenenzaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GruppiDiAppartenenzaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATC_GruppiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDescrizione As DataColumn
        
        Private columnAbilitato As DataColumn
        
        Private columnEMail As DataColumn
        
        Private columnAmministrazione As DataColumn
        
        Friend Sub New()
            MyBase.New("ATC_Gruppi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneColumn As DataColumn
            Get
                Return Me.columnDescrizione
            End Get
        End Property
        
        Friend ReadOnly Property AbilitatoColumn As DataColumn
            Get
                Return Me.columnAbilitato
            End Get
        End Property
        
        Friend ReadOnly Property EMailColumn As DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        Friend ReadOnly Property AmministrazioneColumn As DataColumn
            Get
                Return Me.columnAmministrazione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ATC_GruppiRow
            Get
                Return CType(Me.Rows(index),ATC_GruppiRow)
            End Get
        End Property
        
        Public Event ATC_GruppiRowChanged As ATC_GruppiRowChangeEventHandler
        
        Public Event ATC_GruppiRowChanging As ATC_GruppiRowChangeEventHandler
        
        Public Event ATC_GruppiRowDeleted As ATC_GruppiRowChangeEventHandler
        
        Public Event ATC_GruppiRowDeleting As ATC_GruppiRowChangeEventHandler
        
        Public Overloads Sub AddATC_GruppiRow(ByVal row As ATC_GruppiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddATC_GruppiRow(ByVal ID As Integer, ByVal Descrizione As String, ByVal Abilitato As Boolean, ByVal EMail As String, ByVal Amministrazione As Boolean) As ATC_GruppiRow
            Dim rowATC_GruppiRow As ATC_GruppiRow = CType(Me.NewRow,ATC_GruppiRow)
            rowATC_GruppiRow.ItemArray = New Object() {ID, Descrizione, Abilitato, EMail, Amministrazione}
            Me.Rows.Add(rowATC_GruppiRow)
            Return rowATC_GruppiRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As ATC_GruppiRow
            Return CType(Me.Rows.Find(New Object() {ID}),ATC_GruppiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ATC_GruppiDataTable = CType(MyBase.Clone,ATC_GruppiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ATC_GruppiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDescrizione = Me.Columns("Descrizione")
            Me.columnAbilitato = Me.Columns("Abilitato")
            Me.columnEMail = Me.Columns("EMail")
            Me.columnAmministrazione = Me.Columns("Amministrazione")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDescrizione = New DataColumn("Descrizione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizione)
            Me.columnAbilitato = New DataColumn("Abilitato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilitato)
            Me.columnEMail = New DataColumn("EMail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMail)
            Me.columnAmministrazione = New DataColumn("Amministrazione", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmministrazione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnAbilitato.DefaultValue = true
            Me.columnAmministrazione.DefaultValue = false
        End Sub
        
        Public Function NewATC_GruppiRow() As ATC_GruppiRow
            Return CType(Me.NewRow,ATC_GruppiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ATC_GruppiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ATC_GruppiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ATC_GruppiRowChangedEvent) Is Nothing) Then
                RaiseEvent ATC_GruppiRowChanged(Me, New ATC_GruppiRowChangeEvent(CType(e.Row,ATC_GruppiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ATC_GruppiRowChangingEvent) Is Nothing) Then
                RaiseEvent ATC_GruppiRowChanging(Me, New ATC_GruppiRowChangeEvent(CType(e.Row,ATC_GruppiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ATC_GruppiRowDeletedEvent) Is Nothing) Then
                RaiseEvent ATC_GruppiRowDeleted(Me, New ATC_GruppiRowChangeEvent(CType(e.Row,ATC_GruppiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ATC_GruppiRowDeletingEvent) Is Nothing) Then
                RaiseEvent ATC_GruppiRowDeleting(Me, New ATC_GruppiRowChangeEvent(CType(e.Row,ATC_GruppiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveATC_GruppiRow(ByVal row As ATC_GruppiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATC_GruppiRow
        Inherits DataRow
        
        Private tableATC_Gruppi As ATC_GruppiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableATC_Gruppi = CType(Me.Table,ATC_GruppiDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableATC_Gruppi.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableATC_Gruppi.IDColumn) = value
            End Set
        End Property
        
        Public Property Descrizione As String
            Get
                Try 
                    Return CType(Me(Me.tableATC_Gruppi.DescrizioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Gruppi.DescrizioneColumn) = value
            End Set
        End Property
        
        Public Property Abilitato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableATC_Gruppi.AbilitatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Gruppi.AbilitatoColumn) = value
            End Set
        End Property
        
        Public Property EMail As String
            Get
                Try 
                    Return CType(Me(Me.tableATC_Gruppi.EMailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Gruppi.EMailColumn) = value
            End Set
        End Property
        
        Public Property Amministrazione As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableATC_Gruppi.AmministrazioneColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Gruppi.AmministrazioneColumn) = value
            End Set
        End Property
        
        Public Function IsDescrizioneNull() As Boolean
            Return Me.IsNull(Me.tableATC_Gruppi.DescrizioneColumn)
        End Function
        
        Public Sub SetDescrizioneNull()
            Me(Me.tableATC_Gruppi.DescrizioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAbilitatoNull() As Boolean
            Return Me.IsNull(Me.tableATC_Gruppi.AbilitatoColumn)
        End Function
        
        Public Sub SetAbilitatoNull()
            Me(Me.tableATC_Gruppi.AbilitatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tableATC_Gruppi.EMailColumn)
        End Function
        
        Public Sub SetEMailNull()
            Me(Me.tableATC_Gruppi.EMailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmministrazioneNull() As Boolean
            Return Me.IsNull(Me.tableATC_Gruppi.AmministrazioneColumn)
        End Function
        
        Public Sub SetAmministrazioneNull()
            Me(Me.tableATC_Gruppi.AmministrazioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATC_GruppiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ATC_GruppiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ATC_GruppiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ATC_GruppiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UtentiDelGruppoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnIDUser As DataColumn
        
        Private columnPwd As DataColumn
        
        Private columnIDResponsabile As DataColumn
        
        Private columnCognome As DataColumn
        
        Private columnNome As DataColumn
        
        Private columnEMail As DataColumn
        
        Private columnAbilitato As DataColumn
        
        Private columnDataUltimoAccesso As DataColumn
        
        Private columnOraUltimoAccesso As DataColumn
        
        Private columnNrAccessi As DataColumn
        
        Private columnTipoUtente As DataColumn
        
        Private columnFlag_Patente As DataColumn
        
        Friend Sub New()
            MyBase.New("UtentiDelGruppo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property IDUserColumn As DataColumn
            Get
                Return Me.columnIDUser
            End Get
        End Property
        
        Friend ReadOnly Property PwdColumn As DataColumn
            Get
                Return Me.columnPwd
            End Get
        End Property
        
        Friend ReadOnly Property IDResponsabileColumn As DataColumn
            Get
                Return Me.columnIDResponsabile
            End Get
        End Property
        
        Friend ReadOnly Property CognomeColumn As DataColumn
            Get
                Return Me.columnCognome
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property EMailColumn As DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        Friend ReadOnly Property AbilitatoColumn As DataColumn
            Get
                Return Me.columnAbilitato
            End Get
        End Property
        
        Friend ReadOnly Property DataUltimoAccessoColumn As DataColumn
            Get
                Return Me.columnDataUltimoAccesso
            End Get
        End Property
        
        Friend ReadOnly Property OraUltimoAccessoColumn As DataColumn
            Get
                Return Me.columnOraUltimoAccesso
            End Get
        End Property
        
        Friend ReadOnly Property NrAccessiColumn As DataColumn
            Get
                Return Me.columnNrAccessi
            End Get
        End Property
        
        Friend ReadOnly Property TipoUtenteColumn As DataColumn
            Get
                Return Me.columnTipoUtente
            End Get
        End Property
        
        Friend ReadOnly Property Flag_PatenteColumn As DataColumn
            Get
                Return Me.columnFlag_Patente
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UtentiDelGruppoRow
            Get
                Return CType(Me.Rows(index),UtentiDelGruppoRow)
            End Get
        End Property
        
        Public Event UtentiDelGruppoRowChanged As UtentiDelGruppoRowChangeEventHandler
        
        Public Event UtentiDelGruppoRowChanging As UtentiDelGruppoRowChangeEventHandler
        
        Public Event UtentiDelGruppoRowDeleted As UtentiDelGruppoRowChangeEventHandler
        
        Public Event UtentiDelGruppoRowDeleting As UtentiDelGruppoRowChangeEventHandler
        
        Public Overloads Sub AddUtentiDelGruppoRow(ByVal row As UtentiDelGruppoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUtentiDelGruppoRow(ByVal IDUser As String, ByVal Pwd As String, ByVal IDResponsabile As Integer, ByVal Cognome As String, ByVal Nome As String, ByVal EMail As String, ByVal Abilitato As Boolean, ByVal DataUltimoAccesso As String, ByVal OraUltimoAccesso As String, ByVal NrAccessi As Integer, ByVal TipoUtente As Integer, ByVal Flag_Patente As Boolean) As UtentiDelGruppoRow
            Dim rowUtentiDelGruppoRow As UtentiDelGruppoRow = CType(Me.NewRow,UtentiDelGruppoRow)
            rowUtentiDelGruppoRow.ItemArray = New Object() {Nothing, IDUser, Pwd, IDResponsabile, Cognome, Nome, EMail, Abilitato, DataUltimoAccesso, OraUltimoAccesso, NrAccessi, TipoUtente, Flag_Patente}
            Me.Rows.Add(rowUtentiDelGruppoRow)
            Return rowUtentiDelGruppoRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As UtentiDelGruppoRow
            Return CType(Me.Rows.Find(New Object() {ID}),UtentiDelGruppoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UtentiDelGruppoDataTable = CType(MyBase.Clone,UtentiDelGruppoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UtentiDelGruppoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnIDUser = Me.Columns("IDUser")
            Me.columnPwd = Me.Columns("Pwd")
            Me.columnIDResponsabile = Me.Columns("IDResponsabile")
            Me.columnCognome = Me.Columns("Cognome")
            Me.columnNome = Me.Columns("Nome")
            Me.columnEMail = Me.Columns("EMail")
            Me.columnAbilitato = Me.Columns("Abilitato")
            Me.columnDataUltimoAccesso = Me.Columns("DataUltimoAccesso")
            Me.columnOraUltimoAccesso = Me.Columns("OraUltimoAccesso")
            Me.columnNrAccessi = Me.Columns("NrAccessi")
            Me.columnTipoUtente = Me.Columns("TipoUtente")
            Me.columnFlag_Patente = Me.Columns("Flag_Patente")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnIDUser = New DataColumn("IDUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDUser)
            Me.columnPwd = New DataColumn("Pwd", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPwd)
            Me.columnIDResponsabile = New DataColumn("IDResponsabile", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDResponsabile)
            Me.columnCognome = New DataColumn("Cognome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognome)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnEMail = New DataColumn("EMail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMail)
            Me.columnAbilitato = New DataColumn("Abilitato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilitato)
            Me.columnDataUltimoAccesso = New DataColumn("DataUltimoAccesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataUltimoAccesso)
            Me.columnOraUltimoAccesso = New DataColumn("OraUltimoAccesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraUltimoAccesso)
            Me.columnNrAccessi = New DataColumn("NrAccessi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNrAccessi)
            Me.columnTipoUtente = New DataColumn("TipoUtente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoUtente)
            Me.columnFlag_Patente = New DataColumn("Flag_Patente", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlag_Patente)
            Me.Constraints.Add(New UniqueConstraint("dsUtentiKey2", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        Public Function NewUtentiDelGruppoRow() As UtentiDelGruppoRow
            Return CType(Me.NewRow,UtentiDelGruppoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UtentiDelGruppoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UtentiDelGruppoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UtentiDelGruppoRowChangedEvent) Is Nothing) Then
                RaiseEvent UtentiDelGruppoRowChanged(Me, New UtentiDelGruppoRowChangeEvent(CType(e.Row,UtentiDelGruppoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UtentiDelGruppoRowChangingEvent) Is Nothing) Then
                RaiseEvent UtentiDelGruppoRowChanging(Me, New UtentiDelGruppoRowChangeEvent(CType(e.Row,UtentiDelGruppoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UtentiDelGruppoRowDeletedEvent) Is Nothing) Then
                RaiseEvent UtentiDelGruppoRowDeleted(Me, New UtentiDelGruppoRowChangeEvent(CType(e.Row,UtentiDelGruppoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UtentiDelGruppoRowDeletingEvent) Is Nothing) Then
                RaiseEvent UtentiDelGruppoRowDeleting(Me, New UtentiDelGruppoRowChangeEvent(CType(e.Row,UtentiDelGruppoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUtentiDelGruppoRow(ByVal row As UtentiDelGruppoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UtentiDelGruppoRow
        Inherits DataRow
        
        Private tableUtentiDelGruppo As UtentiDelGruppoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUtentiDelGruppo = CType(Me.Table,UtentiDelGruppoDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableUtentiDelGruppo.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableUtentiDelGruppo.IDColumn) = value
            End Set
        End Property
        
        Public Property IDUser As String
            Get
                Try 
                    Return CType(Me(Me.tableUtentiDelGruppo.IDUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUtentiDelGruppo.IDUserColumn) = value
            End Set
        End Property
        
        Public Property Pwd As String
            Get
                Try 
                    Return CType(Me(Me.tableUtentiDelGruppo.PwdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUtentiDelGruppo.PwdColumn) = value
            End Set
        End Property
        
        Public Property IDResponsabile As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUtentiDelGruppo.IDResponsabileColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUtentiDelGruppo.IDResponsabileColumn) = value
            End Set
        End Property
        
        Public Property Cognome As String
            Get
                Try 
                    Return CType(Me(Me.tableUtentiDelGruppo.CognomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUtentiDelGruppo.CognomeColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableUtentiDelGruppo.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUtentiDelGruppo.NomeColumn) = value
            End Set
        End Property
        
        Public Property EMail As String
            Get
                Try 
                    Return CType(Me(Me.tableUtentiDelGruppo.EMailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUtentiDelGruppo.EMailColumn) = value
            End Set
        End Property
        
        Public Property Abilitato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableUtentiDelGruppo.AbilitatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUtentiDelGruppo.AbilitatoColumn) = value
            End Set
        End Property
        
        Public Property DataUltimoAccesso As String
            Get
                Try 
                    Return CType(Me(Me.tableUtentiDelGruppo.DataUltimoAccessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUtentiDelGruppo.DataUltimoAccessoColumn) = value
            End Set
        End Property
        
        Public Property OraUltimoAccesso As String
            Get
                Try 
                    Return CType(Me(Me.tableUtentiDelGruppo.OraUltimoAccessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUtentiDelGruppo.OraUltimoAccessoColumn) = value
            End Set
        End Property
        
        Public Property NrAccessi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUtentiDelGruppo.NrAccessiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUtentiDelGruppo.NrAccessiColumn) = value
            End Set
        End Property
        
        Public Property TipoUtente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUtentiDelGruppo.TipoUtenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUtentiDelGruppo.TipoUtenteColumn) = value
            End Set
        End Property
        
        Public Property Flag_Patente As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableUtentiDelGruppo.Flag_PatenteColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUtentiDelGruppo.Flag_PatenteColumn) = value
            End Set
        End Property
        
        Public Function IsIDUserNull() As Boolean
            Return Me.IsNull(Me.tableUtentiDelGruppo.IDUserColumn)
        End Function
        
        Public Sub SetIDUserNull()
            Me(Me.tableUtentiDelGruppo.IDUserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPwdNull() As Boolean
            Return Me.IsNull(Me.tableUtentiDelGruppo.PwdColumn)
        End Function
        
        Public Sub SetPwdNull()
            Me(Me.tableUtentiDelGruppo.PwdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDResponsabileNull() As Boolean
            Return Me.IsNull(Me.tableUtentiDelGruppo.IDResponsabileColumn)
        End Function
        
        Public Sub SetIDResponsabileNull()
            Me(Me.tableUtentiDelGruppo.IDResponsabileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNull() As Boolean
            Return Me.IsNull(Me.tableUtentiDelGruppo.CognomeColumn)
        End Function
        
        Public Sub SetCognomeNull()
            Me(Me.tableUtentiDelGruppo.CognomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableUtentiDelGruppo.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableUtentiDelGruppo.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tableUtentiDelGruppo.EMailColumn)
        End Function
        
        Public Sub SetEMailNull()
            Me(Me.tableUtentiDelGruppo.EMailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAbilitatoNull() As Boolean
            Return Me.IsNull(Me.tableUtentiDelGruppo.AbilitatoColumn)
        End Function
        
        Public Sub SetAbilitatoNull()
            Me(Me.tableUtentiDelGruppo.AbilitatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataUltimoAccessoNull() As Boolean
            Return Me.IsNull(Me.tableUtentiDelGruppo.DataUltimoAccessoColumn)
        End Function
        
        Public Sub SetDataUltimoAccessoNull()
            Me(Me.tableUtentiDelGruppo.DataUltimoAccessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraUltimoAccessoNull() As Boolean
            Return Me.IsNull(Me.tableUtentiDelGruppo.OraUltimoAccessoColumn)
        End Function
        
        Public Sub SetOraUltimoAccessoNull()
            Me(Me.tableUtentiDelGruppo.OraUltimoAccessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNrAccessiNull() As Boolean
            Return Me.IsNull(Me.tableUtentiDelGruppo.NrAccessiColumn)
        End Function
        
        Public Sub SetNrAccessiNull()
            Me(Me.tableUtentiDelGruppo.NrAccessiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoUtenteNull() As Boolean
            Return Me.IsNull(Me.tableUtentiDelGruppo.TipoUtenteColumn)
        End Function
        
        Public Sub SetTipoUtenteNull()
            Me(Me.tableUtentiDelGruppo.TipoUtenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlag_PatenteNull() As Boolean
            Return Me.IsNull(Me.tableUtentiDelGruppo.Flag_PatenteColumn)
        End Function
        
        Public Sub SetFlag_PatenteNull()
            Me(Me.tableUtentiDelGruppo.Flag_PatenteColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UtentiDelGruppoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UtentiDelGruppoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UtentiDelGruppoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UtentiDelGruppoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GruppiDelModuloDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDescrizione As DataColumn
        
        Friend Sub New()
            MyBase.New("GruppiDelModulo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneColumn As DataColumn
            Get
                Return Me.columnDescrizione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GruppiDelModuloRow
            Get
                Return CType(Me.Rows(index),GruppiDelModuloRow)
            End Get
        End Property
        
        Public Event GruppiDelModuloRowChanged As GruppiDelModuloRowChangeEventHandler
        
        Public Event GruppiDelModuloRowChanging As GruppiDelModuloRowChangeEventHandler
        
        Public Event GruppiDelModuloRowDeleted As GruppiDelModuloRowChangeEventHandler
        
        Public Event GruppiDelModuloRowDeleting As GruppiDelModuloRowChangeEventHandler
        
        Public Overloads Sub AddGruppiDelModuloRow(ByVal row As GruppiDelModuloRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGruppiDelModuloRow(ByVal ID As Integer, ByVal Descrizione As String) As GruppiDelModuloRow
            Dim rowGruppiDelModuloRow As GruppiDelModuloRow = CType(Me.NewRow,GruppiDelModuloRow)
            rowGruppiDelModuloRow.ItemArray = New Object() {ID, Descrizione}
            Me.Rows.Add(rowGruppiDelModuloRow)
            Return rowGruppiDelModuloRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As GruppiDelModuloRow
            Return CType(Me.Rows.Find(New Object() {ID}),GruppiDelModuloRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GruppiDelModuloDataTable = CType(MyBase.Clone,GruppiDelModuloDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GruppiDelModuloDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDescrizione = Me.Columns("Descrizione")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDescrizione = New DataColumn("Descrizione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizione)
            Me.Constraints.Add(New UniqueConstraint("dsUtentiKey1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnDescrizione.AllowDBNull = false
        End Sub
        
        Public Function NewGruppiDelModuloRow() As GruppiDelModuloRow
            Return CType(Me.NewRow,GruppiDelModuloRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GruppiDelModuloRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GruppiDelModuloRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GruppiDelModuloRowChangedEvent) Is Nothing) Then
                RaiseEvent GruppiDelModuloRowChanged(Me, New GruppiDelModuloRowChangeEvent(CType(e.Row,GruppiDelModuloRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GruppiDelModuloRowChangingEvent) Is Nothing) Then
                RaiseEvent GruppiDelModuloRowChanging(Me, New GruppiDelModuloRowChangeEvent(CType(e.Row,GruppiDelModuloRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GruppiDelModuloRowDeletedEvent) Is Nothing) Then
                RaiseEvent GruppiDelModuloRowDeleted(Me, New GruppiDelModuloRowChangeEvent(CType(e.Row,GruppiDelModuloRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GruppiDelModuloRowDeletingEvent) Is Nothing) Then
                RaiseEvent GruppiDelModuloRowDeleting(Me, New GruppiDelModuloRowChangeEvent(CType(e.Row,GruppiDelModuloRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGruppiDelModuloRow(ByVal row As GruppiDelModuloRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GruppiDelModuloRow
        Inherits DataRow
        
        Private tableGruppiDelModulo As GruppiDelModuloDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGruppiDelModulo = CType(Me.Table,GruppiDelModuloDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableGruppiDelModulo.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableGruppiDelModulo.IDColumn) = value
            End Set
        End Property
        
        Public Property Descrizione As String
            Get
                Return CType(Me(Me.tableGruppiDelModulo.DescrizioneColumn),String)
            End Get
            Set
                Me(Me.tableGruppiDelModulo.DescrizioneColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GruppiDelModuloRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GruppiDelModuloRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GruppiDelModuloRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GruppiDelModuloRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATC_ModuliPortaleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnSect_Desc As DataColumn
        
        Private columnDescrizione As DataColumn
        
        Private columnAbilitato As DataColumn
        
        Friend Sub New()
            MyBase.New("ATC_ModuliPortale")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property Sect_DescColumn As DataColumn
            Get
                Return Me.columnSect_Desc
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneColumn As DataColumn
            Get
                Return Me.columnDescrizione
            End Get
        End Property
        
        Friend ReadOnly Property AbilitatoColumn As DataColumn
            Get
                Return Me.columnAbilitato
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ATC_ModuliPortaleRow
            Get
                Return CType(Me.Rows(index),ATC_ModuliPortaleRow)
            End Get
        End Property
        
        Public Event ATC_ModuliPortaleRowChanged As ATC_ModuliPortaleRowChangeEventHandler
        
        Public Event ATC_ModuliPortaleRowChanging As ATC_ModuliPortaleRowChangeEventHandler
        
        Public Event ATC_ModuliPortaleRowDeleted As ATC_ModuliPortaleRowChangeEventHandler
        
        Public Event ATC_ModuliPortaleRowDeleting As ATC_ModuliPortaleRowChangeEventHandler
        
        Public Overloads Sub AddATC_ModuliPortaleRow(ByVal row As ATC_ModuliPortaleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddATC_ModuliPortaleRow(ByVal Sect_Desc As String, ByVal Descrizione As String, ByVal Abilitato As Boolean) As ATC_ModuliPortaleRow
            Dim rowATC_ModuliPortaleRow As ATC_ModuliPortaleRow = CType(Me.NewRow,ATC_ModuliPortaleRow)
            rowATC_ModuliPortaleRow.ItemArray = New Object() {Nothing, Sect_Desc, Descrizione, Abilitato}
            Me.Rows.Add(rowATC_ModuliPortaleRow)
            Return rowATC_ModuliPortaleRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ATC_ModuliPortaleDataTable = CType(MyBase.Clone,ATC_ModuliPortaleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ATC_ModuliPortaleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnSect_Desc = Me.Columns("Sect_Desc")
            Me.columnDescrizione = Me.Columns("Descrizione")
            Me.columnAbilitato = Me.Columns("Abilitato")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnSect_Desc = New DataColumn("Sect_Desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSect_Desc)
            Me.columnDescrizione = New DataColumn("Descrizione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizione)
            Me.columnAbilitato = New DataColumn("Abilitato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilitato)
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnSect_Desc.AllowDBNull = false
            Me.columnDescrizione.AllowDBNull = false
            Me.columnAbilitato.AllowDBNull = false
        End Sub
        
        Public Function NewATC_ModuliPortaleRow() As ATC_ModuliPortaleRow
            Return CType(Me.NewRow,ATC_ModuliPortaleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ATC_ModuliPortaleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ATC_ModuliPortaleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ATC_ModuliPortaleRowChangedEvent) Is Nothing) Then
                RaiseEvent ATC_ModuliPortaleRowChanged(Me, New ATC_ModuliPortaleRowChangeEvent(CType(e.Row,ATC_ModuliPortaleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ATC_ModuliPortaleRowChangingEvent) Is Nothing) Then
                RaiseEvent ATC_ModuliPortaleRowChanging(Me, New ATC_ModuliPortaleRowChangeEvent(CType(e.Row,ATC_ModuliPortaleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ATC_ModuliPortaleRowDeletedEvent) Is Nothing) Then
                RaiseEvent ATC_ModuliPortaleRowDeleted(Me, New ATC_ModuliPortaleRowChangeEvent(CType(e.Row,ATC_ModuliPortaleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ATC_ModuliPortaleRowDeletingEvent) Is Nothing) Then
                RaiseEvent ATC_ModuliPortaleRowDeleting(Me, New ATC_ModuliPortaleRowChangeEvent(CType(e.Row,ATC_ModuliPortaleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveATC_ModuliPortaleRow(ByVal row As ATC_ModuliPortaleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATC_ModuliPortaleRow
        Inherits DataRow
        
        Private tableATC_ModuliPortale As ATC_ModuliPortaleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableATC_ModuliPortale = CType(Me.Table,ATC_ModuliPortaleDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableATC_ModuliPortale.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableATC_ModuliPortale.IDColumn) = value
            End Set
        End Property
        
        Public Property Sect_Desc As String
            Get
                Return CType(Me(Me.tableATC_ModuliPortale.Sect_DescColumn),String)
            End Get
            Set
                Me(Me.tableATC_ModuliPortale.Sect_DescColumn) = value
            End Set
        End Property
        
        Public Property Descrizione As String
            Get
                Return CType(Me(Me.tableATC_ModuliPortale.DescrizioneColumn),String)
            End Get
            Set
                Me(Me.tableATC_ModuliPortale.DescrizioneColumn) = value
            End Set
        End Property
        
        Public Property Abilitato As Boolean
            Get
                Return CType(Me(Me.tableATC_ModuliPortale.AbilitatoColumn),Boolean)
            End Get
            Set
                Me(Me.tableATC_ModuliPortale.AbilitatoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATC_ModuliPortaleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ATC_ModuliPortaleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ATC_ModuliPortaleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ATC_ModuliPortaleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATC_UtentiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnIDUser As DataColumn
        
        Private columnPwd As DataColumn
        
        Private columnIDResponsabile As DataColumn
        
        Private columnCognome As DataColumn
        
        Private columnNome As DataColumn
        
        Private columnEMail As DataColumn
        
        Private columnAbilitato As DataColumn
        
        Private columnDataUltimoAccesso As DataColumn
        
        Private columnOraUltimoAccesso As DataColumn
        
        Private columnNrAccessi As DataColumn
        
        Private columnTipoUtente As DataColumn
        
        Private columnDescrizioneTipoUtente As DataColumn
        
        Private columnFlag_Patente As DataColumn
        
        Friend Sub New()
            MyBase.New("ATC_Utenti")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property IDUserColumn As DataColumn
            Get
                Return Me.columnIDUser
            End Get
        End Property
        
        Friend ReadOnly Property PwdColumn As DataColumn
            Get
                Return Me.columnPwd
            End Get
        End Property
        
        Friend ReadOnly Property IDResponsabileColumn As DataColumn
            Get
                Return Me.columnIDResponsabile
            End Get
        End Property
        
        Friend ReadOnly Property CognomeColumn As DataColumn
            Get
                Return Me.columnCognome
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property EMailColumn As DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        Friend ReadOnly Property AbilitatoColumn As DataColumn
            Get
                Return Me.columnAbilitato
            End Get
        End Property
        
        Friend ReadOnly Property DataUltimoAccessoColumn As DataColumn
            Get
                Return Me.columnDataUltimoAccesso
            End Get
        End Property
        
        Friend ReadOnly Property OraUltimoAccessoColumn As DataColumn
            Get
                Return Me.columnOraUltimoAccesso
            End Get
        End Property
        
        Friend ReadOnly Property NrAccessiColumn As DataColumn
            Get
                Return Me.columnNrAccessi
            End Get
        End Property
        
        Friend ReadOnly Property TipoUtenteColumn As DataColumn
            Get
                Return Me.columnTipoUtente
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneTipoUtenteColumn As DataColumn
            Get
                Return Me.columnDescrizioneTipoUtente
            End Get
        End Property
        
        Friend ReadOnly Property Flag_PatenteColumn As DataColumn
            Get
                Return Me.columnFlag_Patente
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ATC_UtentiRow
            Get
                Return CType(Me.Rows(index),ATC_UtentiRow)
            End Get
        End Property
        
        Public Event ATC_UtentiRowChanged As ATC_UtentiRowChangeEventHandler
        
        Public Event ATC_UtentiRowChanging As ATC_UtentiRowChangeEventHandler
        
        Public Event ATC_UtentiRowDeleted As ATC_UtentiRowChangeEventHandler
        
        Public Event ATC_UtentiRowDeleting As ATC_UtentiRowChangeEventHandler
        
        Public Overloads Sub AddATC_UtentiRow(ByVal row As ATC_UtentiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddATC_UtentiRow(ByVal IDUser As String, ByVal Pwd As String, ByVal IDResponsabile As Integer, ByVal Cognome As String, ByVal Nome As String, ByVal EMail As String, ByVal Abilitato As Boolean, ByVal DataUltimoAccesso As String, ByVal OraUltimoAccesso As String, ByVal NrAccessi As Integer, ByVal TipoUtente As Integer, ByVal DescrizioneTipoUtente As String, ByVal Flag_Patente As Boolean) As ATC_UtentiRow
            Dim rowATC_UtentiRow As ATC_UtentiRow = CType(Me.NewRow,ATC_UtentiRow)
            rowATC_UtentiRow.ItemArray = New Object() {Nothing, IDUser, Pwd, IDResponsabile, Cognome, Nome, EMail, Abilitato, DataUltimoAccesso, OraUltimoAccesso, NrAccessi, TipoUtente, DescrizioneTipoUtente, Flag_Patente}
            Me.Rows.Add(rowATC_UtentiRow)
            Return rowATC_UtentiRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As ATC_UtentiRow
            Return CType(Me.Rows.Find(New Object() {ID}),ATC_UtentiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ATC_UtentiDataTable = CType(MyBase.Clone,ATC_UtentiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ATC_UtentiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnIDUser = Me.Columns("IDUser")
            Me.columnPwd = Me.Columns("Pwd")
            Me.columnIDResponsabile = Me.Columns("IDResponsabile")
            Me.columnCognome = Me.Columns("Cognome")
            Me.columnNome = Me.Columns("Nome")
            Me.columnEMail = Me.Columns("EMail")
            Me.columnAbilitato = Me.Columns("Abilitato")
            Me.columnDataUltimoAccesso = Me.Columns("DataUltimoAccesso")
            Me.columnOraUltimoAccesso = Me.Columns("OraUltimoAccesso")
            Me.columnNrAccessi = Me.Columns("NrAccessi")
            Me.columnTipoUtente = Me.Columns("TipoUtente")
            Me.columnDescrizioneTipoUtente = Me.Columns("DescrizioneTipoUtente")
            Me.columnFlag_Patente = Me.Columns("Flag_Patente")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnIDUser = New DataColumn("IDUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDUser)
            Me.columnPwd = New DataColumn("Pwd", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPwd)
            Me.columnIDResponsabile = New DataColumn("IDResponsabile", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDResponsabile)
            Me.columnCognome = New DataColumn("Cognome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognome)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnEMail = New DataColumn("EMail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMail)
            Me.columnAbilitato = New DataColumn("Abilitato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilitato)
            Me.columnDataUltimoAccesso = New DataColumn("DataUltimoAccesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataUltimoAccesso)
            Me.columnOraUltimoAccesso = New DataColumn("OraUltimoAccesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraUltimoAccesso)
            Me.columnNrAccessi = New DataColumn("NrAccessi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNrAccessi)
            Me.columnTipoUtente = New DataColumn("TipoUtente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoUtente)
            Me.columnDescrizioneTipoUtente = New DataColumn("DescrizioneTipoUtente", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizioneTipoUtente)
            Me.columnFlag_Patente = New DataColumn("Flag_Patente", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlag_Patente)
            Me.Constraints.Add(New UniqueConstraint("dsUtentiKey4", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        Public Function NewATC_UtentiRow() As ATC_UtentiRow
            Return CType(Me.NewRow,ATC_UtentiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ATC_UtentiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ATC_UtentiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ATC_UtentiRowChangedEvent) Is Nothing) Then
                RaiseEvent ATC_UtentiRowChanged(Me, New ATC_UtentiRowChangeEvent(CType(e.Row,ATC_UtentiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ATC_UtentiRowChangingEvent) Is Nothing) Then
                RaiseEvent ATC_UtentiRowChanging(Me, New ATC_UtentiRowChangeEvent(CType(e.Row,ATC_UtentiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ATC_UtentiRowDeletedEvent) Is Nothing) Then
                RaiseEvent ATC_UtentiRowDeleted(Me, New ATC_UtentiRowChangeEvent(CType(e.Row,ATC_UtentiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ATC_UtentiRowDeletingEvent) Is Nothing) Then
                RaiseEvent ATC_UtentiRowDeleting(Me, New ATC_UtentiRowChangeEvent(CType(e.Row,ATC_UtentiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveATC_UtentiRow(ByVal row As ATC_UtentiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATC_UtentiRow
        Inherits DataRow
        
        Private tableATC_Utenti As ATC_UtentiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableATC_Utenti = CType(Me.Table,ATC_UtentiDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableATC_Utenti.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableATC_Utenti.IDColumn) = value
            End Set
        End Property
        
        Public Property IDUser As String
            Get
                Try 
                    Return CType(Me(Me.tableATC_Utenti.IDUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Utenti.IDUserColumn) = value
            End Set
        End Property
        
        Public Property Pwd As String
            Get
                Try 
                    Return CType(Me(Me.tableATC_Utenti.PwdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Utenti.PwdColumn) = value
            End Set
        End Property
        
        Public Property IDResponsabile As Integer
            Get
                Try 
                    Return CType(Me(Me.tableATC_Utenti.IDResponsabileColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Utenti.IDResponsabileColumn) = value
            End Set
        End Property
        
        Public Property Cognome As String
            Get
                Try 
                    Return CType(Me(Me.tableATC_Utenti.CognomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Utenti.CognomeColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableATC_Utenti.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Utenti.NomeColumn) = value
            End Set
        End Property
        
        Public Property EMail As String
            Get
                Try 
                    Return CType(Me(Me.tableATC_Utenti.EMailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Utenti.EMailColumn) = value
            End Set
        End Property
        
        Public Property Abilitato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableATC_Utenti.AbilitatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Utenti.AbilitatoColumn) = value
            End Set
        End Property
        
        Public Property DataUltimoAccesso As String
            Get
                Try 
                    Return CType(Me(Me.tableATC_Utenti.DataUltimoAccessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Utenti.DataUltimoAccessoColumn) = value
            End Set
        End Property
        
        Public Property OraUltimoAccesso As String
            Get
                Try 
                    Return CType(Me(Me.tableATC_Utenti.OraUltimoAccessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Utenti.OraUltimoAccessoColumn) = value
            End Set
        End Property
        
        Public Property NrAccessi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableATC_Utenti.NrAccessiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Utenti.NrAccessiColumn) = value
            End Set
        End Property
        
        Public Property TipoUtente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableATC_Utenti.TipoUtenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Utenti.TipoUtenteColumn) = value
            End Set
        End Property
        
        Public Property DescrizioneTipoUtente As String
            Get
                Try 
                    Return CType(Me(Me.tableATC_Utenti.DescrizioneTipoUtenteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Utenti.DescrizioneTipoUtenteColumn) = value
            End Set
        End Property
        
        Public Property Flag_Patente As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableATC_Utenti.Flag_PatenteColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableATC_Utenti.Flag_PatenteColumn) = value
            End Set
        End Property
        
        Public Function IsIDUserNull() As Boolean
            Return Me.IsNull(Me.tableATC_Utenti.IDUserColumn)
        End Function
        
        Public Sub SetIDUserNull()
            Me(Me.tableATC_Utenti.IDUserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPwdNull() As Boolean
            Return Me.IsNull(Me.tableATC_Utenti.PwdColumn)
        End Function
        
        Public Sub SetPwdNull()
            Me(Me.tableATC_Utenti.PwdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDResponsabileNull() As Boolean
            Return Me.IsNull(Me.tableATC_Utenti.IDResponsabileColumn)
        End Function
        
        Public Sub SetIDResponsabileNull()
            Me(Me.tableATC_Utenti.IDResponsabileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNull() As Boolean
            Return Me.IsNull(Me.tableATC_Utenti.CognomeColumn)
        End Function
        
        Public Sub SetCognomeNull()
            Me(Me.tableATC_Utenti.CognomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableATC_Utenti.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableATC_Utenti.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tableATC_Utenti.EMailColumn)
        End Function
        
        Public Sub SetEMailNull()
            Me(Me.tableATC_Utenti.EMailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAbilitatoNull() As Boolean
            Return Me.IsNull(Me.tableATC_Utenti.AbilitatoColumn)
        End Function
        
        Public Sub SetAbilitatoNull()
            Me(Me.tableATC_Utenti.AbilitatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataUltimoAccessoNull() As Boolean
            Return Me.IsNull(Me.tableATC_Utenti.DataUltimoAccessoColumn)
        End Function
        
        Public Sub SetDataUltimoAccessoNull()
            Me(Me.tableATC_Utenti.DataUltimoAccessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraUltimoAccessoNull() As Boolean
            Return Me.IsNull(Me.tableATC_Utenti.OraUltimoAccessoColumn)
        End Function
        
        Public Sub SetOraUltimoAccessoNull()
            Me(Me.tableATC_Utenti.OraUltimoAccessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNrAccessiNull() As Boolean
            Return Me.IsNull(Me.tableATC_Utenti.NrAccessiColumn)
        End Function
        
        Public Sub SetNrAccessiNull()
            Me(Me.tableATC_Utenti.NrAccessiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoUtenteNull() As Boolean
            Return Me.IsNull(Me.tableATC_Utenti.TipoUtenteColumn)
        End Function
        
        Public Sub SetTipoUtenteNull()
            Me(Me.tableATC_Utenti.TipoUtenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescrizioneTipoUtenteNull() As Boolean
            Return Me.IsNull(Me.tableATC_Utenti.DescrizioneTipoUtenteColumn)
        End Function
        
        Public Sub SetDescrizioneTipoUtenteNull()
            Me(Me.tableATC_Utenti.DescrizioneTipoUtenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlag_PatenteNull() As Boolean
            Return Me.IsNull(Me.tableATC_Utenti.Flag_PatenteColumn)
        End Function
        
        Public Sub SetFlag_PatenteNull()
            Me(Me.tableATC_Utenti.Flag_PatenteColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ATC_UtentiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ATC_UtentiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ATC_UtentiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ATC_UtentiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
