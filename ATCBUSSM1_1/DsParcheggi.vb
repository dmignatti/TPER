'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsParcheggi
    Inherits DataSet
    
    Private tableParcheggi As ParcheggiDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Parcheggi")) Is Nothing) Then
                Me.Tables.Add(New ParcheggiDataTable(ds.Tables("Parcheggi")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Parcheggi As ParcheggiDataTable
        Get
            Return Me.tableParcheggi
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsParcheggi = CType(MyBase.Clone,DsParcheggi)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Parcheggi")) Is Nothing) Then
            Me.Tables.Add(New ParcheggiDataTable(ds.Tables("Parcheggi")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableParcheggi = CType(Me.Tables("Parcheggi"),ParcheggiDataTable)
        If (Not (Me.tableParcheggi) Is Nothing) Then
            Me.tableParcheggi.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsParcheggi"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsParcheggi.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableParcheggi = New ParcheggiDataTable
        Me.Tables.Add(Me.tableParcheggi)
    End Sub
    
    Private Function ShouldSerializeParcheggi() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ParcheggiRowChangeEventHandler(ByVal sender As Object, ByVal e As ParcheggiRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ParcheggiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnNome As DataColumn
        
        Private columnPosti As DataColumn
        
        Private columnPercOccup As DataColumn
        
        Private columnConnPNV As DataColumn
        
        Private columnAutom As DataColumn
        
        Private columnNote As DataColumn
        
        Friend Sub New()
            MyBase.New("Parcheggi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property PostiColumn As DataColumn
            Get
                Return Me.columnPosti
            End Get
        End Property
        
        Friend ReadOnly Property PercOccupColumn As DataColumn
            Get
                Return Me.columnPercOccup
            End Get
        End Property
        
        Friend ReadOnly Property ConnPNVColumn As DataColumn
            Get
                Return Me.columnConnPNV
            End Get
        End Property
        
        Friend ReadOnly Property AutomColumn As DataColumn
            Get
                Return Me.columnAutom
            End Get
        End Property
        
        Friend ReadOnly Property NoteColumn As DataColumn
            Get
                Return Me.columnNote
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ParcheggiRow
            Get
                Return CType(Me.Rows(index),ParcheggiRow)
            End Get
        End Property
        
        Public Event ParcheggiRowChanged As ParcheggiRowChangeEventHandler
        
        Public Event ParcheggiRowChanging As ParcheggiRowChangeEventHandler
        
        Public Event ParcheggiRowDeleted As ParcheggiRowChangeEventHandler
        
        Public Event ParcheggiRowDeleting As ParcheggiRowChangeEventHandler
        
        Public Overloads Sub AddParcheggiRow(ByVal row As ParcheggiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddParcheggiRow(ByVal Id As System.Guid, ByVal Nome As String, ByVal Posti As Integer, ByVal PercOccup As Double, ByVal ConnPNV As Boolean, ByVal Autom As Boolean, ByVal Note As String) As ParcheggiRow
            Dim rowParcheggiRow As ParcheggiRow = CType(Me.NewRow,ParcheggiRow)
            rowParcheggiRow.ItemArray = New Object() {Id, Nome, Posti, PercOccup, ConnPNV, Autom, Note}
            Me.Rows.Add(rowParcheggiRow)
            Return rowParcheggiRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As ParcheggiRow
            Return CType(Me.Rows.Find(New Object() {Id}),ParcheggiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ParcheggiDataTable = CType(MyBase.Clone,ParcheggiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ParcheggiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnNome = Me.Columns("Nome")
            Me.columnPosti = Me.Columns("Posti")
            Me.columnPercOccup = Me.Columns("PercOccup")
            Me.columnConnPNV = Me.Columns("ConnPNV")
            Me.columnAutom = Me.Columns("Autom")
            Me.columnNote = Me.Columns("Note")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnPosti = New DataColumn("Posti", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPosti)
            Me.columnPercOccup = New DataColumn("PercOccup", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPercOccup)
            Me.columnConnPNV = New DataColumn("ConnPNV", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConnPNV)
            Me.columnAutom = New DataColumn("Autom", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAutom)
            Me.columnNote = New DataColumn("Note", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNote)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewParcheggiRow() As ParcheggiRow
            Return CType(Me.NewRow,ParcheggiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ParcheggiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ParcheggiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParcheggiRowChangedEvent) Is Nothing) Then
                RaiseEvent ParcheggiRowChanged(Me, New ParcheggiRowChangeEvent(CType(e.Row,ParcheggiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParcheggiRowChangingEvent) Is Nothing) Then
                RaiseEvent ParcheggiRowChanging(Me, New ParcheggiRowChangeEvent(CType(e.Row,ParcheggiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParcheggiRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParcheggiRowDeleted(Me, New ParcheggiRowChangeEvent(CType(e.Row,ParcheggiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParcheggiRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParcheggiRowDeleting(Me, New ParcheggiRowChangeEvent(CType(e.Row,ParcheggiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveParcheggiRow(ByVal row As ParcheggiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ParcheggiRow
        Inherits DataRow
        
        Private tableParcheggi As ParcheggiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableParcheggi = CType(Me.Table,ParcheggiDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableParcheggi.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableParcheggi.IdColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableParcheggi.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParcheggi.NomeColumn) = value
            End Set
        End Property
        
        Public Property Posti As Integer
            Get
                Try 
                    Return CType(Me(Me.tableParcheggi.PostiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParcheggi.PostiColumn) = value
            End Set
        End Property
        
        Public Property PercOccup As Double
            Get
                Try 
                    Return CType(Me(Me.tableParcheggi.PercOccupColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParcheggi.PercOccupColumn) = value
            End Set
        End Property
        
        Public Property ConnPNV As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableParcheggi.ConnPNVColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParcheggi.ConnPNVColumn) = value
            End Set
        End Property
        
        Public Property Autom As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableParcheggi.AutomColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParcheggi.AutomColumn) = value
            End Set
        End Property
        
        Public Property Note As String
            Get
                Try 
                    Return CType(Me(Me.tableParcheggi.NoteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParcheggi.NoteColumn) = value
            End Set
        End Property
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableParcheggi.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableParcheggi.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPostiNull() As Boolean
            Return Me.IsNull(Me.tableParcheggi.PostiColumn)
        End Function
        
        Public Sub SetPostiNull()
            Me(Me.tableParcheggi.PostiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPercOccupNull() As Boolean
            Return Me.IsNull(Me.tableParcheggi.PercOccupColumn)
        End Function
        
        Public Sub SetPercOccupNull()
            Me(Me.tableParcheggi.PercOccupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConnPNVNull() As Boolean
            Return Me.IsNull(Me.tableParcheggi.ConnPNVColumn)
        End Function
        
        Public Sub SetConnPNVNull()
            Me(Me.tableParcheggi.ConnPNVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAutomNull() As Boolean
            Return Me.IsNull(Me.tableParcheggi.AutomColumn)
        End Function
        
        Public Sub SetAutomNull()
            Me(Me.tableParcheggi.AutomColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoteNull() As Boolean
            Return Me.IsNull(Me.tableParcheggi.NoteColumn)
        End Function
        
        Public Sub SetNoteNull()
            Me(Me.tableParcheggi.NoteColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ParcheggiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ParcheggiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ParcheggiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ParcheggiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
