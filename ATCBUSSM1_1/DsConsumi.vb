'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsConsumi
    Inherits DataSet
    
    Private tableConsumi As ConsumiDataTable
    
    Private tableCS_Centri As CS_CentriDataTable
    
    Private tableCS_Gruppi As CS_GruppiDataTable
    
    Private tableCS_Consumi As CS_ConsumiDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Consumi")) Is Nothing) Then
                Me.Tables.Add(New ConsumiDataTable(ds.Tables("Consumi")))
            End If
            If (Not (ds.Tables("CS_Centri")) Is Nothing) Then
                Me.Tables.Add(New CS_CentriDataTable(ds.Tables("CS_Centri")))
            End If
            If (Not (ds.Tables("CS_Gruppi")) Is Nothing) Then
                Me.Tables.Add(New CS_GruppiDataTable(ds.Tables("CS_Gruppi")))
            End If
            If (Not (ds.Tables("CS_Consumi")) Is Nothing) Then
                Me.Tables.Add(New CS_ConsumiDataTable(ds.Tables("CS_Consumi")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Consumi As ConsumiDataTable
        Get
            Return Me.tableConsumi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CS_Centri As CS_CentriDataTable
        Get
            Return Me.tableCS_Centri
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CS_Gruppi As CS_GruppiDataTable
        Get
            Return Me.tableCS_Gruppi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CS_Consumi As CS_ConsumiDataTable
        Get
            Return Me.tableCS_Consumi
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsConsumi = CType(MyBase.Clone,DsConsumi)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Consumi")) Is Nothing) Then
            Me.Tables.Add(New ConsumiDataTable(ds.Tables("Consumi")))
        End If
        If (Not (ds.Tables("CS_Centri")) Is Nothing) Then
            Me.Tables.Add(New CS_CentriDataTable(ds.Tables("CS_Centri")))
        End If
        If (Not (ds.Tables("CS_Gruppi")) Is Nothing) Then
            Me.Tables.Add(New CS_GruppiDataTable(ds.Tables("CS_Gruppi")))
        End If
        If (Not (ds.Tables("CS_Consumi")) Is Nothing) Then
            Me.Tables.Add(New CS_ConsumiDataTable(ds.Tables("CS_Consumi")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableConsumi = CType(Me.Tables("Consumi"),ConsumiDataTable)
        If (Not (Me.tableConsumi) Is Nothing) Then
            Me.tableConsumi.InitVars
        End If
        Me.tableCS_Centri = CType(Me.Tables("CS_Centri"),CS_CentriDataTable)
        If (Not (Me.tableCS_Centri) Is Nothing) Then
            Me.tableCS_Centri.InitVars
        End If
        Me.tableCS_Gruppi = CType(Me.Tables("CS_Gruppi"),CS_GruppiDataTable)
        If (Not (Me.tableCS_Gruppi) Is Nothing) Then
            Me.tableCS_Gruppi.InitVars
        End If
        Me.tableCS_Consumi = CType(Me.Tables("CS_Consumi"),CS_ConsumiDataTable)
        If (Not (Me.tableCS_Consumi) Is Nothing) Then
            Me.tableCS_Consumi.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsConsumi"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsConsumi.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableConsumi = New ConsumiDataTable
        Me.Tables.Add(Me.tableConsumi)
        Me.tableCS_Centri = New CS_CentriDataTable
        Me.Tables.Add(Me.tableCS_Centri)
        Me.tableCS_Gruppi = New CS_GruppiDataTable
        Me.Tables.Add(Me.tableCS_Gruppi)
        Me.tableCS_Consumi = New CS_ConsumiDataTable
        Me.Tables.Add(Me.tableCS_Consumi)
    End Sub
    
    Private Function ShouldSerializeConsumi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCS_Centri() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCS_Gruppi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCS_Consumi() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ConsumiRowChangeEventHandler(ByVal sender As Object, ByVal e As ConsumiRowChangeEvent)
    
    Public Delegate Sub CS_CentriRowChangeEventHandler(ByVal sender As Object, ByVal e As CS_CentriRowChangeEvent)
    
    Public Delegate Sub CS_GruppiRowChangeEventHandler(ByVal sender As Object, ByVal e As CS_GruppiRowChangeEvent)
    
    Public Delegate Sub CS_ConsumiRowChangeEventHandler(ByVal sender As Object, ByVal e As CS_ConsumiRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsumiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdCentroCCS As DataColumn
        
        Private columnIdGruppoCCS As DataColumn
        
        Private columnData As DataColumn
        
        Private columnValore As DataColumn
        
        Private columnDataCreazione As DataColumn
        
        Private columnCentroCS As DataColumn
        
        Private columnGruppoCS As DataColumn
        
        Private columnOrdineC As DataColumn
        
        Private columnOrdineG As DataColumn
        
        Friend Sub New()
            MyBase.New("Consumi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdCentroCCSColumn As DataColumn
            Get
                Return Me.columnIdCentroCCS
            End Get
        End Property
        
        Friend ReadOnly Property IdGruppoCCSColumn As DataColumn
            Get
                Return Me.columnIdGruppoCCS
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property ValoreColumn As DataColumn
            Get
                Return Me.columnValore
            End Get
        End Property
        
        Friend ReadOnly Property DataCreazioneColumn As DataColumn
            Get
                Return Me.columnDataCreazione
            End Get
        End Property
        
        Friend ReadOnly Property CentroCSColumn As DataColumn
            Get
                Return Me.columnCentroCS
            End Get
        End Property
        
        Friend ReadOnly Property GruppoCSColumn As DataColumn
            Get
                Return Me.columnGruppoCS
            End Get
        End Property
        
        Friend ReadOnly Property OrdineCColumn As DataColumn
            Get
                Return Me.columnOrdineC
            End Get
        End Property
        
        Friend ReadOnly Property OrdineGColumn As DataColumn
            Get
                Return Me.columnOrdineG
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ConsumiRow
            Get
                Return CType(Me.Rows(index),ConsumiRow)
            End Get
        End Property
        
        Public Event ConsumiRowChanged As ConsumiRowChangeEventHandler
        
        Public Event ConsumiRowChanging As ConsumiRowChangeEventHandler
        
        Public Event ConsumiRowDeleted As ConsumiRowChangeEventHandler
        
        Public Event ConsumiRowDeleting As ConsumiRowChangeEventHandler
        
        Public Overloads Sub AddConsumiRow(ByVal row As ConsumiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddConsumiRow(ByVal Id As System.Guid, ByVal IdCentroCCS As System.Guid, ByVal IdGruppoCCS As System.Guid, ByVal Data As Date, ByVal Valore As Double, ByVal DataCreazione As Date, ByVal CentroCS As String, ByVal GruppoCS As String, ByVal OrdineC As Integer, ByVal OrdineG As Integer) As ConsumiRow
            Dim rowConsumiRow As ConsumiRow = CType(Me.NewRow,ConsumiRow)
            rowConsumiRow.ItemArray = New Object() {Id, IdCentroCCS, IdGruppoCCS, Data, Valore, DataCreazione, CentroCS, GruppoCS, OrdineC, OrdineG}
            Me.Rows.Add(rowConsumiRow)
            Return rowConsumiRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ConsumiDataTable = CType(MyBase.Clone,ConsumiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ConsumiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdCentroCCS = Me.Columns("IdCentroCCS")
            Me.columnIdGruppoCCS = Me.Columns("IdGruppoCCS")
            Me.columnData = Me.Columns("Data")
            Me.columnValore = Me.Columns("Valore")
            Me.columnDataCreazione = Me.Columns("DataCreazione")
            Me.columnCentroCS = Me.Columns("CentroCS")
            Me.columnGruppoCS = Me.Columns("GruppoCS")
            Me.columnOrdineC = Me.Columns("OrdineC")
            Me.columnOrdineG = Me.Columns("OrdineG")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdCentroCCS = New DataColumn("IdCentroCCS", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdCentroCCS)
            Me.columnIdGruppoCCS = New DataColumn("IdGruppoCCS", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdGruppoCCS)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnValore = New DataColumn("Valore", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValore)
            Me.columnDataCreazione = New DataColumn("DataCreazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataCreazione)
            Me.columnCentroCS = New DataColumn("CentroCS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCentroCS)
            Me.columnGruppoCS = New DataColumn("GruppoCS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGruppoCS)
            Me.columnOrdineC = New DataColumn("OrdineC", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdineC)
            Me.columnOrdineG = New DataColumn("OrdineG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdineG)
            Me.columnId.AllowDBNull = false
        End Sub
        
        Public Function NewConsumiRow() As ConsumiRow
            Return CType(Me.NewRow,ConsumiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ConsumiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ConsumiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ConsumiRowChangedEvent) Is Nothing) Then
                RaiseEvent ConsumiRowChanged(Me, New ConsumiRowChangeEvent(CType(e.Row,ConsumiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ConsumiRowChangingEvent) Is Nothing) Then
                RaiseEvent ConsumiRowChanging(Me, New ConsumiRowChangeEvent(CType(e.Row,ConsumiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ConsumiRowDeletedEvent) Is Nothing) Then
                RaiseEvent ConsumiRowDeleted(Me, New ConsumiRowChangeEvent(CType(e.Row,ConsumiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ConsumiRowDeletingEvent) Is Nothing) Then
                RaiseEvent ConsumiRowDeleting(Me, New ConsumiRowChangeEvent(CType(e.Row,ConsumiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveConsumiRow(ByVal row As ConsumiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsumiRow
        Inherits DataRow
        
        Private tableConsumi As ConsumiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableConsumi = CType(Me.Table,ConsumiDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableConsumi.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableConsumi.IdColumn) = value
            End Set
        End Property
        
        Public Property IdCentroCCS As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.IdCentroCCSColumn),System.Guid)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.IdCentroCCSColumn) = value
            End Set
        End Property
        
        Public Property IdGruppoCCS As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.IdGruppoCCSColumn),System.Guid)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.IdGruppoCCSColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.DataColumn) = value
            End Set
        End Property
        
        Public Property Valore As Double
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.ValoreColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.ValoreColumn) = value
            End Set
        End Property
        
        Public Property DataCreazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.DataCreazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.DataCreazioneColumn) = value
            End Set
        End Property
        
        Public Property CentroCS As String
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.CentroCSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.CentroCSColumn) = value
            End Set
        End Property
        
        Public Property GruppoCS As String
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.GruppoCSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.GruppoCSColumn) = value
            End Set
        End Property
        
        Public Property OrdineC As Integer
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.OrdineCColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.OrdineCColumn) = value
            End Set
        End Property
        
        Public Property OrdineG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableConsumi.OrdineGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsumi.OrdineGColumn) = value
            End Set
        End Property
        
        Public Function IsIdCentroCCSNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.IdCentroCCSColumn)
        End Function
        
        Public Sub SetIdCentroCCSNull()
            Me(Me.tableConsumi.IdCentroCCSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdGruppoCCSNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.IdGruppoCCSColumn)
        End Function
        
        Public Sub SetIdGruppoCCSNull()
            Me(Me.tableConsumi.IdGruppoCCSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableConsumi.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValoreNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.ValoreColumn)
        End Function
        
        Public Sub SetValoreNull()
            Me(Me.tableConsumi.ValoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataCreazioneNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.DataCreazioneColumn)
        End Function
        
        Public Sub SetDataCreazioneNull()
            Me(Me.tableConsumi.DataCreazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCentroCSNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.CentroCSColumn)
        End Function
        
        Public Sub SetCentroCSNull()
            Me(Me.tableConsumi.CentroCSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGruppoCSNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.GruppoCSColumn)
        End Function
        
        Public Sub SetGruppoCSNull()
            Me(Me.tableConsumi.GruppoCSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdineCNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.OrdineCColumn)
        End Function
        
        Public Sub SetOrdineCNull()
            Me(Me.tableConsumi.OrdineCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdineGNull() As Boolean
            Return Me.IsNull(Me.tableConsumi.OrdineGColumn)
        End Function
        
        Public Sub SetOrdineGNull()
            Me(Me.tableConsumi.OrdineGColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsumiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ConsumiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ConsumiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ConsumiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CS_CentriDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdCentroCS As DataColumn
        
        Private columnCentroCS As DataColumn
        
        Private columnOrdineC As DataColumn
        
        Friend Sub New()
            MyBase.New("CS_Centri")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdCentroCSColumn As DataColumn
            Get
                Return Me.columnIdCentroCS
            End Get
        End Property
        
        Friend ReadOnly Property CentroCSColumn As DataColumn
            Get
                Return Me.columnCentroCS
            End Get
        End Property
        
        Friend ReadOnly Property OrdineCColumn As DataColumn
            Get
                Return Me.columnOrdineC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CS_CentriRow
            Get
                Return CType(Me.Rows(index),CS_CentriRow)
            End Get
        End Property
        
        Public Event CS_CentriRowChanged As CS_CentriRowChangeEventHandler
        
        Public Event CS_CentriRowChanging As CS_CentriRowChangeEventHandler
        
        Public Event CS_CentriRowDeleted As CS_CentriRowChangeEventHandler
        
        Public Event CS_CentriRowDeleting As CS_CentriRowChangeEventHandler
        
        Public Overloads Sub AddCS_CentriRow(ByVal row As CS_CentriRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCS_CentriRow(ByVal IdCentroCS As System.Guid, ByVal CentroCS As String, ByVal OrdineC As Integer) As CS_CentriRow
            Dim rowCS_CentriRow As CS_CentriRow = CType(Me.NewRow,CS_CentriRow)
            rowCS_CentriRow.ItemArray = New Object() {IdCentroCS, CentroCS, OrdineC}
            Me.Rows.Add(rowCS_CentriRow)
            Return rowCS_CentriRow
        End Function
        
        Public Function FindByIdCentroCS(ByVal IdCentroCS As System.Guid) As CS_CentriRow
            Return CType(Me.Rows.Find(New Object() {IdCentroCS}),CS_CentriRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CS_CentriDataTable = CType(MyBase.Clone,CS_CentriDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CS_CentriDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdCentroCS = Me.Columns("IdCentroCS")
            Me.columnCentroCS = Me.Columns("CentroCS")
            Me.columnOrdineC = Me.Columns("OrdineC")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdCentroCS = New DataColumn("IdCentroCS", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdCentroCS)
            Me.columnCentroCS = New DataColumn("CentroCS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCentroCS)
            Me.columnOrdineC = New DataColumn("OrdineC", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdineC)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdCentroCS}, true))
            Me.columnIdCentroCS.AllowDBNull = false
            Me.columnIdCentroCS.Unique = true
        End Sub
        
        Public Function NewCS_CentriRow() As CS_CentriRow
            Return CType(Me.NewRow,CS_CentriRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CS_CentriRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CS_CentriRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CS_CentriRowChangedEvent) Is Nothing) Then
                RaiseEvent CS_CentriRowChanged(Me, New CS_CentriRowChangeEvent(CType(e.Row,CS_CentriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CS_CentriRowChangingEvent) Is Nothing) Then
                RaiseEvent CS_CentriRowChanging(Me, New CS_CentriRowChangeEvent(CType(e.Row,CS_CentriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CS_CentriRowDeletedEvent) Is Nothing) Then
                RaiseEvent CS_CentriRowDeleted(Me, New CS_CentriRowChangeEvent(CType(e.Row,CS_CentriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CS_CentriRowDeletingEvent) Is Nothing) Then
                RaiseEvent CS_CentriRowDeleting(Me, New CS_CentriRowChangeEvent(CType(e.Row,CS_CentriRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCS_CentriRow(ByVal row As CS_CentriRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CS_CentriRow
        Inherits DataRow
        
        Private tableCS_Centri As CS_CentriDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCS_Centri = CType(Me.Table,CS_CentriDataTable)
        End Sub
        
        Public Property IdCentroCS As System.Guid
            Get
                Return CType(Me(Me.tableCS_Centri.IdCentroCSColumn),System.Guid)
            End Get
            Set
                Me(Me.tableCS_Centri.IdCentroCSColumn) = value
            End Set
        End Property
        
        Public Property CentroCS As String
            Get
                Try 
                    Return CType(Me(Me.tableCS_Centri.CentroCSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS_Centri.CentroCSColumn) = value
            End Set
        End Property
        
        Public Property OrdineC As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCS_Centri.OrdineCColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS_Centri.OrdineCColumn) = value
            End Set
        End Property
        
        Public Function IsCentroCSNull() As Boolean
            Return Me.IsNull(Me.tableCS_Centri.CentroCSColumn)
        End Function
        
        Public Sub SetCentroCSNull()
            Me(Me.tableCS_Centri.CentroCSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdineCNull() As Boolean
            Return Me.IsNull(Me.tableCS_Centri.OrdineCColumn)
        End Function
        
        Public Sub SetOrdineCNull()
            Me(Me.tableCS_Centri.OrdineCColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CS_CentriRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CS_CentriRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CS_CentriRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CS_CentriRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CS_GruppiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdGruppoCS As DataColumn
        
        Private columnGruppoCS As DataColumn
        
        Private columnOrdineG As DataColumn
        
        Friend Sub New()
            MyBase.New("CS_Gruppi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdGruppoCSColumn As DataColumn
            Get
                Return Me.columnIdGruppoCS
            End Get
        End Property
        
        Friend ReadOnly Property GruppoCSColumn As DataColumn
            Get
                Return Me.columnGruppoCS
            End Get
        End Property
        
        Friend ReadOnly Property OrdineGColumn As DataColumn
            Get
                Return Me.columnOrdineG
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CS_GruppiRow
            Get
                Return CType(Me.Rows(index),CS_GruppiRow)
            End Get
        End Property
        
        Public Event CS_GruppiRowChanged As CS_GruppiRowChangeEventHandler
        
        Public Event CS_GruppiRowChanging As CS_GruppiRowChangeEventHandler
        
        Public Event CS_GruppiRowDeleted As CS_GruppiRowChangeEventHandler
        
        Public Event CS_GruppiRowDeleting As CS_GruppiRowChangeEventHandler
        
        Public Overloads Sub AddCS_GruppiRow(ByVal row As CS_GruppiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCS_GruppiRow(ByVal IdGruppoCS As System.Guid, ByVal GruppoCS As String, ByVal OrdineG As Integer) As CS_GruppiRow
            Dim rowCS_GruppiRow As CS_GruppiRow = CType(Me.NewRow,CS_GruppiRow)
            rowCS_GruppiRow.ItemArray = New Object() {IdGruppoCS, GruppoCS, OrdineG}
            Me.Rows.Add(rowCS_GruppiRow)
            Return rowCS_GruppiRow
        End Function
        
        Public Function FindByIdGruppoCS(ByVal IdGruppoCS As System.Guid) As CS_GruppiRow
            Return CType(Me.Rows.Find(New Object() {IdGruppoCS}),CS_GruppiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CS_GruppiDataTable = CType(MyBase.Clone,CS_GruppiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CS_GruppiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdGruppoCS = Me.Columns("IdGruppoCS")
            Me.columnGruppoCS = Me.Columns("GruppoCS")
            Me.columnOrdineG = Me.Columns("OrdineG")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdGruppoCS = New DataColumn("IdGruppoCS", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdGruppoCS)
            Me.columnGruppoCS = New DataColumn("GruppoCS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGruppoCS)
            Me.columnOrdineG = New DataColumn("OrdineG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdineG)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdGruppoCS}, true))
            Me.columnIdGruppoCS.AllowDBNull = false
            Me.columnIdGruppoCS.Unique = true
        End Sub
        
        Public Function NewCS_GruppiRow() As CS_GruppiRow
            Return CType(Me.NewRow,CS_GruppiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CS_GruppiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CS_GruppiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CS_GruppiRowChangedEvent) Is Nothing) Then
                RaiseEvent CS_GruppiRowChanged(Me, New CS_GruppiRowChangeEvent(CType(e.Row,CS_GruppiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CS_GruppiRowChangingEvent) Is Nothing) Then
                RaiseEvent CS_GruppiRowChanging(Me, New CS_GruppiRowChangeEvent(CType(e.Row,CS_GruppiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CS_GruppiRowDeletedEvent) Is Nothing) Then
                RaiseEvent CS_GruppiRowDeleted(Me, New CS_GruppiRowChangeEvent(CType(e.Row,CS_GruppiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CS_GruppiRowDeletingEvent) Is Nothing) Then
                RaiseEvent CS_GruppiRowDeleting(Me, New CS_GruppiRowChangeEvent(CType(e.Row,CS_GruppiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCS_GruppiRow(ByVal row As CS_GruppiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CS_GruppiRow
        Inherits DataRow
        
        Private tableCS_Gruppi As CS_GruppiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCS_Gruppi = CType(Me.Table,CS_GruppiDataTable)
        End Sub
        
        Public Property IdGruppoCS As System.Guid
            Get
                Return CType(Me(Me.tableCS_Gruppi.IdGruppoCSColumn),System.Guid)
            End Get
            Set
                Me(Me.tableCS_Gruppi.IdGruppoCSColumn) = value
            End Set
        End Property
        
        Public Property GruppoCS As String
            Get
                Try 
                    Return CType(Me(Me.tableCS_Gruppi.GruppoCSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS_Gruppi.GruppoCSColumn) = value
            End Set
        End Property
        
        Public Property OrdineG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCS_Gruppi.OrdineGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS_Gruppi.OrdineGColumn) = value
            End Set
        End Property
        
        Public Function IsGruppoCSNull() As Boolean
            Return Me.IsNull(Me.tableCS_Gruppi.GruppoCSColumn)
        End Function
        
        Public Sub SetGruppoCSNull()
            Me(Me.tableCS_Gruppi.GruppoCSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdineGNull() As Boolean
            Return Me.IsNull(Me.tableCS_Gruppi.OrdineGColumn)
        End Function
        
        Public Sub SetOrdineGNull()
            Me(Me.tableCS_Gruppi.OrdineGColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CS_GruppiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CS_GruppiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CS_GruppiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CS_GruppiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CS_ConsumiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdCentroCCS As DataColumn
        
        Private columnIdGruppoCCS As DataColumn
        
        Private columnData As DataColumn
        
        Private columnValore As DataColumn
        
        Private columnDataCreazione As DataColumn
        
        Friend Sub New()
            MyBase.New("CS_Consumi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdCentroCCSColumn As DataColumn
            Get
                Return Me.columnIdCentroCCS
            End Get
        End Property
        
        Friend ReadOnly Property IdGruppoCCSColumn As DataColumn
            Get
                Return Me.columnIdGruppoCCS
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property ValoreColumn As DataColumn
            Get
                Return Me.columnValore
            End Get
        End Property
        
        Friend ReadOnly Property DataCreazioneColumn As DataColumn
            Get
                Return Me.columnDataCreazione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CS_ConsumiRow
            Get
                Return CType(Me.Rows(index),CS_ConsumiRow)
            End Get
        End Property
        
        Public Event CS_ConsumiRowChanged As CS_ConsumiRowChangeEventHandler
        
        Public Event CS_ConsumiRowChanging As CS_ConsumiRowChangeEventHandler
        
        Public Event CS_ConsumiRowDeleted As CS_ConsumiRowChangeEventHandler
        
        Public Event CS_ConsumiRowDeleting As CS_ConsumiRowChangeEventHandler
        
        Public Overloads Sub AddCS_ConsumiRow(ByVal row As CS_ConsumiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCS_ConsumiRow(ByVal Id As System.Guid, ByVal IdCentroCCS As System.Guid, ByVal IdGruppoCCS As System.Guid, ByVal Data As Date, ByVal Valore As Double, ByVal DataCreazione As Date) As CS_ConsumiRow
            Dim rowCS_ConsumiRow As CS_ConsumiRow = CType(Me.NewRow,CS_ConsumiRow)
            rowCS_ConsumiRow.ItemArray = New Object() {Id, IdCentroCCS, IdGruppoCCS, Data, Valore, DataCreazione}
            Me.Rows.Add(rowCS_ConsumiRow)
            Return rowCS_ConsumiRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As CS_ConsumiRow
            Return CType(Me.Rows.Find(New Object() {Id}),CS_ConsumiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CS_ConsumiDataTable = CType(MyBase.Clone,CS_ConsumiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CS_ConsumiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdCentroCCS = Me.Columns("IdCentroCCS")
            Me.columnIdGruppoCCS = Me.Columns("IdGruppoCCS")
            Me.columnData = Me.Columns("Data")
            Me.columnValore = Me.Columns("Valore")
            Me.columnDataCreazione = Me.Columns("DataCreazione")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdCentroCCS = New DataColumn("IdCentroCCS", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdCentroCCS)
            Me.columnIdGruppoCCS = New DataColumn("IdGruppoCCS", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdGruppoCCS)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnValore = New DataColumn("Valore", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValore)
            Me.columnDataCreazione = New DataColumn("DataCreazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataCreazione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewCS_ConsumiRow() As CS_ConsumiRow
            Return CType(Me.NewRow,CS_ConsumiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CS_ConsumiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CS_ConsumiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CS_ConsumiRowChangedEvent) Is Nothing) Then
                RaiseEvent CS_ConsumiRowChanged(Me, New CS_ConsumiRowChangeEvent(CType(e.Row,CS_ConsumiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CS_ConsumiRowChangingEvent) Is Nothing) Then
                RaiseEvent CS_ConsumiRowChanging(Me, New CS_ConsumiRowChangeEvent(CType(e.Row,CS_ConsumiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CS_ConsumiRowDeletedEvent) Is Nothing) Then
                RaiseEvent CS_ConsumiRowDeleted(Me, New CS_ConsumiRowChangeEvent(CType(e.Row,CS_ConsumiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CS_ConsumiRowDeletingEvent) Is Nothing) Then
                RaiseEvent CS_ConsumiRowDeleting(Me, New CS_ConsumiRowChangeEvent(CType(e.Row,CS_ConsumiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCS_ConsumiRow(ByVal row As CS_ConsumiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CS_ConsumiRow
        Inherits DataRow
        
        Private tableCS_Consumi As CS_ConsumiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCS_Consumi = CType(Me.Table,CS_ConsumiDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableCS_Consumi.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableCS_Consumi.IdColumn) = value
            End Set
        End Property
        
        Public Property IdCentroCCS As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableCS_Consumi.IdCentroCCSColumn),System.Guid)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS_Consumi.IdCentroCCSColumn) = value
            End Set
        End Property
        
        Public Property IdGruppoCCS As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableCS_Consumi.IdGruppoCCSColumn),System.Guid)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS_Consumi.IdGruppoCCSColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableCS_Consumi.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS_Consumi.DataColumn) = value
            End Set
        End Property
        
        Public Property Valore As Double
            Get
                Try 
                    Return CType(Me(Me.tableCS_Consumi.ValoreColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS_Consumi.ValoreColumn) = value
            End Set
        End Property
        
        Public Property DataCreazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableCS_Consumi.DataCreazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCS_Consumi.DataCreazioneColumn) = value
            End Set
        End Property
        
        Public Function IsIdCentroCCSNull() As Boolean
            Return Me.IsNull(Me.tableCS_Consumi.IdCentroCCSColumn)
        End Function
        
        Public Sub SetIdCentroCCSNull()
            Me(Me.tableCS_Consumi.IdCentroCCSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdGruppoCCSNull() As Boolean
            Return Me.IsNull(Me.tableCS_Consumi.IdGruppoCCSColumn)
        End Function
        
        Public Sub SetIdGruppoCCSNull()
            Me(Me.tableCS_Consumi.IdGruppoCCSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableCS_Consumi.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableCS_Consumi.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValoreNull() As Boolean
            Return Me.IsNull(Me.tableCS_Consumi.ValoreColumn)
        End Function
        
        Public Sub SetValoreNull()
            Me(Me.tableCS_Consumi.ValoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataCreazioneNull() As Boolean
            Return Me.IsNull(Me.tableCS_Consumi.DataCreazioneColumn)
        End Function
        
        Public Sub SetDataCreazioneNull()
            Me(Me.tableCS_Consumi.DataCreazioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CS_ConsumiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CS_ConsumiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CS_ConsumiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CS_ConsumiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
