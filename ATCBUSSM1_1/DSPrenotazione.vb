'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2503
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSPrenotazione
    Inherits DataSet
    
    Private tableAccertatori_PrenotazioneIntervalli As Accertatori_PrenotazioneIntervalliDataTable
    
    Private tableAccertatori_PrenotazioniPeriodo As Accertatori_PrenotazioniPeriodoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Accertatori_PrenotazioneIntervalli")) Is Nothing) Then
                Me.Tables.Add(New Accertatori_PrenotazioneIntervalliDataTable(ds.Tables("Accertatori_PrenotazioneIntervalli")))
            End If
            If (Not (ds.Tables("Accertatori_PrenotazioniPeriodo")) Is Nothing) Then
                Me.Tables.Add(New Accertatori_PrenotazioniPeriodoDataTable(ds.Tables("Accertatori_PrenotazioniPeriodo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accertatori_PrenotazioneIntervalli As Accertatori_PrenotazioneIntervalliDataTable
        Get
            Return Me.tableAccertatori_PrenotazioneIntervalli
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accertatori_PrenotazioniPeriodo As Accertatori_PrenotazioniPeriodoDataTable
        Get
            Return Me.tableAccertatori_PrenotazioniPeriodo
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSPrenotazione = CType(MyBase.Clone,DSPrenotazione)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Accertatori_PrenotazioneIntervalli")) Is Nothing) Then
            Me.Tables.Add(New Accertatori_PrenotazioneIntervalliDataTable(ds.Tables("Accertatori_PrenotazioneIntervalli")))
        End If
        If (Not (ds.Tables("Accertatori_PrenotazioniPeriodo")) Is Nothing) Then
            Me.Tables.Add(New Accertatori_PrenotazioniPeriodoDataTable(ds.Tables("Accertatori_PrenotazioniPeriodo")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAccertatori_PrenotazioneIntervalli = CType(Me.Tables("Accertatori_PrenotazioneIntervalli"),Accertatori_PrenotazioneIntervalliDataTable)
        If (Not (Me.tableAccertatori_PrenotazioneIntervalli) Is Nothing) Then
            Me.tableAccertatori_PrenotazioneIntervalli.InitVars
        End If
        Me.tableAccertatori_PrenotazioniPeriodo = CType(Me.Tables("Accertatori_PrenotazioniPeriodo"),Accertatori_PrenotazioniPeriodoDataTable)
        If (Not (Me.tableAccertatori_PrenotazioniPeriodo) Is Nothing) Then
            Me.tableAccertatori_PrenotazioniPeriodo.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSPrenotazione"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSPrenotazione.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAccertatori_PrenotazioneIntervalli = New Accertatori_PrenotazioneIntervalliDataTable
        Me.Tables.Add(Me.tableAccertatori_PrenotazioneIntervalli)
        Me.tableAccertatori_PrenotazioniPeriodo = New Accertatori_PrenotazioniPeriodoDataTable
        Me.Tables.Add(Me.tableAccertatori_PrenotazioniPeriodo)
    End Sub
    
    Private Function ShouldSerializeAccertatori_PrenotazioneIntervalli() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccertatori_PrenotazioniPeriodo() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Accertatori_PrenotazioneIntervalliRowChangeEventHandler(ByVal sender As Object, ByVal e As Accertatori_PrenotazioneIntervalliRowChangeEvent)
    
    Public Delegate Sub Accertatori_PrenotazioniPeriodoRowChangeEventHandler(ByVal sender As Object, ByVal e As Accertatori_PrenotazioniPeriodoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_PrenotazioneIntervalliDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnNome As DataColumn
        
        Private columnAccertatori_PrenotazioniPeriodoId As DataColumn
        
        Private columnIntervalloDa As DataColumn
        
        Private columnIntervalloA As DataColumn
        
        Private columnMaxPrenotazione As DataColumn
        
        Private columnModifiedOn As DataColumn
        
        Private columnCreatedBy As DataColumn
        
        Private columnModifiedBy As DataColumn
        
        Private columnNumPrenotati As DataColumn
        
        Private columnNumDisponibilita As DataColumn
        
        Private columnUltimaPrenotazione As DataColumn
        
        Friend Sub New()
            MyBase.New("Accertatori_PrenotazioneIntervalli")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property Accertatori_PrenotazioniPeriodoIdColumn As DataColumn
            Get
                Return Me.columnAccertatori_PrenotazioniPeriodoId
            End Get
        End Property
        
        Friend ReadOnly Property IntervalloDaColumn As DataColumn
            Get
                Return Me.columnIntervalloDa
            End Get
        End Property
        
        Friend ReadOnly Property IntervalloAColumn As DataColumn
            Get
                Return Me.columnIntervalloA
            End Get
        End Property
        
        Friend ReadOnly Property MaxPrenotazioneColumn As DataColumn
            Get
                Return Me.columnMaxPrenotazione
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedOnColumn As DataColumn
            Get
                Return Me.columnModifiedOn
            End Get
        End Property
        
        Friend ReadOnly Property CreatedByColumn As DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedByColumn As DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        Friend ReadOnly Property NumPrenotatiColumn As DataColumn
            Get
                Return Me.columnNumPrenotati
            End Get
        End Property
        
        Friend ReadOnly Property NumDisponibilitaColumn As DataColumn
            Get
                Return Me.columnNumDisponibilita
            End Get
        End Property
        
        Friend ReadOnly Property UltimaPrenotazioneColumn As DataColumn
            Get
                Return Me.columnUltimaPrenotazione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Accertatori_PrenotazioneIntervalliRow
            Get
                Return CType(Me.Rows(index),Accertatori_PrenotazioneIntervalliRow)
            End Get
        End Property
        
        Public Event Accertatori_PrenotazioneIntervalliRowChanged As Accertatori_PrenotazioneIntervalliRowChangeEventHandler
        
        Public Event Accertatori_PrenotazioneIntervalliRowChanging As Accertatori_PrenotazioneIntervalliRowChangeEventHandler
        
        Public Event Accertatori_PrenotazioneIntervalliRowDeleted As Accertatori_PrenotazioneIntervalliRowChangeEventHandler
        
        Public Event Accertatori_PrenotazioneIntervalliRowDeleting As Accertatori_PrenotazioneIntervalliRowChangeEventHandler
        
        Public Overloads Sub AddAccertatori_PrenotazioneIntervalliRow(ByVal row As Accertatori_PrenotazioneIntervalliRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatori_PrenotazioneIntervalliRow(ByVal ID As System.Guid, ByVal Nome As String, ByVal Accertatori_PrenotazioniPeriodoId As System.Guid, ByVal IntervalloDa As Date, ByVal IntervalloA As Date, ByVal MaxPrenotazione As Integer, ByVal ModifiedOn As Date, ByVal CreatedBy As String, ByVal ModifiedBy As String, ByVal NumPrenotati As Integer, ByVal NumDisponibilita As Integer, ByVal UltimaPrenotazione As Date) As Accertatori_PrenotazioneIntervalliRow
            Dim rowAccertatori_PrenotazioneIntervalliRow As Accertatori_PrenotazioneIntervalliRow = CType(Me.NewRow,Accertatori_PrenotazioneIntervalliRow)
            rowAccertatori_PrenotazioneIntervalliRow.ItemArray = New Object() {ID, Nome, Accertatori_PrenotazioniPeriodoId, IntervalloDa, IntervalloA, MaxPrenotazione, ModifiedOn, CreatedBy, ModifiedBy, NumPrenotati, NumDisponibilita, UltimaPrenotazione}
            Me.Rows.Add(rowAccertatori_PrenotazioneIntervalliRow)
            Return rowAccertatori_PrenotazioneIntervalliRow
        End Function
        
        Public Function FindByID(ByVal ID As System.Guid) As Accertatori_PrenotazioneIntervalliRow
            Return CType(Me.Rows.Find(New Object() {ID}),Accertatori_PrenotazioneIntervalliRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Accertatori_PrenotazioneIntervalliDataTable = CType(MyBase.Clone,Accertatori_PrenotazioneIntervalliDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Accertatori_PrenotazioneIntervalliDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnNome = Me.Columns("Nome")
            Me.columnAccertatori_PrenotazioniPeriodoId = Me.Columns("Accertatori_PrenotazioniPeriodoId")
            Me.columnIntervalloDa = Me.Columns("IntervalloDa")
            Me.columnIntervalloA = Me.Columns("IntervalloA")
            Me.columnMaxPrenotazione = Me.Columns("MaxPrenotazione")
            Me.columnModifiedOn = Me.Columns("ModifiedOn")
            Me.columnCreatedBy = Me.Columns("CreatedBy")
            Me.columnModifiedBy = Me.Columns("ModifiedBy")
            Me.columnNumPrenotati = Me.Columns("NumPrenotati")
            Me.columnNumDisponibilita = Me.Columns("NumDisponibilita")
            Me.columnUltimaPrenotazione = Me.Columns("UltimaPrenotazione")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnAccertatori_PrenotazioniPeriodoId = New DataColumn("Accertatori_PrenotazioniPeriodoId", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccertatori_PrenotazioniPeriodoId)
            Me.columnIntervalloDa = New DataColumn("IntervalloDa", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIntervalloDa)
            Me.columnIntervalloA = New DataColumn("IntervalloA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIntervalloA)
            Me.columnMaxPrenotazione = New DataColumn("MaxPrenotazione", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxPrenotazione)
            Me.columnModifiedOn = New DataColumn("ModifiedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedOn)
            Me.columnCreatedBy = New DataColumn("CreatedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedBy)
            Me.columnModifiedBy = New DataColumn("ModifiedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedBy)
            Me.columnNumPrenotati = New DataColumn("NumPrenotati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumPrenotati)
            Me.columnNumDisponibilita = New DataColumn("NumDisponibilita", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumDisponibilita)
            Me.columnUltimaPrenotazione = New DataColumn("UltimaPrenotazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUltimaPrenotazione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        Public Function NewAccertatori_PrenotazioneIntervalliRow() As Accertatori_PrenotazioneIntervalliRow
            Return CType(Me.NewRow,Accertatori_PrenotazioneIntervalliRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Accertatori_PrenotazioneIntervalliRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Accertatori_PrenotazioneIntervalliRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Accertatori_PrenotazioneIntervalliRowChangedEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioneIntervalliRowChanged(Me, New Accertatori_PrenotazioneIntervalliRowChangeEvent(CType(e.Row,Accertatori_PrenotazioneIntervalliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Accertatori_PrenotazioneIntervalliRowChangingEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioneIntervalliRowChanging(Me, New Accertatori_PrenotazioneIntervalliRowChangeEvent(CType(e.Row,Accertatori_PrenotazioneIntervalliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Accertatori_PrenotazioneIntervalliRowDeletedEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioneIntervalliRowDeleted(Me, New Accertatori_PrenotazioneIntervalliRowChangeEvent(CType(e.Row,Accertatori_PrenotazioneIntervalliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Accertatori_PrenotazioneIntervalliRowDeletingEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioneIntervalliRowDeleting(Me, New Accertatori_PrenotazioneIntervalliRowChangeEvent(CType(e.Row,Accertatori_PrenotazioneIntervalliRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatori_PrenotazioneIntervalliRow(ByVal row As Accertatori_PrenotazioneIntervalliRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_PrenotazioneIntervalliRow
        Inherits DataRow
        
        Private tableAccertatori_PrenotazioneIntervalli As Accertatori_PrenotazioneIntervalliDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatori_PrenotazioneIntervalli = CType(Me.Table,Accertatori_PrenotazioneIntervalliDataTable)
        End Sub
        
        Public Property ID As System.Guid
            Get
                Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalli.IDColumn),System.Guid)
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalli.IDColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalli.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalli.NomeColumn) = value
            End Set
        End Property
        
        Public Property Accertatori_PrenotazioniPeriodoId As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalli.Accertatori_PrenotazioniPeriodoIdColumn),System.Guid)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalli.Accertatori_PrenotazioniPeriodoIdColumn) = value
            End Set
        End Property
        
        Public Property IntervalloDa As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalli.IntervalloDaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalli.IntervalloDaColumn) = value
            End Set
        End Property
        
        Public Property IntervalloA As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalli.IntervalloAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalli.IntervalloAColumn) = value
            End Set
        End Property
        
        Public Property MaxPrenotazione As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalli.MaxPrenotazioneColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalli.MaxPrenotazioneColumn) = value
            End Set
        End Property
        
        Public Property ModifiedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalli.ModifiedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalli.ModifiedOnColumn) = value
            End Set
        End Property
        
        Public Property CreatedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalli.CreatedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalli.CreatedByColumn) = value
            End Set
        End Property
        
        Public Property ModifiedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalli.ModifiedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalli.ModifiedByColumn) = value
            End Set
        End Property
        
        Public Property NumPrenotati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalli.NumPrenotatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalli.NumPrenotatiColumn) = value
            End Set
        End Property
        
        Public Property NumDisponibilita As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalli.NumDisponibilitaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalli.NumDisponibilitaColumn) = value
            End Set
        End Property
        
        Public Property UltimaPrenotazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioneIntervalli.UltimaPrenotazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioneIntervalli.UltimaPrenotazioneColumn) = value
            End Set
        End Property
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalli.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalli.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAccertatori_PrenotazioniPeriodoIdNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalli.Accertatori_PrenotazioniPeriodoIdColumn)
        End Function
        
        Public Sub SetAccertatori_PrenotazioniPeriodoIdNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalli.Accertatori_PrenotazioniPeriodoIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIntervalloDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalli.IntervalloDaColumn)
        End Function
        
        Public Sub SetIntervalloDaNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalli.IntervalloDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIntervalloANull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalli.IntervalloAColumn)
        End Function
        
        Public Sub SetIntervalloANull()
            Me(Me.tableAccertatori_PrenotazioneIntervalli.IntervalloAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxPrenotazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalli.MaxPrenotazioneColumn)
        End Function
        
        Public Sub SetMaxPrenotazioneNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalli.MaxPrenotazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalli.ModifiedOnColumn)
        End Function
        
        Public Sub SetModifiedOnNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalli.ModifiedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalli.CreatedByColumn)
        End Function
        
        Public Sub SetCreatedByNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalli.CreatedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalli.ModifiedByColumn)
        End Function
        
        Public Sub SetModifiedByNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalli.ModifiedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNumPrenotatiNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalli.NumPrenotatiColumn)
        End Function
        
        Public Sub SetNumPrenotatiNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalli.NumPrenotatiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNumDisponibilitaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalli.NumDisponibilitaColumn)
        End Function
        
        Public Sub SetNumDisponibilitaNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalli.NumDisponibilitaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUltimaPrenotazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioneIntervalli.UltimaPrenotazioneColumn)
        End Function
        
        Public Sub SetUltimaPrenotazioneNull()
            Me(Me.tableAccertatori_PrenotazioneIntervalli.UltimaPrenotazioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_PrenotazioneIntervalliRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Accertatori_PrenotazioneIntervalliRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Accertatori_PrenotazioneIntervalliRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Accertatori_PrenotazioneIntervalliRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_PrenotazioniPeriodoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnNome As DataColumn
        
        Private columnPubblicato As DataColumn
        
        Private columnPrenotabileDa As DataColumn
        
        Private columnPrenotabileDaOra As DataColumn
        
        Private columnPrenotabileDaMinuti As DataColumn
        
        Private columnPrenotabileA As DataColumn
        
        Private columnPeriodoDa As DataColumn
        
        Private columnPeriodoA As DataColumn
        
        Private columnNumMaxIntervalli As DataColumn
        
        Private columnModifiedOn As DataColumn
        
        Private columnCreatedBy As DataColumn
        
        Private columnModifiedBy As DataColumn
        
        Friend Sub New()
            MyBase.New("Accertatori_PrenotazioniPeriodo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property PubblicatoColumn As DataColumn
            Get
                Return Me.columnPubblicato
            End Get
        End Property
        
        Friend ReadOnly Property PrenotabileDaColumn As DataColumn
            Get
                Return Me.columnPrenotabileDa
            End Get
        End Property
        
        Friend ReadOnly Property PrenotabileDaOraColumn As DataColumn
            Get
                Return Me.columnPrenotabileDaOra
            End Get
        End Property
        
        Friend ReadOnly Property PrenotabileDaMinutiColumn As DataColumn
            Get
                Return Me.columnPrenotabileDaMinuti
            End Get
        End Property
        
        Friend ReadOnly Property PrenotabileAColumn As DataColumn
            Get
                Return Me.columnPrenotabileA
            End Get
        End Property
        
        Friend ReadOnly Property PeriodoDaColumn As DataColumn
            Get
                Return Me.columnPeriodoDa
            End Get
        End Property
        
        Friend ReadOnly Property PeriodoAColumn As DataColumn
            Get
                Return Me.columnPeriodoA
            End Get
        End Property
        
        Friend ReadOnly Property NumMaxIntervalliColumn As DataColumn
            Get
                Return Me.columnNumMaxIntervalli
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedOnColumn As DataColumn
            Get
                Return Me.columnModifiedOn
            End Get
        End Property
        
        Friend ReadOnly Property CreatedByColumn As DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedByColumn As DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Accertatori_PrenotazioniPeriodoRow
            Get
                Return CType(Me.Rows(index),Accertatori_PrenotazioniPeriodoRow)
            End Get
        End Property
        
        Public Event Accertatori_PrenotazioniPeriodoRowChanged As Accertatori_PrenotazioniPeriodoRowChangeEventHandler
        
        Public Event Accertatori_PrenotazioniPeriodoRowChanging As Accertatori_PrenotazioniPeriodoRowChangeEventHandler
        
        Public Event Accertatori_PrenotazioniPeriodoRowDeleted As Accertatori_PrenotazioniPeriodoRowChangeEventHandler
        
        Public Event Accertatori_PrenotazioniPeriodoRowDeleting As Accertatori_PrenotazioniPeriodoRowChangeEventHandler
        
        Public Overloads Sub AddAccertatori_PrenotazioniPeriodoRow(ByVal row As Accertatori_PrenotazioniPeriodoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatori_PrenotazioniPeriodoRow(ByVal ID As System.Guid, ByVal Nome As String, ByVal Pubblicato As Boolean, ByVal PrenotabileDa As Date, ByVal PrenotabileDaOra As Integer, ByVal PrenotabileDaMinuti As Integer, ByVal PrenotabileA As Date, ByVal PeriodoDa As Date, ByVal PeriodoA As Date, ByVal NumMaxIntervalli As Integer, ByVal ModifiedOn As Date, ByVal CreatedBy As String, ByVal ModifiedBy As String) As Accertatori_PrenotazioniPeriodoRow
            Dim rowAccertatori_PrenotazioniPeriodoRow As Accertatori_PrenotazioniPeriodoRow = CType(Me.NewRow,Accertatori_PrenotazioniPeriodoRow)
            rowAccertatori_PrenotazioniPeriodoRow.ItemArray = New Object() {ID, Nome, Pubblicato, PrenotabileDa, PrenotabileDaOra, PrenotabileDaMinuti, PrenotabileA, PeriodoDa, PeriodoA, NumMaxIntervalli, ModifiedOn, CreatedBy, ModifiedBy}
            Me.Rows.Add(rowAccertatori_PrenotazioniPeriodoRow)
            Return rowAccertatori_PrenotazioniPeriodoRow
        End Function
        
        Public Function FindByID(ByVal ID As System.Guid) As Accertatori_PrenotazioniPeriodoRow
            Return CType(Me.Rows.Find(New Object() {ID}),Accertatori_PrenotazioniPeriodoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Accertatori_PrenotazioniPeriodoDataTable = CType(MyBase.Clone,Accertatori_PrenotazioniPeriodoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Accertatori_PrenotazioniPeriodoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnNome = Me.Columns("Nome")
            Me.columnPubblicato = Me.Columns("Pubblicato")
            Me.columnPrenotabileDa = Me.Columns("PrenotabileDa")
            Me.columnPrenotabileDaOra = Me.Columns("PrenotabileDaOra")
            Me.columnPrenotabileDaMinuti = Me.Columns("PrenotabileDaMinuti")
            Me.columnPrenotabileA = Me.Columns("PrenotabileA")
            Me.columnPeriodoDa = Me.Columns("PeriodoDa")
            Me.columnPeriodoA = Me.Columns("PeriodoA")
            Me.columnNumMaxIntervalli = Me.Columns("NumMaxIntervalli")
            Me.columnModifiedOn = Me.Columns("ModifiedOn")
            Me.columnCreatedBy = Me.Columns("CreatedBy")
            Me.columnModifiedBy = Me.Columns("ModifiedBy")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnPubblicato = New DataColumn("Pubblicato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPubblicato)
            Me.columnPrenotabileDa = New DataColumn("PrenotabileDa", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrenotabileDa)
            Me.columnPrenotabileDaOra = New DataColumn("PrenotabileDaOra", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrenotabileDaOra)
            Me.columnPrenotabileDaMinuti = New DataColumn("PrenotabileDaMinuti", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrenotabileDaMinuti)
            Me.columnPrenotabileA = New DataColumn("PrenotabileA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrenotabileA)
            Me.columnPeriodoDa = New DataColumn("PeriodoDa", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeriodoDa)
            Me.columnPeriodoA = New DataColumn("PeriodoA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeriodoA)
            Me.columnNumMaxIntervalli = New DataColumn("NumMaxIntervalli", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumMaxIntervalli)
            Me.columnModifiedOn = New DataColumn("ModifiedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedOn)
            Me.columnCreatedBy = New DataColumn("CreatedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedBy)
            Me.columnModifiedBy = New DataColumn("ModifiedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedBy)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        Public Function NewAccertatori_PrenotazioniPeriodoRow() As Accertatori_PrenotazioniPeriodoRow
            Return CType(Me.NewRow,Accertatori_PrenotazioniPeriodoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Accertatori_PrenotazioniPeriodoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Accertatori_PrenotazioniPeriodoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Accertatori_PrenotazioniPeriodoRowChangedEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioniPeriodoRowChanged(Me, New Accertatori_PrenotazioniPeriodoRowChangeEvent(CType(e.Row,Accertatori_PrenotazioniPeriodoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Accertatori_PrenotazioniPeriodoRowChangingEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioniPeriodoRowChanging(Me, New Accertatori_PrenotazioniPeriodoRowChangeEvent(CType(e.Row,Accertatori_PrenotazioniPeriodoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Accertatori_PrenotazioniPeriodoRowDeletedEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioniPeriodoRowDeleted(Me, New Accertatori_PrenotazioniPeriodoRowChangeEvent(CType(e.Row,Accertatori_PrenotazioniPeriodoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Accertatori_PrenotazioniPeriodoRowDeletingEvent) Is Nothing) Then
                RaiseEvent Accertatori_PrenotazioniPeriodoRowDeleting(Me, New Accertatori_PrenotazioniPeriodoRowChangeEvent(CType(e.Row,Accertatori_PrenotazioniPeriodoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatori_PrenotazioniPeriodoRow(ByVal row As Accertatori_PrenotazioniPeriodoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_PrenotazioniPeriodoRow
        Inherits DataRow
        
        Private tableAccertatori_PrenotazioniPeriodo As Accertatori_PrenotazioniPeriodoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatori_PrenotazioniPeriodo = CType(Me.Table,Accertatori_PrenotazioniPeriodoDataTable)
        End Sub
        
        Public Property ID As System.Guid
            Get
                Return CType(Me(Me.tableAccertatori_PrenotazioniPeriodo.IDColumn),System.Guid)
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioniPeriodo.IDColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioniPeriodo.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioniPeriodo.NomeColumn) = value
            End Set
        End Property
        
        Public Property Pubblicato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioniPeriodo.PubblicatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioniPeriodo.PubblicatoColumn) = value
            End Set
        End Property
        
        Public Property PrenotabileDa As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileDaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileDaColumn) = value
            End Set
        End Property
        
        Public Property PrenotabileDaOra As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileDaOraColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileDaOraColumn) = value
            End Set
        End Property
        
        Public Property PrenotabileDaMinuti As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileDaMinutiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileDaMinutiColumn) = value
            End Set
        End Property
        
        Public Property PrenotabileA As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileAColumn) = value
            End Set
        End Property
        
        Public Property PeriodoDa As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioniPeriodo.PeriodoDaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioniPeriodo.PeriodoDaColumn) = value
            End Set
        End Property
        
        Public Property PeriodoA As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioniPeriodo.PeriodoAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioniPeriodo.PeriodoAColumn) = value
            End Set
        End Property
        
        Public Property NumMaxIntervalli As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioniPeriodo.NumMaxIntervalliColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioniPeriodo.NumMaxIntervalliColumn) = value
            End Set
        End Property
        
        Public Property ModifiedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioniPeriodo.ModifiedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioniPeriodo.ModifiedOnColumn) = value
            End Set
        End Property
        
        Public Property CreatedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioniPeriodo.CreatedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioniPeriodo.CreatedByColumn) = value
            End Set
        End Property
        
        Public Property ModifiedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_PrenotazioniPeriodo.ModifiedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_PrenotazioniPeriodo.ModifiedByColumn) = value
            End Set
        End Property
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioniPeriodo.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableAccertatori_PrenotazioniPeriodo.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPubblicatoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioniPeriodo.PubblicatoColumn)
        End Function
        
        Public Sub SetPubblicatoNull()
            Me(Me.tableAccertatori_PrenotazioniPeriodo.PubblicatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrenotabileDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileDaColumn)
        End Function
        
        Public Sub SetPrenotabileDaNull()
            Me(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrenotabileDaOraNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileDaOraColumn)
        End Function
        
        Public Sub SetPrenotabileDaOraNull()
            Me(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileDaOraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrenotabileDaMinutiNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileDaMinutiColumn)
        End Function
        
        Public Sub SetPrenotabileDaMinutiNull()
            Me(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileDaMinutiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrenotabileANull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileAColumn)
        End Function
        
        Public Sub SetPrenotabileANull()
            Me(Me.tableAccertatori_PrenotazioniPeriodo.PrenotabileAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPeriodoDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioniPeriodo.PeriodoDaColumn)
        End Function
        
        Public Sub SetPeriodoDaNull()
            Me(Me.tableAccertatori_PrenotazioniPeriodo.PeriodoDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPeriodoANull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioniPeriodo.PeriodoAColumn)
        End Function
        
        Public Sub SetPeriodoANull()
            Me(Me.tableAccertatori_PrenotazioniPeriodo.PeriodoAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNumMaxIntervalliNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioniPeriodo.NumMaxIntervalliColumn)
        End Function
        
        Public Sub SetNumMaxIntervalliNull()
            Me(Me.tableAccertatori_PrenotazioniPeriodo.NumMaxIntervalliColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioniPeriodo.ModifiedOnColumn)
        End Function
        
        Public Sub SetModifiedOnNull()
            Me(Me.tableAccertatori_PrenotazioniPeriodo.ModifiedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioniPeriodo.CreatedByColumn)
        End Function
        
        Public Sub SetCreatedByNull()
            Me(Me.tableAccertatori_PrenotazioniPeriodo.CreatedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_PrenotazioniPeriodo.ModifiedByColumn)
        End Function
        
        Public Sub SetModifiedByNull()
            Me(Me.tableAccertatori_PrenotazioniPeriodo.ModifiedByColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_PrenotazioniPeriodoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Accertatori_PrenotazioniPeriodoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Accertatori_PrenotazioniPeriodoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Accertatori_PrenotazioniPeriodoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
