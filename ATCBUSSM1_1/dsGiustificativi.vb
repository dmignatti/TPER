'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2503
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsGiustificativi
    Inherits DataSet
    
    Private tableTPER_Accertatori As TPER_AccertatoriDataTable
    
    Private tableAccertatori_Causale As Accertatori_CausaleDataTable
    
    Private tableAccertatori_GiustificativoCausale As Accertatori_GiustificativoCausaleDataTable
    
    Private tableAccertatori_GiustificativoRichiesta As Accertatori_GiustificativoRichiestaDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TPER_Accertatori")) Is Nothing) Then
                Me.Tables.Add(New TPER_AccertatoriDataTable(ds.Tables("TPER_Accertatori")))
            End If
            If (Not (ds.Tables("Accertatori_Causale")) Is Nothing) Then
                Me.Tables.Add(New Accertatori_CausaleDataTable(ds.Tables("Accertatori_Causale")))
            End If
            If (Not (ds.Tables("Accertatori_GiustificativoCausale")) Is Nothing) Then
                Me.Tables.Add(New Accertatori_GiustificativoCausaleDataTable(ds.Tables("Accertatori_GiustificativoCausale")))
            End If
            If (Not (ds.Tables("Accertatori_GiustificativoRichiesta")) Is Nothing) Then
                Me.Tables.Add(New Accertatori_GiustificativoRichiestaDataTable(ds.Tables("Accertatori_GiustificativoRichiesta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TPER_Accertatori As TPER_AccertatoriDataTable
        Get
            Return Me.tableTPER_Accertatori
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accertatori_Causale As Accertatori_CausaleDataTable
        Get
            Return Me.tableAccertatori_Causale
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accertatori_GiustificativoCausale As Accertatori_GiustificativoCausaleDataTable
        Get
            Return Me.tableAccertatori_GiustificativoCausale
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accertatori_GiustificativoRichiesta As Accertatori_GiustificativoRichiestaDataTable
        Get
            Return Me.tableAccertatori_GiustificativoRichiesta
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsGiustificativi = CType(MyBase.Clone,dsGiustificativi)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("TPER_Accertatori")) Is Nothing) Then
            Me.Tables.Add(New TPER_AccertatoriDataTable(ds.Tables("TPER_Accertatori")))
        End If
        If (Not (ds.Tables("Accertatori_Causale")) Is Nothing) Then
            Me.Tables.Add(New Accertatori_CausaleDataTable(ds.Tables("Accertatori_Causale")))
        End If
        If (Not (ds.Tables("Accertatori_GiustificativoCausale")) Is Nothing) Then
            Me.Tables.Add(New Accertatori_GiustificativoCausaleDataTable(ds.Tables("Accertatori_GiustificativoCausale")))
        End If
        If (Not (ds.Tables("Accertatori_GiustificativoRichiesta")) Is Nothing) Then
            Me.Tables.Add(New Accertatori_GiustificativoRichiestaDataTable(ds.Tables("Accertatori_GiustificativoRichiesta")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableTPER_Accertatori = CType(Me.Tables("TPER_Accertatori"),TPER_AccertatoriDataTable)
        If (Not (Me.tableTPER_Accertatori) Is Nothing) Then
            Me.tableTPER_Accertatori.InitVars
        End If
        Me.tableAccertatori_Causale = CType(Me.Tables("Accertatori_Causale"),Accertatori_CausaleDataTable)
        If (Not (Me.tableAccertatori_Causale) Is Nothing) Then
            Me.tableAccertatori_Causale.InitVars
        End If
        Me.tableAccertatori_GiustificativoCausale = CType(Me.Tables("Accertatori_GiustificativoCausale"),Accertatori_GiustificativoCausaleDataTable)
        If (Not (Me.tableAccertatori_GiustificativoCausale) Is Nothing) Then
            Me.tableAccertatori_GiustificativoCausale.InitVars
        End If
        Me.tableAccertatori_GiustificativoRichiesta = CType(Me.Tables("Accertatori_GiustificativoRichiesta"),Accertatori_GiustificativoRichiestaDataTable)
        If (Not (Me.tableAccertatori_GiustificativoRichiesta) Is Nothing) Then
            Me.tableAccertatori_GiustificativoRichiesta.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsGiustificativi"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsGiustificativi.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableTPER_Accertatori = New TPER_AccertatoriDataTable
        Me.Tables.Add(Me.tableTPER_Accertatori)
        Me.tableAccertatori_Causale = New Accertatori_CausaleDataTable
        Me.Tables.Add(Me.tableAccertatori_Causale)
        Me.tableAccertatori_GiustificativoCausale = New Accertatori_GiustificativoCausaleDataTable
        Me.Tables.Add(Me.tableAccertatori_GiustificativoCausale)
        Me.tableAccertatori_GiustificativoRichiesta = New Accertatori_GiustificativoRichiestaDataTable
        Me.Tables.Add(Me.tableAccertatori_GiustificativoRichiesta)
    End Sub
    
    Private Function ShouldSerializeTPER_Accertatori() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccertatori_Causale() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccertatori_GiustificativoCausale() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccertatori_GiustificativoRichiesta() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub TPER_AccertatoriRowChangeEventHandler(ByVal sender As Object, ByVal e As TPER_AccertatoriRowChangeEvent)
    
    Public Delegate Sub Accertatori_CausaleRowChangeEventHandler(ByVal sender As Object, ByVal e As Accertatori_CausaleRowChangeEvent)
    
    Public Delegate Sub Accertatori_GiustificativoCausaleRowChangeEventHandler(ByVal sender As Object, ByVal e As Accertatori_GiustificativoCausaleRowChangeEvent)
    
    Public Delegate Sub Accertatori_GiustificativoRichiestaRowChangeEventHandler(ByVal sender As Object, ByVal e As Accertatori_GiustificativoRichiestaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TPER_AccertatoriDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnNomeCognome As DataColumn
        
        Friend Sub New()
            MyBase.New("TPER_Accertatori")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NomeCognomeColumn As DataColumn
            Get
                Return Me.columnNomeCognome
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TPER_AccertatoriRow
            Get
                Return CType(Me.Rows(index),TPER_AccertatoriRow)
            End Get
        End Property
        
        Public Event TPER_AccertatoriRowChanged As TPER_AccertatoriRowChangeEventHandler
        
        Public Event TPER_AccertatoriRowChanging As TPER_AccertatoriRowChangeEventHandler
        
        Public Event TPER_AccertatoriRowDeleted As TPER_AccertatoriRowChangeEventHandler
        
        Public Event TPER_AccertatoriRowDeleting As TPER_AccertatoriRowChangeEventHandler
        
        Public Overloads Sub AddTPER_AccertatoriRow(ByVal row As TPER_AccertatoriRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTPER_AccertatoriRow(ByVal NomeCognome As String) As TPER_AccertatoriRow
            Dim rowTPER_AccertatoriRow As TPER_AccertatoriRow = CType(Me.NewRow,TPER_AccertatoriRow)
            rowTPER_AccertatoriRow.ItemArray = New Object() {Nothing, NomeCognome}
            Me.Rows.Add(rowTPER_AccertatoriRow)
            Return rowTPER_AccertatoriRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As TPER_AccertatoriRow
            Return CType(Me.Rows.Find(New Object() {ID}),TPER_AccertatoriRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TPER_AccertatoriDataTable = CType(MyBase.Clone,TPER_AccertatoriDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TPER_AccertatoriDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnNomeCognome = Me.Columns("NomeCognome")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnNomeCognome = New DataColumn("NomeCognome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNomeCognome)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnNomeCognome.ReadOnly = true
        End Sub
        
        Public Function NewTPER_AccertatoriRow() As TPER_AccertatoriRow
            Return CType(Me.NewRow,TPER_AccertatoriRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TPER_AccertatoriRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TPER_AccertatoriRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TPER_AccertatoriRowChangedEvent) Is Nothing) Then
                RaiseEvent TPER_AccertatoriRowChanged(Me, New TPER_AccertatoriRowChangeEvent(CType(e.Row,TPER_AccertatoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TPER_AccertatoriRowChangingEvent) Is Nothing) Then
                RaiseEvent TPER_AccertatoriRowChanging(Me, New TPER_AccertatoriRowChangeEvent(CType(e.Row,TPER_AccertatoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TPER_AccertatoriRowDeletedEvent) Is Nothing) Then
                RaiseEvent TPER_AccertatoriRowDeleted(Me, New TPER_AccertatoriRowChangeEvent(CType(e.Row,TPER_AccertatoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TPER_AccertatoriRowDeletingEvent) Is Nothing) Then
                RaiseEvent TPER_AccertatoriRowDeleting(Me, New TPER_AccertatoriRowChangeEvent(CType(e.Row,TPER_AccertatoriRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTPER_AccertatoriRow(ByVal row As TPER_AccertatoriRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TPER_AccertatoriRow
        Inherits DataRow
        
        Private tableTPER_Accertatori As TPER_AccertatoriDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTPER_Accertatori = CType(Me.Table,TPER_AccertatoriDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableTPER_Accertatori.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTPER_Accertatori.IDColumn) = value
            End Set
        End Property
        
        Public Property NomeCognome As String
            Get
                Try 
                    Return CType(Me(Me.tableTPER_Accertatori.NomeCognomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPER_Accertatori.NomeCognomeColumn) = value
            End Set
        End Property
        
        Public Function IsNomeCognomeNull() As Boolean
            Return Me.IsNull(Me.tableTPER_Accertatori.NomeCognomeColumn)
        End Function
        
        Public Sub SetNomeCognomeNull()
            Me(Me.tableTPER_Accertatori.NomeCognomeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TPER_AccertatoriRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TPER_AccertatoriRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TPER_AccertatoriRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TPER_AccertatoriRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_CausaleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnNome As DataColumn
        
        Private columnCodice As DataColumn
        
        Friend Sub New()
            MyBase.New("Accertatori_Causale")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property CodiceColumn As DataColumn
            Get
                Return Me.columnCodice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Accertatori_CausaleRow
            Get
                Return CType(Me.Rows(index),Accertatori_CausaleRow)
            End Get
        End Property
        
        Public Event Accertatori_CausaleRowChanged As Accertatori_CausaleRowChangeEventHandler
        
        Public Event Accertatori_CausaleRowChanging As Accertatori_CausaleRowChangeEventHandler
        
        Public Event Accertatori_CausaleRowDeleted As Accertatori_CausaleRowChangeEventHandler
        
        Public Event Accertatori_CausaleRowDeleting As Accertatori_CausaleRowChangeEventHandler
        
        Public Overloads Sub AddAccertatori_CausaleRow(ByVal row As Accertatori_CausaleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatori_CausaleRow(ByVal ID As System.Guid, ByVal Nome As String, ByVal Codice As String) As Accertatori_CausaleRow
            Dim rowAccertatori_CausaleRow As Accertatori_CausaleRow = CType(Me.NewRow,Accertatori_CausaleRow)
            rowAccertatori_CausaleRow.ItemArray = New Object() {ID, Nome, Codice}
            Me.Rows.Add(rowAccertatori_CausaleRow)
            Return rowAccertatori_CausaleRow
        End Function
        
        Public Function FindByID(ByVal ID As System.Guid) As Accertatori_CausaleRow
            Return CType(Me.Rows.Find(New Object() {ID}),Accertatori_CausaleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Accertatori_CausaleDataTable = CType(MyBase.Clone,Accertatori_CausaleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Accertatori_CausaleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnNome = Me.Columns("Nome")
            Me.columnCodice = Me.Columns("Codice")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnCodice = New DataColumn("Codice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodice)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        Public Function NewAccertatori_CausaleRow() As Accertatori_CausaleRow
            Return CType(Me.NewRow,Accertatori_CausaleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Accertatori_CausaleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Accertatori_CausaleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Accertatori_CausaleRowChangedEvent) Is Nothing) Then
                RaiseEvent Accertatori_CausaleRowChanged(Me, New Accertatori_CausaleRowChangeEvent(CType(e.Row,Accertatori_CausaleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Accertatori_CausaleRowChangingEvent) Is Nothing) Then
                RaiseEvent Accertatori_CausaleRowChanging(Me, New Accertatori_CausaleRowChangeEvent(CType(e.Row,Accertatori_CausaleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Accertatori_CausaleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Accertatori_CausaleRowDeleted(Me, New Accertatori_CausaleRowChangeEvent(CType(e.Row,Accertatori_CausaleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Accertatori_CausaleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Accertatori_CausaleRowDeleting(Me, New Accertatori_CausaleRowChangeEvent(CType(e.Row,Accertatori_CausaleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatori_CausaleRow(ByVal row As Accertatori_CausaleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_CausaleRow
        Inherits DataRow
        
        Private tableAccertatori_Causale As Accertatori_CausaleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatori_Causale = CType(Me.Table,Accertatori_CausaleDataTable)
        End Sub
        
        Public Property ID As System.Guid
            Get
                Return CType(Me(Me.tableAccertatori_Causale.IDColumn),System.Guid)
            End Get
            Set
                Me(Me.tableAccertatori_Causale.IDColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_Causale.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_Causale.NomeColumn) = value
            End Set
        End Property
        
        Public Property Codice As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_Causale.CodiceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_Causale.CodiceColumn) = value
            End Set
        End Property
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_Causale.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableAccertatori_Causale.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodiceNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_Causale.CodiceColumn)
        End Function
        
        Public Sub SetCodiceNull()
            Me(Me.tableAccertatori_Causale.CodiceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_CausaleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Accertatori_CausaleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Accertatori_CausaleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Accertatori_CausaleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_GiustificativoCausaleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnNome As DataColumn
        
        Private columnCodice As DataColumn
        
        Private columnValiditaDa As DataColumn
        
        Private columnValiditaA As DataColumn
        
        Private columnFrazionato As DataColumn
        
        Private columnDefaultApprovato As DataColumn
        
        Private columnSenzaPreavviso As DataColumn
        
        Private columnPreavvisoGG As DataColumn
        
        Private columnNrMaxGG As DataColumn
        
        Private columnCreatedOn As DataColumn
        
        Private columnModifiedOn As DataColumn
        
        Private columnCreatedBy As DataColumn
        
        Private columnModifiedBy As DataColumn
        
        Friend Sub New()
            MyBase.New("Accertatori_GiustificativoCausale")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property CodiceColumn As DataColumn
            Get
                Return Me.columnCodice
            End Get
        End Property
        
        Friend ReadOnly Property ValiditaDaColumn As DataColumn
            Get
                Return Me.columnValiditaDa
            End Get
        End Property
        
        Friend ReadOnly Property ValiditaAColumn As DataColumn
            Get
                Return Me.columnValiditaA
            End Get
        End Property
        
        Friend ReadOnly Property FrazionatoColumn As DataColumn
            Get
                Return Me.columnFrazionato
            End Get
        End Property
        
        Friend ReadOnly Property DefaultApprovatoColumn As DataColumn
            Get
                Return Me.columnDefaultApprovato
            End Get
        End Property
        
        Friend ReadOnly Property SenzaPreavvisoColumn As DataColumn
            Get
                Return Me.columnSenzaPreavviso
            End Get
        End Property
        
        Friend ReadOnly Property PreavvisoGGColumn As DataColumn
            Get
                Return Me.columnPreavvisoGG
            End Get
        End Property
        
        Friend ReadOnly Property NrMaxGGColumn As DataColumn
            Get
                Return Me.columnNrMaxGG
            End Get
        End Property
        
        Friend ReadOnly Property CreatedOnColumn As DataColumn
            Get
                Return Me.columnCreatedOn
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedOnColumn As DataColumn
            Get
                Return Me.columnModifiedOn
            End Get
        End Property
        
        Friend ReadOnly Property CreatedByColumn As DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedByColumn As DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Accertatori_GiustificativoCausaleRow
            Get
                Return CType(Me.Rows(index),Accertatori_GiustificativoCausaleRow)
            End Get
        End Property
        
        Public Event Accertatori_GiustificativoCausaleRowChanged As Accertatori_GiustificativoCausaleRowChangeEventHandler
        
        Public Event Accertatori_GiustificativoCausaleRowChanging As Accertatori_GiustificativoCausaleRowChangeEventHandler
        
        Public Event Accertatori_GiustificativoCausaleRowDeleted As Accertatori_GiustificativoCausaleRowChangeEventHandler
        
        Public Event Accertatori_GiustificativoCausaleRowDeleting As Accertatori_GiustificativoCausaleRowChangeEventHandler
        
        Public Overloads Sub AddAccertatori_GiustificativoCausaleRow(ByVal row As Accertatori_GiustificativoCausaleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatori_GiustificativoCausaleRow(ByVal ID As System.Guid, ByVal Nome As String, ByVal Codice As String, ByVal ValiditaDa As Date, ByVal ValiditaA As Date, ByVal Frazionato As Boolean, ByVal DefaultApprovato As Boolean, ByVal SenzaPreavviso As Boolean, ByVal PreavvisoGG As Integer, ByVal NrMaxGG As Integer, ByVal CreatedOn As Date, ByVal ModifiedOn As Date, ByVal CreatedBy As String, ByVal ModifiedBy As String) As Accertatori_GiustificativoCausaleRow
            Dim rowAccertatori_GiustificativoCausaleRow As Accertatori_GiustificativoCausaleRow = CType(Me.NewRow,Accertatori_GiustificativoCausaleRow)
            rowAccertatori_GiustificativoCausaleRow.ItemArray = New Object() {ID, Nome, Codice, ValiditaDa, ValiditaA, Frazionato, DefaultApprovato, SenzaPreavviso, PreavvisoGG, NrMaxGG, CreatedOn, ModifiedOn, CreatedBy, ModifiedBy}
            Me.Rows.Add(rowAccertatori_GiustificativoCausaleRow)
            Return rowAccertatori_GiustificativoCausaleRow
        End Function
        
        Public Function FindByID(ByVal ID As System.Guid) As Accertatori_GiustificativoCausaleRow
            Return CType(Me.Rows.Find(New Object() {ID}),Accertatori_GiustificativoCausaleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Accertatori_GiustificativoCausaleDataTable = CType(MyBase.Clone,Accertatori_GiustificativoCausaleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Accertatori_GiustificativoCausaleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnNome = Me.Columns("Nome")
            Me.columnCodice = Me.Columns("Codice")
            Me.columnValiditaDa = Me.Columns("ValiditaDa")
            Me.columnValiditaA = Me.Columns("ValiditaA")
            Me.columnFrazionato = Me.Columns("Frazionato")
            Me.columnDefaultApprovato = Me.Columns("DefaultApprovato")
            Me.columnSenzaPreavviso = Me.Columns("SenzaPreavviso")
            Me.columnPreavvisoGG = Me.Columns("PreavvisoGG")
            Me.columnNrMaxGG = Me.Columns("NrMaxGG")
            Me.columnCreatedOn = Me.Columns("CreatedOn")
            Me.columnModifiedOn = Me.Columns("ModifiedOn")
            Me.columnCreatedBy = Me.Columns("CreatedBy")
            Me.columnModifiedBy = Me.Columns("ModifiedBy")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnCodice = New DataColumn("Codice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodice)
            Me.columnValiditaDa = New DataColumn("ValiditaDa", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValiditaDa)
            Me.columnValiditaA = New DataColumn("ValiditaA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValiditaA)
            Me.columnFrazionato = New DataColumn("Frazionato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrazionato)
            Me.columnDefaultApprovato = New DataColumn("DefaultApprovato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDefaultApprovato)
            Me.columnSenzaPreavviso = New DataColumn("SenzaPreavviso", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSenzaPreavviso)
            Me.columnPreavvisoGG = New DataColumn("PreavvisoGG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreavvisoGG)
            Me.columnNrMaxGG = New DataColumn("NrMaxGG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNrMaxGG)
            Me.columnCreatedOn = New DataColumn("CreatedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedOn)
            Me.columnModifiedOn = New DataColumn("ModifiedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedOn)
            Me.columnCreatedBy = New DataColumn("CreatedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedBy)
            Me.columnModifiedBy = New DataColumn("ModifiedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedBy)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        Public Function NewAccertatori_GiustificativoCausaleRow() As Accertatori_GiustificativoCausaleRow
            Return CType(Me.NewRow,Accertatori_GiustificativoCausaleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Accertatori_GiustificativoCausaleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Accertatori_GiustificativoCausaleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Accertatori_GiustificativoCausaleRowChangedEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoCausaleRowChanged(Me, New Accertatori_GiustificativoCausaleRowChangeEvent(CType(e.Row,Accertatori_GiustificativoCausaleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Accertatori_GiustificativoCausaleRowChangingEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoCausaleRowChanging(Me, New Accertatori_GiustificativoCausaleRowChangeEvent(CType(e.Row,Accertatori_GiustificativoCausaleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Accertatori_GiustificativoCausaleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoCausaleRowDeleted(Me, New Accertatori_GiustificativoCausaleRowChangeEvent(CType(e.Row,Accertatori_GiustificativoCausaleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Accertatori_GiustificativoCausaleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoCausaleRowDeleting(Me, New Accertatori_GiustificativoCausaleRowChangeEvent(CType(e.Row,Accertatori_GiustificativoCausaleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatori_GiustificativoCausaleRow(ByVal row As Accertatori_GiustificativoCausaleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_GiustificativoCausaleRow
        Inherits DataRow
        
        Private tableAccertatori_GiustificativoCausale As Accertatori_GiustificativoCausaleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatori_GiustificativoCausale = CType(Me.Table,Accertatori_GiustificativoCausaleDataTable)
        End Sub
        
        Public Property ID As System.Guid
            Get
                Return CType(Me(Me.tableAccertatori_GiustificativoCausale.IDColumn),System.Guid)
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoCausale.IDColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoCausale.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoCausale.NomeColumn) = value
            End Set
        End Property
        
        Public Property Codice As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoCausale.CodiceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoCausale.CodiceColumn) = value
            End Set
        End Property
        
        Public Property ValiditaDa As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoCausale.ValiditaDaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoCausale.ValiditaDaColumn) = value
            End Set
        End Property
        
        Public Property ValiditaA As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoCausale.ValiditaAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoCausale.ValiditaAColumn) = value
            End Set
        End Property
        
        Public Property Frazionato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoCausale.FrazionatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoCausale.FrazionatoColumn) = value
            End Set
        End Property
        
        Public Property DefaultApprovato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoCausale.DefaultApprovatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoCausale.DefaultApprovatoColumn) = value
            End Set
        End Property
        
        Public Property SenzaPreavviso As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoCausale.SenzaPreavvisoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoCausale.SenzaPreavvisoColumn) = value
            End Set
        End Property
        
        Public Property PreavvisoGG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoCausale.PreavvisoGGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoCausale.PreavvisoGGColumn) = value
            End Set
        End Property
        
        Public Property NrMaxGG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoCausale.NrMaxGGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoCausale.NrMaxGGColumn) = value
            End Set
        End Property
        
        Public Property CreatedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoCausale.CreatedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoCausale.CreatedOnColumn) = value
            End Set
        End Property
        
        Public Property ModifiedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoCausale.ModifiedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoCausale.ModifiedOnColumn) = value
            End Set
        End Property
        
        Public Property CreatedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoCausale.CreatedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoCausale.CreatedByColumn) = value
            End Set
        End Property
        
        Public Property ModifiedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoCausale.ModifiedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoCausale.ModifiedByColumn) = value
            End Set
        End Property
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoCausale.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableAccertatori_GiustificativoCausale.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodiceNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoCausale.CodiceColumn)
        End Function
        
        Public Sub SetCodiceNull()
            Me(Me.tableAccertatori_GiustificativoCausale.CodiceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValiditaDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoCausale.ValiditaDaColumn)
        End Function
        
        Public Sub SetValiditaDaNull()
            Me(Me.tableAccertatori_GiustificativoCausale.ValiditaDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValiditaANull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoCausale.ValiditaAColumn)
        End Function
        
        Public Sub SetValiditaANull()
            Me(Me.tableAccertatori_GiustificativoCausale.ValiditaAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFrazionatoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoCausale.FrazionatoColumn)
        End Function
        
        Public Sub SetFrazionatoNull()
            Me(Me.tableAccertatori_GiustificativoCausale.FrazionatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDefaultApprovatoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoCausale.DefaultApprovatoColumn)
        End Function
        
        Public Sub SetDefaultApprovatoNull()
            Me(Me.tableAccertatori_GiustificativoCausale.DefaultApprovatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSenzaPreavvisoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoCausale.SenzaPreavvisoColumn)
        End Function
        
        Public Sub SetSenzaPreavvisoNull()
            Me(Me.tableAccertatori_GiustificativoCausale.SenzaPreavvisoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreavvisoGGNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoCausale.PreavvisoGGColumn)
        End Function
        
        Public Sub SetPreavvisoGGNull()
            Me(Me.tableAccertatori_GiustificativoCausale.PreavvisoGGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNrMaxGGNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoCausale.NrMaxGGColumn)
        End Function
        
        Public Sub SetNrMaxGGNull()
            Me(Me.tableAccertatori_GiustificativoCausale.NrMaxGGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoCausale.CreatedOnColumn)
        End Function
        
        Public Sub SetCreatedOnNull()
            Me(Me.tableAccertatori_GiustificativoCausale.CreatedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoCausale.ModifiedOnColumn)
        End Function
        
        Public Sub SetModifiedOnNull()
            Me(Me.tableAccertatori_GiustificativoCausale.ModifiedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoCausale.CreatedByColumn)
        End Function
        
        Public Sub SetCreatedByNull()
            Me(Me.tableAccertatori_GiustificativoCausale.CreatedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoCausale.ModifiedByColumn)
        End Function
        
        Public Sub SetModifiedByNull()
            Me(Me.tableAccertatori_GiustificativoCausale.ModifiedByColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_GiustificativoCausaleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Accertatori_GiustificativoCausaleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Accertatori_GiustificativoCausaleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Accertatori_GiustificativoCausaleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_GiustificativoRichiestaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApprovatore As DataColumn
        
        Private columnID As DataColumn
        
        Private columnAccertatoreId As DataColumn
        
        Private columnAccertatori_GiustificativoCausaleId As DataColumn
        
        Private columnDataDa As DataColumn
        
        Private columnDataA As DataColumn
        
        Private columnOraDa As DataColumn
        
        Private columnORDINE As DataColumn
        
        Private columnCODICE As DataColumn
        
        Private columnOraA As DataColumn
        
        Private columnOra_Da As DataColumn
        
        Private columnMinuti_Da As DataColumn
        
        Private columnOra_A As DataColumn
        
        Private columnMinuti_A As DataColumn
        
        Private columnStatoGiustificativo As DataColumn
        
        Private columnDataRichiesta As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnApprovatoDa As DataColumn
        
        Private columnCreatedOn As DataColumn
        
        Private columnModifiedOn As DataColumn
        
        Private columnCreatedBy As DataColumn
        
        Private columnModifiedBy As DataColumn
        
        Private columnCognomeNome As DataColumn
        
        Private columnCausale As DataColumn
        
        Private columnFrazionato As DataColumn
        
        Private columnDefaultApprovato As DataColumn
        
        Private columnPreavvisoGG As DataColumn
        
        Private columnNrMaxGG As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Friend Sub New()
            MyBase.New("Accertatori_GiustificativoRichiesta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoreColumn As DataColumn
            Get
                Return Me.columnApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property AccertatoreIdColumn As DataColumn
            Get
                Return Me.columnAccertatoreId
            End Get
        End Property
        
        Friend ReadOnly Property Accertatori_GiustificativoCausaleIdColumn As DataColumn
            Get
                Return Me.columnAccertatori_GiustificativoCausaleId
            End Get
        End Property
        
        Friend ReadOnly Property DataDaColumn As DataColumn
            Get
                Return Me.columnDataDa
            End Get
        End Property
        
        Friend ReadOnly Property DataAColumn As DataColumn
            Get
                Return Me.columnDataA
            End Get
        End Property
        
        Friend ReadOnly Property OraDaColumn As DataColumn
            Get
                Return Me.columnOraDa
            End Get
        End Property
        
        Friend ReadOnly Property ORDINEColumn As DataColumn
            Get
                Return Me.columnORDINE
            End Get
        End Property
        
        Friend ReadOnly Property CODICEColumn As DataColumn
            Get
                Return Me.columnCODICE
            End Get
        End Property
        
        Friend ReadOnly Property OraAColumn As DataColumn
            Get
                Return Me.columnOraA
            End Get
        End Property
        
        Friend ReadOnly Property Ora_DaColumn As DataColumn
            Get
                Return Me.columnOra_Da
            End Get
        End Property
        
        Friend ReadOnly Property Minuti_DaColumn As DataColumn
            Get
                Return Me.columnMinuti_Da
            End Get
        End Property
        
        Friend ReadOnly Property Ora_AColumn As DataColumn
            Get
                Return Me.columnOra_A
            End Get
        End Property
        
        Friend ReadOnly Property Minuti_AColumn As DataColumn
            Get
                Return Me.columnMinuti_A
            End Get
        End Property
        
        Friend ReadOnly Property StatoGiustificativoColumn As DataColumn
            Get
                Return Me.columnStatoGiustificativo
            End Get
        End Property
        
        Friend ReadOnly Property DataRichiestaColumn As DataColumn
            Get
                Return Me.columnDataRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoDaColumn As DataColumn
            Get
                Return Me.columnApprovatoDa
            End Get
        End Property
        
        Friend ReadOnly Property CreatedOnColumn As DataColumn
            Get
                Return Me.columnCreatedOn
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedOnColumn As DataColumn
            Get
                Return Me.columnModifiedOn
            End Get
        End Property
        
        Friend ReadOnly Property CreatedByColumn As DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedByColumn As DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeColumn As DataColumn
            Get
                Return Me.columnCognomeNome
            End Get
        End Property
        
        Friend ReadOnly Property CausaleColumn As DataColumn
            Get
                Return Me.columnCausale
            End Get
        End Property
        
        Friend ReadOnly Property FrazionatoColumn As DataColumn
            Get
                Return Me.columnFrazionato
            End Get
        End Property
        
        Friend ReadOnly Property DefaultApprovatoColumn As DataColumn
            Get
                Return Me.columnDefaultApprovato
            End Get
        End Property
        
        Friend ReadOnly Property PreavvisoGGColumn As DataColumn
            Get
                Return Me.columnPreavvisoGG
            End Get
        End Property
        
        Friend ReadOnly Property NrMaxGGColumn As DataColumn
            Get
                Return Me.columnNrMaxGG
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Accertatori_GiustificativoRichiestaRow
            Get
                Return CType(Me.Rows(index),Accertatori_GiustificativoRichiestaRow)
            End Get
        End Property
        
        Public Event Accertatori_GiustificativoRichiestaRowChanged As Accertatori_GiustificativoRichiestaRowChangeEventHandler
        
        Public Event Accertatori_GiustificativoRichiestaRowChanging As Accertatori_GiustificativoRichiestaRowChangeEventHandler
        
        Public Event Accertatori_GiustificativoRichiestaRowDeleted As Accertatori_GiustificativoRichiestaRowChangeEventHandler
        
        Public Event Accertatori_GiustificativoRichiestaRowDeleting As Accertatori_GiustificativoRichiestaRowChangeEventHandler
        
        Public Overloads Sub AddAccertatori_GiustificativoRichiestaRow(ByVal row As Accertatori_GiustificativoRichiestaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatori_GiustificativoRichiestaRow( _
                    ByVal Approvatore As String,  _
                    ByVal ID As System.Guid,  _
                    ByVal AccertatoreId As Integer,  _
                    ByVal Accertatori_GiustificativoCausaleId As System.Guid,  _
                    ByVal DataDa As Date,  _
                    ByVal DataA As Date,  _
                    ByVal OraDa As Date,  _
                    ByVal ORDINE As String,  _
                    ByVal CODICE As String,  _
                    ByVal OraA As Date,  _
                    ByVal Ora_Da As Integer,  _
                    ByVal Minuti_Da As Integer,  _
                    ByVal Ora_A As Integer,  _
                    ByVal Minuti_A As Integer,  _
                    ByVal StatoGiustificativo As Integer,  _
                    ByVal DataRichiesta As Date,  _
                    ByVal DataApprovazione As Date,  _
                    ByVal ApprovatoDa As Boolean,  _
                    ByVal CreatedOn As Date,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal CreatedBy As String,  _
                    ByVal ModifiedBy As String,  _
                    ByVal CognomeNome As String,  _
                    ByVal Causale As String,  _
                    ByVal Frazionato As Boolean,  _
                    ByVal DefaultApprovato As Boolean,  _
                    ByVal PreavvisoGG As Integer,  _
                    ByVal NrMaxGG As Integer,  _
                    ByVal StatoApprovazione As String) As Accertatori_GiustificativoRichiestaRow
            Dim rowAccertatori_GiustificativoRichiestaRow As Accertatori_GiustificativoRichiestaRow = CType(Me.NewRow,Accertatori_GiustificativoRichiestaRow)
            rowAccertatori_GiustificativoRichiestaRow.ItemArray = New Object() {Approvatore, ID, AccertatoreId, Accertatori_GiustificativoCausaleId, DataDa, DataA, OraDa, ORDINE, CODICE, OraA, Ora_Da, Minuti_Da, Ora_A, Minuti_A, StatoGiustificativo, DataRichiesta, DataApprovazione, ApprovatoDa, CreatedOn, ModifiedOn, CreatedBy, ModifiedBy, CognomeNome, Causale, Frazionato, DefaultApprovato, PreavvisoGG, NrMaxGG, StatoApprovazione}
            Me.Rows.Add(rowAccertatori_GiustificativoRichiestaRow)
            Return rowAccertatori_GiustificativoRichiestaRow
        End Function
        
        Public Function FindByID(ByVal ID As System.Guid) As Accertatori_GiustificativoRichiestaRow
            Return CType(Me.Rows.Find(New Object() {ID}),Accertatori_GiustificativoRichiestaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Accertatori_GiustificativoRichiestaDataTable = CType(MyBase.Clone,Accertatori_GiustificativoRichiestaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Accertatori_GiustificativoRichiestaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApprovatore = Me.Columns("Approvatore")
            Me.columnID = Me.Columns("ID")
            Me.columnAccertatoreId = Me.Columns("AccertatoreId")
            Me.columnAccertatori_GiustificativoCausaleId = Me.Columns("Accertatori_GiustificativoCausaleId")
            Me.columnDataDa = Me.Columns("DataDa")
            Me.columnDataA = Me.Columns("DataA")
            Me.columnOraDa = Me.Columns("OraDa")
            Me.columnORDINE = Me.Columns("ORDINE")
            Me.columnCODICE = Me.Columns("CODICE")
            Me.columnOraA = Me.Columns("OraA")
            Me.columnOra_Da = Me.Columns("Ora_Da")
            Me.columnMinuti_Da = Me.Columns("Minuti_Da")
            Me.columnOra_A = Me.Columns("Ora_A")
            Me.columnMinuti_A = Me.Columns("Minuti_A")
            Me.columnStatoGiustificativo = Me.Columns("StatoGiustificativo")
            Me.columnDataRichiesta = Me.Columns("DataRichiesta")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnApprovatoDa = Me.Columns("ApprovatoDa")
            Me.columnCreatedOn = Me.Columns("CreatedOn")
            Me.columnModifiedOn = Me.Columns("ModifiedOn")
            Me.columnCreatedBy = Me.Columns("CreatedBy")
            Me.columnModifiedBy = Me.Columns("ModifiedBy")
            Me.columnCognomeNome = Me.Columns("CognomeNome")
            Me.columnCausale = Me.Columns("Causale")
            Me.columnFrazionato = Me.Columns("Frazionato")
            Me.columnDefaultApprovato = Me.Columns("DefaultApprovato")
            Me.columnPreavvisoGG = Me.Columns("PreavvisoGG")
            Me.columnNrMaxGG = Me.Columns("NrMaxGG")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
        End Sub
        
        Private Sub InitClass()
            Me.columnApprovatore = New DataColumn("Approvatore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatore)
            Me.columnID = New DataColumn("ID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnAccertatoreId = New DataColumn("AccertatoreId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccertatoreId)
            Me.columnAccertatori_GiustificativoCausaleId = New DataColumn("Accertatori_GiustificativoCausaleId", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccertatori_GiustificativoCausaleId)
            Me.columnDataDa = New DataColumn("DataDa", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataDa)
            Me.columnDataA = New DataColumn("DataA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataA)
            Me.columnOraDa = New DataColumn("OraDa", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraDa)
            Me.columnORDINE = New DataColumn("ORDINE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnORDINE)
            Me.columnCODICE = New DataColumn("CODICE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCODICE)
            Me.columnOraA = New DataColumn("OraA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraA)
            Me.columnOra_Da = New DataColumn("Ora_Da", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOra_Da)
            Me.columnMinuti_Da = New DataColumn("Minuti_Da", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMinuti_Da)
            Me.columnOra_A = New DataColumn("Ora_A", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOra_A)
            Me.columnMinuti_A = New DataColumn("Minuti_A", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMinuti_A)
            Me.columnStatoGiustificativo = New DataColumn("StatoGiustificativo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoGiustificativo)
            Me.columnDataRichiesta = New DataColumn("DataRichiesta", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataRichiesta)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnApprovatoDa = New DataColumn("ApprovatoDa", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatoDa)
            Me.columnCreatedOn = New DataColumn("CreatedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedOn)
            Me.columnModifiedOn = New DataColumn("ModifiedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedOn)
            Me.columnCreatedBy = New DataColumn("CreatedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedBy)
            Me.columnModifiedBy = New DataColumn("ModifiedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedBy)
            Me.columnCognomeNome = New DataColumn("CognomeNome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNome)
            Me.columnCausale = New DataColumn("Causale", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCausale)
            Me.columnFrazionato = New DataColumn("Frazionato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrazionato)
            Me.columnDefaultApprovato = New DataColumn("DefaultApprovato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDefaultApprovato)
            Me.columnPreavvisoGG = New DataColumn("PreavvisoGG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreavvisoGG)
            Me.columnNrMaxGG = New DataColumn("NrMaxGG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNrMaxGG)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.Constraints.Add(New UniqueConstraint("dsGiustificativiKey1", New DataColumn() {Me.columnID}, true))
            Me.columnApprovatore.ReadOnly = true
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnAccertatoreId.AllowDBNull = false
            Me.columnORDINE.ReadOnly = true
            Me.columnOra_Da.ReadOnly = true
            Me.columnMinuti_Da.ReadOnly = true
            Me.columnOra_A.ReadOnly = true
            Me.columnMinuti_A.ReadOnly = true
            Me.columnCognomeNome.ReadOnly = true
            Me.columnStatoApprovazione.ReadOnly = true
        End Sub
        
        Public Function NewAccertatori_GiustificativoRichiestaRow() As Accertatori_GiustificativoRichiestaRow
            Return CType(Me.NewRow,Accertatori_GiustificativoRichiestaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Accertatori_GiustificativoRichiestaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Accertatori_GiustificativoRichiestaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Accertatori_GiustificativoRichiestaRowChangedEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoRichiestaRowChanged(Me, New Accertatori_GiustificativoRichiestaRowChangeEvent(CType(e.Row,Accertatori_GiustificativoRichiestaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Accertatori_GiustificativoRichiestaRowChangingEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoRichiestaRowChanging(Me, New Accertatori_GiustificativoRichiestaRowChangeEvent(CType(e.Row,Accertatori_GiustificativoRichiestaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Accertatori_GiustificativoRichiestaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoRichiestaRowDeleted(Me, New Accertatori_GiustificativoRichiestaRowChangeEvent(CType(e.Row,Accertatori_GiustificativoRichiestaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Accertatori_GiustificativoRichiestaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoRichiestaRowDeleting(Me, New Accertatori_GiustificativoRichiestaRowChangeEvent(CType(e.Row,Accertatori_GiustificativoRichiestaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatori_GiustificativoRichiestaRow(ByVal row As Accertatori_GiustificativoRichiestaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_GiustificativoRichiestaRow
        Inherits DataRow
        
        Private tableAccertatori_GiustificativoRichiesta As Accertatori_GiustificativoRichiestaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatori_GiustificativoRichiesta = CType(Me.Table,Accertatori_GiustificativoRichiestaDataTable)
        End Sub
        
        Public Property Approvatore As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property ID As System.Guid
            Get
                Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.IDColumn),System.Guid)
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.IDColumn) = value
            End Set
        End Property
        
        Public Property AccertatoreId As Integer
            Get
                Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.AccertatoreIdColumn),Integer)
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.AccertatoreIdColumn) = value
            End Set
        End Property
        
        Public Property Accertatori_GiustificativoCausaleId As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.Accertatori_GiustificativoCausaleIdColumn),System.Guid)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.Accertatori_GiustificativoCausaleIdColumn) = value
            End Set
        End Property
        
        Public Property DataDa As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DataDaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DataDaColumn) = value
            End Set
        End Property
        
        Public Property DataA As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DataAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DataAColumn) = value
            End Set
        End Property
        
        Public Property OraDa As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.OraDaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.OraDaColumn) = value
            End Set
        End Property
        
        Public Property ORDINE As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ORDINEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ORDINEColumn) = value
            End Set
        End Property
        
        Public Property CODICE As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.CODICEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.CODICEColumn) = value
            End Set
        End Property
        
        Public Property OraA As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.OraAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.OraAColumn) = value
            End Set
        End Property
        
        Public Property Ora_Da As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.Ora_DaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.Ora_DaColumn) = value
            End Set
        End Property
        
        Public Property Minuti_Da As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.Minuti_DaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.Minuti_DaColumn) = value
            End Set
        End Property
        
        Public Property Ora_A As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.Ora_AColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.Ora_AColumn) = value
            End Set
        End Property
        
        Public Property Minuti_A As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.Minuti_AColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.Minuti_AColumn) = value
            End Set
        End Property
        
        Public Property StatoGiustificativo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.StatoGiustificativoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.StatoGiustificativoColumn) = value
            End Set
        End Property
        
        Public Property DataRichiesta As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DataRichiestaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DataRichiestaColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property ApprovatoDa As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoDaColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoDaColumn) = value
            End Set
        End Property
        
        Public Property CreatedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedOnColumn) = value
            End Set
        End Property
        
        Public Property ModifiedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedOnColumn) = value
            End Set
        End Property
        
        Public Property CreatedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedByColumn) = value
            End Set
        End Property
        
        Public Property ModifiedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedByColumn) = value
            End Set
        End Property
        
        Public Property CognomeNome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.CognomeNomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.CognomeNomeColumn) = value
            End Set
        End Property
        
        Public Property Causale As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.CausaleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.CausaleColumn) = value
            End Set
        End Property
        
        Public Property Frazionato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.FrazionatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.FrazionatoColumn) = value
            End Set
        End Property
        
        Public Property DefaultApprovato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DefaultApprovatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DefaultApprovatoColumn) = value
            End Set
        End Property
        
        Public Property PreavvisoGG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.PreavvisoGGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.PreavvisoGGColumn) = value
            End Set
        End Property
        
        Public Property NrMaxGG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.NrMaxGGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.NrMaxGGColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.StatoApprovazioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Function IsApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoreColumn)
        End Function
        
        Public Sub SetApprovatoreNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAccertatori_GiustificativoCausaleIdNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.Accertatori_GiustificativoCausaleIdColumn)
        End Function
        
        Public Sub SetAccertatori_GiustificativoCausaleIdNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.Accertatori_GiustificativoCausaleIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DataDaColumn)
        End Function
        
        Public Sub SetDataDaNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DataDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataANull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DataAColumn)
        End Function
        
        Public Sub SetDataANull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DataAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.OraDaColumn)
        End Function
        
        Public Sub SetOraDaNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.OraDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsORDINENull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ORDINEColumn)
        End Function
        
        Public Sub SetORDINENull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ORDINEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCODICENull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.CODICEColumn)
        End Function
        
        Public Sub SetCODICENull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.CODICEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraANull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.OraAColumn)
        End Function
        
        Public Sub SetOraANull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.OraAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOra_DaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.Ora_DaColumn)
        End Function
        
        Public Sub SetOra_DaNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.Ora_DaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMinuti_DaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.Minuti_DaColumn)
        End Function
        
        Public Sub SetMinuti_DaNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.Minuti_DaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOra_ANull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.Ora_AColumn)
        End Function
        
        Public Sub SetOra_ANull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.Ora_AColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMinuti_ANull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.Minuti_AColumn)
        End Function
        
        Public Sub SetMinuti_ANull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.Minuti_AColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoGiustificativoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.StatoGiustificativoColumn)
        End Function
        
        Public Sub SetStatoGiustificativoNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.StatoGiustificativoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataRichiestaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DataRichiestaColumn)
        End Function
        
        Public Sub SetDataRichiestaNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DataRichiestaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApprovatoDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoDaColumn)
        End Function
        
        Public Sub SetApprovatoDaNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.CreatedOnColumn)
        End Function
        
        Public Sub SetCreatedOnNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ModifiedOnColumn)
        End Function
        
        Public Sub SetModifiedOnNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.CreatedByColumn)
        End Function
        
        Public Sub SetCreatedByNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ModifiedByColumn)
        End Function
        
        Public Sub SetModifiedByNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.CognomeNomeColumn)
        End Function
        
        Public Sub SetCognomeNomeNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.CognomeNomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCausaleNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.CausaleColumn)
        End Function
        
        Public Sub SetCausaleNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.CausaleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFrazionatoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.FrazionatoColumn)
        End Function
        
        Public Sub SetFrazionatoNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.FrazionatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDefaultApprovatoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DefaultApprovatoColumn)
        End Function
        
        Public Sub SetDefaultApprovatoNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DefaultApprovatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreavvisoGGNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.PreavvisoGGColumn)
        End Function
        
        Public Sub SetPreavvisoGGNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.PreavvisoGGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNrMaxGGNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.NrMaxGGColumn)
        End Function
        
        Public Sub SetNrMaxGGNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.NrMaxGGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_GiustificativoRichiestaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Accertatori_GiustificativoRichiestaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Accertatori_GiustificativoRichiestaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Accertatori_GiustificativoRichiestaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
