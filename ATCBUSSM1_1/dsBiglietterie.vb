'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2490
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsBiglietterie
    Inherits DataSet
    
    Private tableCentroInBici_Parentela As CentroInBici_ParentelaDataTable
    
    Private tableCentroInBici_Allegati As CentroInBici_AllegatiDataTable
    
    Private tableCentroInBici_Note As CentroInBici_NoteDataTable
    
    Private tableAutoParchimetri_Tipi As AutoParchimetri_TipiDataTable
    
    Private tableAutoParchimetri_Venduti As AutoParchimetri_VendutiDataTable
    
    Private tableAutoParchimetri_Anagrafica As AutoParchimetri_AnagraficaDataTable
    
    Private tableBikePark As BikeParkDataTable
    
    Private tableBikePark_Allegati As BikePark_AllegatiDataTable
    
    Private tableCentroInBici_TipoDocumento As CentroInBici_TipoDocumentoDataTable
    
    Private tableCOMUNIPROV As COMUNIPROVDataTable
    
    Private tableBikePark_TipoNota As BikePark_TipoNotaDataTable
    
    Private tableBikePark_Note As BikePark_NoteDataTable
    
    Private tableBikeParkLista As BikeParkListaDataTable
    
    Private tableCentroInBici_DurataAbbonamento As CentroInBici_DurataAbbonamentoDataTable
    
    Private tableCentroInBici_OrigineAbbonamento As CentroInBici_OrigineAbbonamentoDataTable
    
    Private tableCentroInBici_TipoAbbonamento As CentroInBici_TipoAbbonamentoDataTable
    
    Private tableCentroInBici_TipoNota As CentroInBici_TipoNotaDataTable
    
    Private tableCentroInBici As CentroInBiciDataTable
    
    Private tableAutoParchimetri_Anagrafiche As AutoParchimetri_AnagraficheDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CentroInBici_Parentela")) Is Nothing) Then
                Me.Tables.Add(New CentroInBici_ParentelaDataTable(ds.Tables("CentroInBici_Parentela")))
            End If
            If (Not (ds.Tables("CentroInBici_Allegati")) Is Nothing) Then
                Me.Tables.Add(New CentroInBici_AllegatiDataTable(ds.Tables("CentroInBici_Allegati")))
            End If
            If (Not (ds.Tables("CentroInBici_Note")) Is Nothing) Then
                Me.Tables.Add(New CentroInBici_NoteDataTable(ds.Tables("CentroInBici_Note")))
            End If
            If (Not (ds.Tables("AutoParchimetri_Tipi")) Is Nothing) Then
                Me.Tables.Add(New AutoParchimetri_TipiDataTable(ds.Tables("AutoParchimetri_Tipi")))
            End If
            If (Not (ds.Tables("AutoParchimetri_Venduti")) Is Nothing) Then
                Me.Tables.Add(New AutoParchimetri_VendutiDataTable(ds.Tables("AutoParchimetri_Venduti")))
            End If
            If (Not (ds.Tables("AutoParchimetri_Anagrafica")) Is Nothing) Then
                Me.Tables.Add(New AutoParchimetri_AnagraficaDataTable(ds.Tables("AutoParchimetri_Anagrafica")))
            End If
            If (Not (ds.Tables("BikePark")) Is Nothing) Then
                Me.Tables.Add(New BikeParkDataTable(ds.Tables("BikePark")))
            End If
            If (Not (ds.Tables("BikePark_Allegati")) Is Nothing) Then
                Me.Tables.Add(New BikePark_AllegatiDataTable(ds.Tables("BikePark_Allegati")))
            End If
            If (Not (ds.Tables("CentroInBici_TipoDocumento")) Is Nothing) Then
                Me.Tables.Add(New CentroInBici_TipoDocumentoDataTable(ds.Tables("CentroInBici_TipoDocumento")))
            End If
            If (Not (ds.Tables("COMUNIPROV")) Is Nothing) Then
                Me.Tables.Add(New COMUNIPROVDataTable(ds.Tables("COMUNIPROV")))
            End If
            If (Not (ds.Tables("BikePark_TipoNota")) Is Nothing) Then
                Me.Tables.Add(New BikePark_TipoNotaDataTable(ds.Tables("BikePark_TipoNota")))
            End If
            If (Not (ds.Tables("BikePark_Note")) Is Nothing) Then
                Me.Tables.Add(New BikePark_NoteDataTable(ds.Tables("BikePark_Note")))
            End If
            If (Not (ds.Tables("BikeParkLista")) Is Nothing) Then
                Me.Tables.Add(New BikeParkListaDataTable(ds.Tables("BikeParkLista")))
            End If
            If (Not (ds.Tables("CentroInBici_DurataAbbonamento")) Is Nothing) Then
                Me.Tables.Add(New CentroInBici_DurataAbbonamentoDataTable(ds.Tables("CentroInBici_DurataAbbonamento")))
            End If
            If (Not (ds.Tables("CentroInBici_OrigineAbbonamento")) Is Nothing) Then
                Me.Tables.Add(New CentroInBici_OrigineAbbonamentoDataTable(ds.Tables("CentroInBici_OrigineAbbonamento")))
            End If
            If (Not (ds.Tables("CentroInBici_TipoAbbonamento")) Is Nothing) Then
                Me.Tables.Add(New CentroInBici_TipoAbbonamentoDataTable(ds.Tables("CentroInBici_TipoAbbonamento")))
            End If
            If (Not (ds.Tables("CentroInBici_TipoNota")) Is Nothing) Then
                Me.Tables.Add(New CentroInBici_TipoNotaDataTable(ds.Tables("CentroInBici_TipoNota")))
            End If
            If (Not (ds.Tables("CentroInBici")) Is Nothing) Then
                Me.Tables.Add(New CentroInBiciDataTable(ds.Tables("CentroInBici")))
            End If
            If (Not (ds.Tables("AutoParchimetri_Anagrafiche")) Is Nothing) Then
                Me.Tables.Add(New AutoParchimetri_AnagraficheDataTable(ds.Tables("AutoParchimetri_Anagrafiche")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroInBici_Parentela As CentroInBici_ParentelaDataTable
        Get
            Return Me.tableCentroInBici_Parentela
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroInBici_Allegati As CentroInBici_AllegatiDataTable
        Get
            Return Me.tableCentroInBici_Allegati
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroInBici_Note As CentroInBici_NoteDataTable
        Get
            Return Me.tableCentroInBici_Note
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AutoParchimetri_Tipi As AutoParchimetri_TipiDataTable
        Get
            Return Me.tableAutoParchimetri_Tipi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AutoParchimetri_Venduti As AutoParchimetri_VendutiDataTable
        Get
            Return Me.tableAutoParchimetri_Venduti
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AutoParchimetri_Anagrafica As AutoParchimetri_AnagraficaDataTable
        Get
            Return Me.tableAutoParchimetri_Anagrafica
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BikePark As BikeParkDataTable
        Get
            Return Me.tableBikePark
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BikePark_Allegati As BikePark_AllegatiDataTable
        Get
            Return Me.tableBikePark_Allegati
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroInBici_TipoDocumento As CentroInBici_TipoDocumentoDataTable
        Get
            Return Me.tableCentroInBici_TipoDocumento
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COMUNIPROV As COMUNIPROVDataTable
        Get
            Return Me.tableCOMUNIPROV
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BikePark_TipoNota As BikePark_TipoNotaDataTable
        Get
            Return Me.tableBikePark_TipoNota
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BikePark_Note As BikePark_NoteDataTable
        Get
            Return Me.tableBikePark_Note
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BikeParkLista As BikeParkListaDataTable
        Get
            Return Me.tableBikeParkLista
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroInBici_DurataAbbonamento As CentroInBici_DurataAbbonamentoDataTable
        Get
            Return Me.tableCentroInBici_DurataAbbonamento
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroInBici_OrigineAbbonamento As CentroInBici_OrigineAbbonamentoDataTable
        Get
            Return Me.tableCentroInBici_OrigineAbbonamento
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroInBici_TipoAbbonamento As CentroInBici_TipoAbbonamentoDataTable
        Get
            Return Me.tableCentroInBici_TipoAbbonamento
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroInBici_TipoNota As CentroInBici_TipoNotaDataTable
        Get
            Return Me.tableCentroInBici_TipoNota
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroInBici As CentroInBiciDataTable
        Get
            Return Me.tableCentroInBici
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AutoParchimetri_Anagrafiche As AutoParchimetri_AnagraficheDataTable
        Get
            Return Me.tableAutoParchimetri_Anagrafiche
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsBiglietterie = CType(MyBase.Clone,dsBiglietterie)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("CentroInBici_Parentela")) Is Nothing) Then
            Me.Tables.Add(New CentroInBici_ParentelaDataTable(ds.Tables("CentroInBici_Parentela")))
        End If
        If (Not (ds.Tables("CentroInBici_Allegati")) Is Nothing) Then
            Me.Tables.Add(New CentroInBici_AllegatiDataTable(ds.Tables("CentroInBici_Allegati")))
        End If
        If (Not (ds.Tables("CentroInBici_Note")) Is Nothing) Then
            Me.Tables.Add(New CentroInBici_NoteDataTable(ds.Tables("CentroInBici_Note")))
        End If
        If (Not (ds.Tables("AutoParchimetri_Tipi")) Is Nothing) Then
            Me.Tables.Add(New AutoParchimetri_TipiDataTable(ds.Tables("AutoParchimetri_Tipi")))
        End If
        If (Not (ds.Tables("AutoParchimetri_Venduti")) Is Nothing) Then
            Me.Tables.Add(New AutoParchimetri_VendutiDataTable(ds.Tables("AutoParchimetri_Venduti")))
        End If
        If (Not (ds.Tables("AutoParchimetri_Anagrafica")) Is Nothing) Then
            Me.Tables.Add(New AutoParchimetri_AnagraficaDataTable(ds.Tables("AutoParchimetri_Anagrafica")))
        End If
        If (Not (ds.Tables("BikePark")) Is Nothing) Then
            Me.Tables.Add(New BikeParkDataTable(ds.Tables("BikePark")))
        End If
        If (Not (ds.Tables("BikePark_Allegati")) Is Nothing) Then
            Me.Tables.Add(New BikePark_AllegatiDataTable(ds.Tables("BikePark_Allegati")))
        End If
        If (Not (ds.Tables("CentroInBici_TipoDocumento")) Is Nothing) Then
            Me.Tables.Add(New CentroInBici_TipoDocumentoDataTable(ds.Tables("CentroInBici_TipoDocumento")))
        End If
        If (Not (ds.Tables("COMUNIPROV")) Is Nothing) Then
            Me.Tables.Add(New COMUNIPROVDataTable(ds.Tables("COMUNIPROV")))
        End If
        If (Not (ds.Tables("BikePark_TipoNota")) Is Nothing) Then
            Me.Tables.Add(New BikePark_TipoNotaDataTable(ds.Tables("BikePark_TipoNota")))
        End If
        If (Not (ds.Tables("BikePark_Note")) Is Nothing) Then
            Me.Tables.Add(New BikePark_NoteDataTable(ds.Tables("BikePark_Note")))
        End If
        If (Not (ds.Tables("BikeParkLista")) Is Nothing) Then
            Me.Tables.Add(New BikeParkListaDataTable(ds.Tables("BikeParkLista")))
        End If
        If (Not (ds.Tables("CentroInBici_DurataAbbonamento")) Is Nothing) Then
            Me.Tables.Add(New CentroInBici_DurataAbbonamentoDataTable(ds.Tables("CentroInBici_DurataAbbonamento")))
        End If
        If (Not (ds.Tables("CentroInBici_OrigineAbbonamento")) Is Nothing) Then
            Me.Tables.Add(New CentroInBici_OrigineAbbonamentoDataTable(ds.Tables("CentroInBici_OrigineAbbonamento")))
        End If
        If (Not (ds.Tables("CentroInBici_TipoAbbonamento")) Is Nothing) Then
            Me.Tables.Add(New CentroInBici_TipoAbbonamentoDataTable(ds.Tables("CentroInBici_TipoAbbonamento")))
        End If
        If (Not (ds.Tables("CentroInBici_TipoNota")) Is Nothing) Then
            Me.Tables.Add(New CentroInBici_TipoNotaDataTable(ds.Tables("CentroInBici_TipoNota")))
        End If
        If (Not (ds.Tables("CentroInBici")) Is Nothing) Then
            Me.Tables.Add(New CentroInBiciDataTable(ds.Tables("CentroInBici")))
        End If
        If (Not (ds.Tables("AutoParchimetri_Anagrafiche")) Is Nothing) Then
            Me.Tables.Add(New AutoParchimetri_AnagraficheDataTable(ds.Tables("AutoParchimetri_Anagrafiche")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCentroInBici_Parentela = CType(Me.Tables("CentroInBici_Parentela"),CentroInBici_ParentelaDataTable)
        If (Not (Me.tableCentroInBici_Parentela) Is Nothing) Then
            Me.tableCentroInBici_Parentela.InitVars
        End If
        Me.tableCentroInBici_Allegati = CType(Me.Tables("CentroInBici_Allegati"),CentroInBici_AllegatiDataTable)
        If (Not (Me.tableCentroInBici_Allegati) Is Nothing) Then
            Me.tableCentroInBici_Allegati.InitVars
        End If
        Me.tableCentroInBici_Note = CType(Me.Tables("CentroInBici_Note"),CentroInBici_NoteDataTable)
        If (Not (Me.tableCentroInBici_Note) Is Nothing) Then
            Me.tableCentroInBici_Note.InitVars
        End If
        Me.tableAutoParchimetri_Tipi = CType(Me.Tables("AutoParchimetri_Tipi"),AutoParchimetri_TipiDataTable)
        If (Not (Me.tableAutoParchimetri_Tipi) Is Nothing) Then
            Me.tableAutoParchimetri_Tipi.InitVars
        End If
        Me.tableAutoParchimetri_Venduti = CType(Me.Tables("AutoParchimetri_Venduti"),AutoParchimetri_VendutiDataTable)
        If (Not (Me.tableAutoParchimetri_Venduti) Is Nothing) Then
            Me.tableAutoParchimetri_Venduti.InitVars
        End If
        Me.tableAutoParchimetri_Anagrafica = CType(Me.Tables("AutoParchimetri_Anagrafica"),AutoParchimetri_AnagraficaDataTable)
        If (Not (Me.tableAutoParchimetri_Anagrafica) Is Nothing) Then
            Me.tableAutoParchimetri_Anagrafica.InitVars
        End If
        Me.tableBikePark = CType(Me.Tables("BikePark"),BikeParkDataTable)
        If (Not (Me.tableBikePark) Is Nothing) Then
            Me.tableBikePark.InitVars
        End If
        Me.tableBikePark_Allegati = CType(Me.Tables("BikePark_Allegati"),BikePark_AllegatiDataTable)
        If (Not (Me.tableBikePark_Allegati) Is Nothing) Then
            Me.tableBikePark_Allegati.InitVars
        End If
        Me.tableCentroInBici_TipoDocumento = CType(Me.Tables("CentroInBici_TipoDocumento"),CentroInBici_TipoDocumentoDataTable)
        If (Not (Me.tableCentroInBici_TipoDocumento) Is Nothing) Then
            Me.tableCentroInBici_TipoDocumento.InitVars
        End If
        Me.tableCOMUNIPROV = CType(Me.Tables("COMUNIPROV"),COMUNIPROVDataTable)
        If (Not (Me.tableCOMUNIPROV) Is Nothing) Then
            Me.tableCOMUNIPROV.InitVars
        End If
        Me.tableBikePark_TipoNota = CType(Me.Tables("BikePark_TipoNota"),BikePark_TipoNotaDataTable)
        If (Not (Me.tableBikePark_TipoNota) Is Nothing) Then
            Me.tableBikePark_TipoNota.InitVars
        End If
        Me.tableBikePark_Note = CType(Me.Tables("BikePark_Note"),BikePark_NoteDataTable)
        If (Not (Me.tableBikePark_Note) Is Nothing) Then
            Me.tableBikePark_Note.InitVars
        End If
        Me.tableBikeParkLista = CType(Me.Tables("BikeParkLista"),BikeParkListaDataTable)
        If (Not (Me.tableBikeParkLista) Is Nothing) Then
            Me.tableBikeParkLista.InitVars
        End If
        Me.tableCentroInBici_DurataAbbonamento = CType(Me.Tables("CentroInBici_DurataAbbonamento"),CentroInBici_DurataAbbonamentoDataTable)
        If (Not (Me.tableCentroInBici_DurataAbbonamento) Is Nothing) Then
            Me.tableCentroInBici_DurataAbbonamento.InitVars
        End If
        Me.tableCentroInBici_OrigineAbbonamento = CType(Me.Tables("CentroInBici_OrigineAbbonamento"),CentroInBici_OrigineAbbonamentoDataTable)
        If (Not (Me.tableCentroInBici_OrigineAbbonamento) Is Nothing) Then
            Me.tableCentroInBici_OrigineAbbonamento.InitVars
        End If
        Me.tableCentroInBici_TipoAbbonamento = CType(Me.Tables("CentroInBici_TipoAbbonamento"),CentroInBici_TipoAbbonamentoDataTable)
        If (Not (Me.tableCentroInBici_TipoAbbonamento) Is Nothing) Then
            Me.tableCentroInBici_TipoAbbonamento.InitVars
        End If
        Me.tableCentroInBici_TipoNota = CType(Me.Tables("CentroInBici_TipoNota"),CentroInBici_TipoNotaDataTable)
        If (Not (Me.tableCentroInBici_TipoNota) Is Nothing) Then
            Me.tableCentroInBici_TipoNota.InitVars
        End If
        Me.tableCentroInBici = CType(Me.Tables("CentroInBici"),CentroInBiciDataTable)
        If (Not (Me.tableCentroInBici) Is Nothing) Then
            Me.tableCentroInBici.InitVars
        End If
        Me.tableAutoParchimetri_Anagrafiche = CType(Me.Tables("AutoParchimetri_Anagrafiche"),AutoParchimetri_AnagraficheDataTable)
        If (Not (Me.tableAutoParchimetri_Anagrafiche) Is Nothing) Then
            Me.tableAutoParchimetri_Anagrafiche.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsBiglietterie"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsBiglietterie.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCentroInBici_Parentela = New CentroInBici_ParentelaDataTable
        Me.Tables.Add(Me.tableCentroInBici_Parentela)
        Me.tableCentroInBici_Allegati = New CentroInBici_AllegatiDataTable
        Me.Tables.Add(Me.tableCentroInBici_Allegati)
        Me.tableCentroInBici_Note = New CentroInBici_NoteDataTable
        Me.Tables.Add(Me.tableCentroInBici_Note)
        Me.tableAutoParchimetri_Tipi = New AutoParchimetri_TipiDataTable
        Me.Tables.Add(Me.tableAutoParchimetri_Tipi)
        Me.tableAutoParchimetri_Venduti = New AutoParchimetri_VendutiDataTable
        Me.Tables.Add(Me.tableAutoParchimetri_Venduti)
        Me.tableAutoParchimetri_Anagrafica = New AutoParchimetri_AnagraficaDataTable
        Me.Tables.Add(Me.tableAutoParchimetri_Anagrafica)
        Me.tableBikePark = New BikeParkDataTable
        Me.Tables.Add(Me.tableBikePark)
        Me.tableBikePark_Allegati = New BikePark_AllegatiDataTable
        Me.Tables.Add(Me.tableBikePark_Allegati)
        Me.tableCentroInBici_TipoDocumento = New CentroInBici_TipoDocumentoDataTable
        Me.Tables.Add(Me.tableCentroInBici_TipoDocumento)
        Me.tableCOMUNIPROV = New COMUNIPROVDataTable
        Me.Tables.Add(Me.tableCOMUNIPROV)
        Me.tableBikePark_TipoNota = New BikePark_TipoNotaDataTable
        Me.Tables.Add(Me.tableBikePark_TipoNota)
        Me.tableBikePark_Note = New BikePark_NoteDataTable
        Me.Tables.Add(Me.tableBikePark_Note)
        Me.tableBikeParkLista = New BikeParkListaDataTable
        Me.Tables.Add(Me.tableBikeParkLista)
        Me.tableCentroInBici_DurataAbbonamento = New CentroInBici_DurataAbbonamentoDataTable
        Me.Tables.Add(Me.tableCentroInBici_DurataAbbonamento)
        Me.tableCentroInBici_OrigineAbbonamento = New CentroInBici_OrigineAbbonamentoDataTable
        Me.Tables.Add(Me.tableCentroInBici_OrigineAbbonamento)
        Me.tableCentroInBici_TipoAbbonamento = New CentroInBici_TipoAbbonamentoDataTable
        Me.Tables.Add(Me.tableCentroInBici_TipoAbbonamento)
        Me.tableCentroInBici_TipoNota = New CentroInBici_TipoNotaDataTable
        Me.Tables.Add(Me.tableCentroInBici_TipoNota)
        Me.tableCentroInBici = New CentroInBiciDataTable
        Me.Tables.Add(Me.tableCentroInBici)
        Me.tableAutoParchimetri_Anagrafiche = New AutoParchimetri_AnagraficheDataTable
        Me.Tables.Add(Me.tableAutoParchimetri_Anagrafiche)
    End Sub
    
    Private Function ShouldSerializeCentroInBici_Parentela() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCentroInBici_Allegati() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCentroInBici_Note() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAutoParchimetri_Tipi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAutoParchimetri_Venduti() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAutoParchimetri_Anagrafica() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBikePark() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBikePark_Allegati() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCentroInBici_TipoDocumento() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCOMUNIPROV() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBikePark_TipoNota() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBikePark_Note() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBikeParkLista() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCentroInBici_DurataAbbonamento() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCentroInBici_OrigineAbbonamento() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCentroInBici_TipoAbbonamento() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCentroInBici_TipoNota() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCentroInBici() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAutoParchimetri_Anagrafiche() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CentroInBici_ParentelaRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroInBici_ParentelaRowChangeEvent)
    
    Public Delegate Sub CentroInBici_AllegatiRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroInBici_AllegatiRowChangeEvent)
    
    Public Delegate Sub CentroInBici_NoteRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroInBici_NoteRowChangeEvent)
    
    Public Delegate Sub AutoParchimetri_TipiRowChangeEventHandler(ByVal sender As Object, ByVal e As AutoParchimetri_TipiRowChangeEvent)
    
    Public Delegate Sub AutoParchimetri_VendutiRowChangeEventHandler(ByVal sender As Object, ByVal e As AutoParchimetri_VendutiRowChangeEvent)
    
    Public Delegate Sub AutoParchimetri_AnagraficaRowChangeEventHandler(ByVal sender As Object, ByVal e As AutoParchimetri_AnagraficaRowChangeEvent)
    
    Public Delegate Sub BikeParkRowChangeEventHandler(ByVal sender As Object, ByVal e As BikeParkRowChangeEvent)
    
    Public Delegate Sub BikePark_AllegatiRowChangeEventHandler(ByVal sender As Object, ByVal e As BikePark_AllegatiRowChangeEvent)
    
    Public Delegate Sub CentroInBici_TipoDocumentoRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroInBici_TipoDocumentoRowChangeEvent)
    
    Public Delegate Sub COMUNIPROVRowChangeEventHandler(ByVal sender As Object, ByVal e As COMUNIPROVRowChangeEvent)
    
    Public Delegate Sub BikePark_TipoNotaRowChangeEventHandler(ByVal sender As Object, ByVal e As BikePark_TipoNotaRowChangeEvent)
    
    Public Delegate Sub BikePark_NoteRowChangeEventHandler(ByVal sender As Object, ByVal e As BikePark_NoteRowChangeEvent)
    
    Public Delegate Sub BikeParkListaRowChangeEventHandler(ByVal sender As Object, ByVal e As BikeParkListaRowChangeEvent)
    
    Public Delegate Sub CentroInBici_DurataAbbonamentoRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroInBici_DurataAbbonamentoRowChangeEvent)
    
    Public Delegate Sub CentroInBici_OrigineAbbonamentoRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroInBici_OrigineAbbonamentoRowChangeEvent)
    
    Public Delegate Sub CentroInBici_TipoAbbonamentoRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroInBici_TipoAbbonamentoRowChangeEvent)
    
    Public Delegate Sub CentroInBici_TipoNotaRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroInBici_TipoNotaRowChangeEvent)
    
    Public Delegate Sub CentroInBiciRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroInBiciRowChangeEvent)
    
    Public Delegate Sub AutoParchimetri_AnagraficheRowChangeEventHandler(ByVal sender As Object, ByVal e As AutoParchimetri_AnagraficheRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_ParentelaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnDescrizione As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroInBici_Parentela")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneColumn As DataColumn
            Get
                Return Me.columnDescrizione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroInBici_ParentelaRow
            Get
                Return CType(Me.Rows(index),CentroInBici_ParentelaRow)
            End Get
        End Property
        
        Public Event CentroInBici_ParentelaRowChanged As CentroInBici_ParentelaRowChangeEventHandler
        
        Public Event CentroInBici_ParentelaRowChanging As CentroInBici_ParentelaRowChangeEventHandler
        
        Public Event CentroInBici_ParentelaRowDeleted As CentroInBici_ParentelaRowChangeEventHandler
        
        Public Event CentroInBici_ParentelaRowDeleting As CentroInBici_ParentelaRowChangeEventHandler
        
        Public Overloads Sub AddCentroInBici_ParentelaRow(ByVal row As CentroInBici_ParentelaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroInBici_ParentelaRow(ByVal Descrizione As String) As CentroInBici_ParentelaRow
            Dim rowCentroInBici_ParentelaRow As CentroInBici_ParentelaRow = CType(Me.NewRow,CentroInBici_ParentelaRow)
            rowCentroInBici_ParentelaRow.ItemArray = New Object() {Nothing, Descrizione}
            Me.Rows.Add(rowCentroInBici_ParentelaRow)
            Return rowCentroInBici_ParentelaRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As CentroInBici_ParentelaRow
            Return CType(Me.Rows.Find(New Object() {Id}),CentroInBici_ParentelaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroInBici_ParentelaDataTable = CType(MyBase.Clone,CentroInBici_ParentelaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroInBici_ParentelaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnDescrizione = Me.Columns("Descrizione")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnDescrizione = New DataColumn("Descrizione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewCentroInBici_ParentelaRow() As CentroInBici_ParentelaRow
            Return CType(Me.NewRow,CentroInBici_ParentelaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroInBici_ParentelaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroInBici_ParentelaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroInBici_ParentelaRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_ParentelaRowChanged(Me, New CentroInBici_ParentelaRowChangeEvent(CType(e.Row,CentroInBici_ParentelaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroInBici_ParentelaRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_ParentelaRowChanging(Me, New CentroInBici_ParentelaRowChangeEvent(CType(e.Row,CentroInBici_ParentelaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroInBici_ParentelaRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_ParentelaRowDeleted(Me, New CentroInBici_ParentelaRowChangeEvent(CType(e.Row,CentroInBici_ParentelaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroInBici_ParentelaRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_ParentelaRowDeleting(Me, New CentroInBici_ParentelaRowChangeEvent(CType(e.Row,CentroInBici_ParentelaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroInBici_ParentelaRow(ByVal row As CentroInBici_ParentelaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_ParentelaRow
        Inherits DataRow
        
        Private tableCentroInBici_Parentela As CentroInBici_ParentelaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroInBici_Parentela = CType(Me.Table,CentroInBici_ParentelaDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableCentroInBici_Parentela.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableCentroInBici_Parentela.IdColumn) = value
            End Set
        End Property
        
        Public Property Descrizione As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_Parentela.DescrizioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_Parentela.DescrizioneColumn) = value
            End Set
        End Property
        
        Public Function IsDescrizioneNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_Parentela.DescrizioneColumn)
        End Function
        
        Public Sub SetDescrizioneNull()
            Me(Me.tableCentroInBici_Parentela.DescrizioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_ParentelaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroInBici_ParentelaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroInBici_ParentelaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroInBici_ParentelaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_AllegatiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdAnagrafica As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnFileName As DataColumn
        
        Private columnExtension As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroInBici_Allegati")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdAnagraficaColumn As DataColumn
            Get
                Return Me.columnIdAnagrafica
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property FileNameColumn As DataColumn
            Get
                Return Me.columnFileName
            End Get
        End Property
        
        Friend ReadOnly Property ExtensionColumn As DataColumn
            Get
                Return Me.columnExtension
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroInBici_AllegatiRow
            Get
                Return CType(Me.Rows(index),CentroInBici_AllegatiRow)
            End Get
        End Property
        
        Public Event CentroInBici_AllegatiRowChanged As CentroInBici_AllegatiRowChangeEventHandler
        
        Public Event CentroInBici_AllegatiRowChanging As CentroInBici_AllegatiRowChangeEventHandler
        
        Public Event CentroInBici_AllegatiRowDeleted As CentroInBici_AllegatiRowChangeEventHandler
        
        Public Event CentroInBici_AllegatiRowDeleting As CentroInBici_AllegatiRowChangeEventHandler
        
        Public Overloads Sub AddCentroInBici_AllegatiRow(ByVal row As CentroInBici_AllegatiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroInBici_AllegatiRow(ByVal Id As System.Guid, ByVal IdAnagrafica As Integer, ByVal Description As String, ByVal FileName As String, ByVal Extension As String) As CentroInBici_AllegatiRow
            Dim rowCentroInBici_AllegatiRow As CentroInBici_AllegatiRow = CType(Me.NewRow,CentroInBici_AllegatiRow)
            rowCentroInBici_AllegatiRow.ItemArray = New Object() {Id, IdAnagrafica, Description, FileName, Extension}
            Me.Rows.Add(rowCentroInBici_AllegatiRow)
            Return rowCentroInBici_AllegatiRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As CentroInBici_AllegatiRow
            Return CType(Me.Rows.Find(New Object() {Id}),CentroInBici_AllegatiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroInBici_AllegatiDataTable = CType(MyBase.Clone,CentroInBici_AllegatiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroInBici_AllegatiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdAnagrafica = Me.Columns("IdAnagrafica")
            Me.columnDescription = Me.Columns("Description")
            Me.columnFileName = Me.Columns("FileName")
            Me.columnExtension = Me.Columns("Extension")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdAnagrafica = New DataColumn("IdAnagrafica", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAnagrafica)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnFileName = New DataColumn("FileName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFileName)
            Me.columnExtension = New DataColumn("Extension", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExtension)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewCentroInBici_AllegatiRow() As CentroInBici_AllegatiRow
            Return CType(Me.NewRow,CentroInBici_AllegatiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroInBici_AllegatiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroInBici_AllegatiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroInBici_AllegatiRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_AllegatiRowChanged(Me, New CentroInBici_AllegatiRowChangeEvent(CType(e.Row,CentroInBici_AllegatiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroInBici_AllegatiRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_AllegatiRowChanging(Me, New CentroInBici_AllegatiRowChangeEvent(CType(e.Row,CentroInBici_AllegatiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroInBici_AllegatiRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_AllegatiRowDeleted(Me, New CentroInBici_AllegatiRowChangeEvent(CType(e.Row,CentroInBici_AllegatiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroInBici_AllegatiRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_AllegatiRowDeleting(Me, New CentroInBici_AllegatiRowChangeEvent(CType(e.Row,CentroInBici_AllegatiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroInBici_AllegatiRow(ByVal row As CentroInBici_AllegatiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_AllegatiRow
        Inherits DataRow
        
        Private tableCentroInBici_Allegati As CentroInBici_AllegatiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroInBici_Allegati = CType(Me.Table,CentroInBici_AllegatiDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableCentroInBici_Allegati.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableCentroInBici_Allegati.IdColumn) = value
            End Set
        End Property
        
        Public Property IdAnagrafica As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_Allegati.IdAnagraficaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_Allegati.IdAnagraficaColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_Allegati.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_Allegati.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property FileName As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_Allegati.FileNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_Allegati.FileNameColumn) = value
            End Set
        End Property
        
        Public Property Extension As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_Allegati.ExtensionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_Allegati.ExtensionColumn) = value
            End Set
        End Property
        
        Public Function IsIdAnagraficaNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_Allegati.IdAnagraficaColumn)
        End Function
        
        Public Sub SetIdAnagraficaNull()
            Me(Me.tableCentroInBici_Allegati.IdAnagraficaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_Allegati.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableCentroInBici_Allegati.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFileNameNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_Allegati.FileNameColumn)
        End Function
        
        Public Sub SetFileNameNull()
            Me(Me.tableCentroInBici_Allegati.FileNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExtensionNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_Allegati.ExtensionColumn)
        End Function
        
        Public Sub SetExtensionNull()
            Me(Me.tableCentroInBici_Allegati.ExtensionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_AllegatiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroInBici_AllegatiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroInBici_AllegatiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroInBici_AllegatiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_NoteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdAnagrafica As DataColumn
        
        Private columnIdTipoNota As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnData As DataColumn
        
        Private columnNota As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroInBici_Note")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdAnagraficaColumn As DataColumn
            Get
                Return Me.columnIdAnagrafica
            End Get
        End Property
        
        Friend ReadOnly Property IdTipoNotaColumn As DataColumn
            Get
                Return Me.columnIdTipoNota
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property NotaColumn As DataColumn
            Get
                Return Me.columnNota
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroInBici_NoteRow
            Get
                Return CType(Me.Rows(index),CentroInBici_NoteRow)
            End Get
        End Property
        
        Public Event CentroInBici_NoteRowChanged As CentroInBici_NoteRowChangeEventHandler
        
        Public Event CentroInBici_NoteRowChanging As CentroInBici_NoteRowChangeEventHandler
        
        Public Event CentroInBici_NoteRowDeleted As CentroInBici_NoteRowChangeEventHandler
        
        Public Event CentroInBici_NoteRowDeleting As CentroInBici_NoteRowChangeEventHandler
        
        Public Overloads Sub AddCentroInBici_NoteRow(ByVal row As CentroInBici_NoteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroInBici_NoteRow(ByVal Id As System.Guid, ByVal IdAnagrafica As Integer, ByVal IdTipoNota As Integer, ByVal Tipo As String, ByVal Data As Date, ByVal Nota As String) As CentroInBici_NoteRow
            Dim rowCentroInBici_NoteRow As CentroInBici_NoteRow = CType(Me.NewRow,CentroInBici_NoteRow)
            rowCentroInBici_NoteRow.ItemArray = New Object() {Id, IdAnagrafica, IdTipoNota, Tipo, Data, Nota}
            Me.Rows.Add(rowCentroInBici_NoteRow)
            Return rowCentroInBici_NoteRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As CentroInBici_NoteRow
            Return CType(Me.Rows.Find(New Object() {Id}),CentroInBici_NoteRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroInBici_NoteDataTable = CType(MyBase.Clone,CentroInBici_NoteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroInBici_NoteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdAnagrafica = Me.Columns("IdAnagrafica")
            Me.columnIdTipoNota = Me.Columns("IdTipoNota")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnData = Me.Columns("Data")
            Me.columnNota = Me.Columns("Nota")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdAnagrafica = New DataColumn("IdAnagrafica", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAnagrafica)
            Me.columnIdTipoNota = New DataColumn("IdTipoNota", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdTipoNota)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnNota = New DataColumn("Nota", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNota)
            Me.Constraints.Add(New UniqueConstraint("dsBiglietterieKey3", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewCentroInBici_NoteRow() As CentroInBici_NoteRow
            Return CType(Me.NewRow,CentroInBici_NoteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroInBici_NoteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroInBici_NoteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroInBici_NoteRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_NoteRowChanged(Me, New CentroInBici_NoteRowChangeEvent(CType(e.Row,CentroInBici_NoteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroInBici_NoteRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_NoteRowChanging(Me, New CentroInBici_NoteRowChangeEvent(CType(e.Row,CentroInBici_NoteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroInBici_NoteRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_NoteRowDeleted(Me, New CentroInBici_NoteRowChangeEvent(CType(e.Row,CentroInBici_NoteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroInBici_NoteRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_NoteRowDeleting(Me, New CentroInBici_NoteRowChangeEvent(CType(e.Row,CentroInBici_NoteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroInBici_NoteRow(ByVal row As CentroInBici_NoteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_NoteRow
        Inherits DataRow
        
        Private tableCentroInBici_Note As CentroInBici_NoteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroInBici_Note = CType(Me.Table,CentroInBici_NoteDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableCentroInBici_Note.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableCentroInBici_Note.IdColumn) = value
            End Set
        End Property
        
        Public Property IdAnagrafica As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_Note.IdAnagraficaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_Note.IdAnagraficaColumn) = value
            End Set
        End Property
        
        Public Property IdTipoNota As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_Note.IdTipoNotaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_Note.IdTipoNotaColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_Note.TipoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_Note.TipoColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_Note.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_Note.DataColumn) = value
            End Set
        End Property
        
        Public Property Nota As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_Note.NotaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_Note.NotaColumn) = value
            End Set
        End Property
        
        Public Function IsIdAnagraficaNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_Note.IdAnagraficaColumn)
        End Function
        
        Public Sub SetIdAnagraficaNull()
            Me(Me.tableCentroInBici_Note.IdAnagraficaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdTipoNotaNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_Note.IdTipoNotaColumn)
        End Function
        
        Public Sub SetIdTipoNotaNull()
            Me(Me.tableCentroInBici_Note.IdTipoNotaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_Note.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tableCentroInBici_Note.TipoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_Note.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableCentroInBici_Note.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotaNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_Note.NotaColumn)
        End Function
        
        Public Sub SetNotaNull()
            Me(Me.tableCentroInBici_Note.NotaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_NoteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroInBici_NoteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroInBici_NoteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroInBici_NoteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetri_TipiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_DSI As DataColumn
        
        Private columnDSI As DataColumn
        
        Friend Sub New()
            MyBase.New("AutoParchimetri_Tipi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_DSIColumn As DataColumn
            Get
                Return Me.columnID_DSI
            End Get
        End Property
        
        Friend ReadOnly Property DSIColumn As DataColumn
            Get
                Return Me.columnDSI
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AutoParchimetri_TipiRow
            Get
                Return CType(Me.Rows(index),AutoParchimetri_TipiRow)
            End Get
        End Property
        
        Public Event AutoParchimetri_TipiRowChanged As AutoParchimetri_TipiRowChangeEventHandler
        
        Public Event AutoParchimetri_TipiRowChanging As AutoParchimetri_TipiRowChangeEventHandler
        
        Public Event AutoParchimetri_TipiRowDeleted As AutoParchimetri_TipiRowChangeEventHandler
        
        Public Event AutoParchimetri_TipiRowDeleting As AutoParchimetri_TipiRowChangeEventHandler
        
        Public Overloads Sub AddAutoParchimetri_TipiRow(ByVal row As AutoParchimetri_TipiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAutoParchimetri_TipiRow(ByVal DSI As String) As AutoParchimetri_TipiRow
            Dim rowAutoParchimetri_TipiRow As AutoParchimetri_TipiRow = CType(Me.NewRow,AutoParchimetri_TipiRow)
            rowAutoParchimetri_TipiRow.ItemArray = New Object() {Nothing, DSI}
            Me.Rows.Add(rowAutoParchimetri_TipiRow)
            Return rowAutoParchimetri_TipiRow
        End Function
        
        Public Function FindByID_DSI(ByVal ID_DSI As Integer) As AutoParchimetri_TipiRow
            Return CType(Me.Rows.Find(New Object() {ID_DSI}),AutoParchimetri_TipiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AutoParchimetri_TipiDataTable = CType(MyBase.Clone,AutoParchimetri_TipiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AutoParchimetri_TipiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_DSI = Me.Columns("ID_DSI")
            Me.columnDSI = Me.Columns("DSI")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_DSI = New DataColumn("ID_DSI", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_DSI)
            Me.columnDSI = New DataColumn("DSI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDSI)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID_DSI}, true))
            Me.columnID_DSI.AutoIncrement = true
            Me.columnID_DSI.AllowDBNull = false
            Me.columnID_DSI.ReadOnly = true
            Me.columnID_DSI.Unique = true
        End Sub
        
        Public Function NewAutoParchimetri_TipiRow() As AutoParchimetri_TipiRow
            Return CType(Me.NewRow,AutoParchimetri_TipiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AutoParchimetri_TipiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AutoParchimetri_TipiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AutoParchimetri_TipiRowChangedEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_TipiRowChanged(Me, New AutoParchimetri_TipiRowChangeEvent(CType(e.Row,AutoParchimetri_TipiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AutoParchimetri_TipiRowChangingEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_TipiRowChanging(Me, New AutoParchimetri_TipiRowChangeEvent(CType(e.Row,AutoParchimetri_TipiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AutoParchimetri_TipiRowDeletedEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_TipiRowDeleted(Me, New AutoParchimetri_TipiRowChangeEvent(CType(e.Row,AutoParchimetri_TipiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AutoParchimetri_TipiRowDeletingEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_TipiRowDeleting(Me, New AutoParchimetri_TipiRowChangeEvent(CType(e.Row,AutoParchimetri_TipiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAutoParchimetri_TipiRow(ByVal row As AutoParchimetri_TipiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetri_TipiRow
        Inherits DataRow
        
        Private tableAutoParchimetri_Tipi As AutoParchimetri_TipiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAutoParchimetri_Tipi = CType(Me.Table,AutoParchimetri_TipiDataTable)
        End Sub
        
        Public Property ID_DSI As Integer
            Get
                Return CType(Me(Me.tableAutoParchimetri_Tipi.ID_DSIColumn),Integer)
            End Get
            Set
                Me(Me.tableAutoParchimetri_Tipi.ID_DSIColumn) = value
            End Set
        End Property
        
        Public Property DSI As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Tipi.DSIColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Tipi.DSIColumn) = value
            End Set
        End Property
        
        Public Function IsDSINull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Tipi.DSIColumn)
        End Function
        
        Public Sub SetDSINull()
            Me(Me.tableAutoParchimetri_Tipi.DSIColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetri_TipiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AutoParchimetri_TipiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AutoParchimetri_TipiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AutoParchimetri_TipiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetri_VendutiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_AUTO As DataColumn
        
        Private columnNUMERATORE As DataColumn
        
        Private columnMATAUTO As DataColumn
        
        Private columnDATAVENDITA As DataColumn
        
        Private columnDATARESO As DataColumn
        
        Private columnDSI As DataColumn
        
        Private columnTipo As DataColumn
        
        Friend Sub New()
            MyBase.New("AutoParchimetri_Venduti")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_AUTOColumn As DataColumn
            Get
                Return Me.columnID_AUTO
            End Get
        End Property
        
        Friend ReadOnly Property NUMERATOREColumn As DataColumn
            Get
                Return Me.columnNUMERATORE
            End Get
        End Property
        
        Friend ReadOnly Property MATAUTOColumn As DataColumn
            Get
                Return Me.columnMATAUTO
            End Get
        End Property
        
        Friend ReadOnly Property DATAVENDITAColumn As DataColumn
            Get
                Return Me.columnDATAVENDITA
            End Get
        End Property
        
        Friend ReadOnly Property DATARESOColumn As DataColumn
            Get
                Return Me.columnDATARESO
            End Get
        End Property
        
        Friend ReadOnly Property DSIColumn As DataColumn
            Get
                Return Me.columnDSI
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AutoParchimetri_VendutiRow
            Get
                Return CType(Me.Rows(index),AutoParchimetri_VendutiRow)
            End Get
        End Property
        
        Public Event AutoParchimetri_VendutiRowChanged As AutoParchimetri_VendutiRowChangeEventHandler
        
        Public Event AutoParchimetri_VendutiRowChanging As AutoParchimetri_VendutiRowChangeEventHandler
        
        Public Event AutoParchimetri_VendutiRowDeleted As AutoParchimetri_VendutiRowChangeEventHandler
        
        Public Event AutoParchimetri_VendutiRowDeleting As AutoParchimetri_VendutiRowChangeEventHandler
        
        Public Overloads Sub AddAutoParchimetri_VendutiRow(ByVal row As AutoParchimetri_VendutiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAutoParchimetri_VendutiRow(ByVal ID_AUTO As Integer, ByVal NUMERATORE As Integer, ByVal MATAUTO As String, ByVal DATAVENDITA As Date, ByVal DATARESO As Date, ByVal DSI As Integer, ByVal Tipo As String) As AutoParchimetri_VendutiRow
            Dim rowAutoParchimetri_VendutiRow As AutoParchimetri_VendutiRow = CType(Me.NewRow,AutoParchimetri_VendutiRow)
            rowAutoParchimetri_VendutiRow.ItemArray = New Object() {ID_AUTO, NUMERATORE, MATAUTO, DATAVENDITA, DATARESO, DSI, Tipo}
            Me.Rows.Add(rowAutoParchimetri_VendutiRow)
            Return rowAutoParchimetri_VendutiRow
        End Function
        
        Public Function FindByID_AUTO(ByVal ID_AUTO As Integer) As AutoParchimetri_VendutiRow
            Return CType(Me.Rows.Find(New Object() {ID_AUTO}),AutoParchimetri_VendutiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AutoParchimetri_VendutiDataTable = CType(MyBase.Clone,AutoParchimetri_VendutiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AutoParchimetri_VendutiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_AUTO = Me.Columns("ID_AUTO")
            Me.columnNUMERATORE = Me.Columns("NUMERATORE")
            Me.columnMATAUTO = Me.Columns("MATAUTO")
            Me.columnDATAVENDITA = Me.Columns("DATAVENDITA")
            Me.columnDATARESO = Me.Columns("DATARESO")
            Me.columnDSI = Me.Columns("DSI")
            Me.columnTipo = Me.Columns("Tipo")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_AUTO = New DataColumn("ID_AUTO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_AUTO)
            Me.columnNUMERATORE = New DataColumn("NUMERATORE", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNUMERATORE)
            Me.columnMATAUTO = New DataColumn("MATAUTO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMATAUTO)
            Me.columnDATAVENDITA = New DataColumn("DATAVENDITA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATAVENDITA)
            Me.columnDATARESO = New DataColumn("DATARESO", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATARESO)
            Me.columnDSI = New DataColumn("DSI", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDSI)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.Constraints.Add(New UniqueConstraint("dsBiglietterieKey2", New DataColumn() {Me.columnID_AUTO}, true))
            Me.columnID_AUTO.AllowDBNull = false
            Me.columnID_AUTO.Unique = true
        End Sub
        
        Public Function NewAutoParchimetri_VendutiRow() As AutoParchimetri_VendutiRow
            Return CType(Me.NewRow,AutoParchimetri_VendutiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AutoParchimetri_VendutiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AutoParchimetri_VendutiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AutoParchimetri_VendutiRowChangedEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_VendutiRowChanged(Me, New AutoParchimetri_VendutiRowChangeEvent(CType(e.Row,AutoParchimetri_VendutiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AutoParchimetri_VendutiRowChangingEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_VendutiRowChanging(Me, New AutoParchimetri_VendutiRowChangeEvent(CType(e.Row,AutoParchimetri_VendutiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AutoParchimetri_VendutiRowDeletedEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_VendutiRowDeleted(Me, New AutoParchimetri_VendutiRowChangeEvent(CType(e.Row,AutoParchimetri_VendutiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AutoParchimetri_VendutiRowDeletingEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_VendutiRowDeleting(Me, New AutoParchimetri_VendutiRowChangeEvent(CType(e.Row,AutoParchimetri_VendutiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAutoParchimetri_VendutiRow(ByVal row As AutoParchimetri_VendutiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetri_VendutiRow
        Inherits DataRow
        
        Private tableAutoParchimetri_Venduti As AutoParchimetri_VendutiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAutoParchimetri_Venduti = CType(Me.Table,AutoParchimetri_VendutiDataTable)
        End Sub
        
        Public Property ID_AUTO As Integer
            Get
                Return CType(Me(Me.tableAutoParchimetri_Venduti.ID_AUTOColumn),Integer)
            End Get
            Set
                Me(Me.tableAutoParchimetri_Venduti.ID_AUTOColumn) = value
            End Set
        End Property
        
        Public Property NUMERATORE As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Venduti.NUMERATOREColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Venduti.NUMERATOREColumn) = value
            End Set
        End Property
        
        Public Property MATAUTO As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Venduti.MATAUTOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Venduti.MATAUTOColumn) = value
            End Set
        End Property
        
        Public Property DATAVENDITA As Date
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Venduti.DATAVENDITAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Venduti.DATAVENDITAColumn) = value
            End Set
        End Property
        
        Public Property DATARESO As Date
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Venduti.DATARESOColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Venduti.DATARESOColumn) = value
            End Set
        End Property
        
        Public Property DSI As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Venduti.DSIColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Venduti.DSIColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Venduti.TipoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Venduti.TipoColumn) = value
            End Set
        End Property
        
        Public Function IsNUMERATORENull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Venduti.NUMERATOREColumn)
        End Function
        
        Public Sub SetNUMERATORENull()
            Me(Me.tableAutoParchimetri_Venduti.NUMERATOREColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMATAUTONull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Venduti.MATAUTOColumn)
        End Function
        
        Public Sub SetMATAUTONull()
            Me(Me.tableAutoParchimetri_Venduti.MATAUTOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDATAVENDITANull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Venduti.DATAVENDITAColumn)
        End Function
        
        Public Sub SetDATAVENDITANull()
            Me(Me.tableAutoParchimetri_Venduti.DATAVENDITAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDATARESONull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Venduti.DATARESOColumn)
        End Function
        
        Public Sub SetDATARESONull()
            Me(Me.tableAutoParchimetri_Venduti.DATARESOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDSINull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Venduti.DSIColumn)
        End Function
        
        Public Sub SetDSINull()
            Me(Me.tableAutoParchimetri_Venduti.DSIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Venduti.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tableAutoParchimetri_Venduti.TipoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetri_VendutiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AutoParchimetri_VendutiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AutoParchimetri_VendutiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AutoParchimetri_VendutiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetri_AnagraficaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNUMERATORE As DataColumn
        
        Private columnDATA_INSERIMENTO As DataColumn
        
        Private columnMATRICOLA As DataColumn
        
        Private columnCOGNOME As DataColumn
        
        Private columnNOME As DataColumn
        
        Private columnVIA As DataColumn
        
        Private columnNUMEROVIA As DataColumn
        
        Private columnCITTA As DataColumn
        
        Private columnCAP As DataColumn
        
        Private columnTELEFONO As DataColumn
        
        Private columnMAIL As DataColumn
        
        Private columnDSI As DataColumn
        
        Private columnATTIVA As DataColumn
        
        Friend Sub New()
            MyBase.New("AutoParchimetri_Anagrafica")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NUMERATOREColumn As DataColumn
            Get
                Return Me.columnNUMERATORE
            End Get
        End Property
        
        Friend ReadOnly Property DATA_INSERIMENTOColumn As DataColumn
            Get
                Return Me.columnDATA_INSERIMENTO
            End Get
        End Property
        
        Friend ReadOnly Property MATRICOLAColumn As DataColumn
            Get
                Return Me.columnMATRICOLA
            End Get
        End Property
        
        Friend ReadOnly Property COGNOMEColumn As DataColumn
            Get
                Return Me.columnCOGNOME
            End Get
        End Property
        
        Friend ReadOnly Property NOMEColumn As DataColumn
            Get
                Return Me.columnNOME
            End Get
        End Property
        
        Friend ReadOnly Property VIAColumn As DataColumn
            Get
                Return Me.columnVIA
            End Get
        End Property
        
        Friend ReadOnly Property NUMEROVIAColumn As DataColumn
            Get
                Return Me.columnNUMEROVIA
            End Get
        End Property
        
        Friend ReadOnly Property CITTAColumn As DataColumn
            Get
                Return Me.columnCITTA
            End Get
        End Property
        
        Friend ReadOnly Property CAPColumn As DataColumn
            Get
                Return Me.columnCAP
            End Get
        End Property
        
        Friend ReadOnly Property TELEFONOColumn As DataColumn
            Get
                Return Me.columnTELEFONO
            End Get
        End Property
        
        Friend ReadOnly Property MAILColumn As DataColumn
            Get
                Return Me.columnMAIL
            End Get
        End Property
        
        Friend ReadOnly Property DSIColumn As DataColumn
            Get
                Return Me.columnDSI
            End Get
        End Property
        
        Friend ReadOnly Property ATTIVAColumn As DataColumn
            Get
                Return Me.columnATTIVA
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AutoParchimetri_AnagraficaRow
            Get
                Return CType(Me.Rows(index),AutoParchimetri_AnagraficaRow)
            End Get
        End Property
        
        Public Event AutoParchimetri_AnagraficaRowChanged As AutoParchimetri_AnagraficaRowChangeEventHandler
        
        Public Event AutoParchimetri_AnagraficaRowChanging As AutoParchimetri_AnagraficaRowChangeEventHandler
        
        Public Event AutoParchimetri_AnagraficaRowDeleted As AutoParchimetri_AnagraficaRowChangeEventHandler
        
        Public Event AutoParchimetri_AnagraficaRowDeleting As AutoParchimetri_AnagraficaRowChangeEventHandler
        
        Public Overloads Sub AddAutoParchimetri_AnagraficaRow(ByVal row As AutoParchimetri_AnagraficaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAutoParchimetri_AnagraficaRow(ByVal NUMERATORE As Integer, ByVal DATA_INSERIMENTO As Date, ByVal MATRICOLA As String, ByVal COGNOME As String, ByVal NOME As String, ByVal VIA As String, ByVal NUMEROVIA As String, ByVal CITTA As String, ByVal CAP As String, ByVal TELEFONO As String, ByVal MAIL As String, ByVal DSI As Integer, ByVal ATTIVA As Boolean) As AutoParchimetri_AnagraficaRow
            Dim rowAutoParchimetri_AnagraficaRow As AutoParchimetri_AnagraficaRow = CType(Me.NewRow,AutoParchimetri_AnagraficaRow)
            rowAutoParchimetri_AnagraficaRow.ItemArray = New Object() {NUMERATORE, DATA_INSERIMENTO, MATRICOLA, COGNOME, NOME, VIA, NUMEROVIA, CITTA, CAP, TELEFONO, MAIL, DSI, ATTIVA}
            Me.Rows.Add(rowAutoParchimetri_AnagraficaRow)
            Return rowAutoParchimetri_AnagraficaRow
        End Function
        
        Public Function FindByNUMERATORE(ByVal NUMERATORE As Integer) As AutoParchimetri_AnagraficaRow
            Return CType(Me.Rows.Find(New Object() {NUMERATORE}),AutoParchimetri_AnagraficaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AutoParchimetri_AnagraficaDataTable = CType(MyBase.Clone,AutoParchimetri_AnagraficaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AutoParchimetri_AnagraficaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNUMERATORE = Me.Columns("NUMERATORE")
            Me.columnDATA_INSERIMENTO = Me.Columns("DATA_INSERIMENTO")
            Me.columnMATRICOLA = Me.Columns("MATRICOLA")
            Me.columnCOGNOME = Me.Columns("COGNOME")
            Me.columnNOME = Me.Columns("NOME")
            Me.columnVIA = Me.Columns("VIA")
            Me.columnNUMEROVIA = Me.Columns("NUMEROVIA")
            Me.columnCITTA = Me.Columns("CITTA")
            Me.columnCAP = Me.Columns("CAP")
            Me.columnTELEFONO = Me.Columns("TELEFONO")
            Me.columnMAIL = Me.Columns("MAIL")
            Me.columnDSI = Me.Columns("DSI")
            Me.columnATTIVA = Me.Columns("ATTIVA")
        End Sub
        
        Private Sub InitClass()
            Me.columnNUMERATORE = New DataColumn("NUMERATORE", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNUMERATORE)
            Me.columnDATA_INSERIMENTO = New DataColumn("DATA_INSERIMENTO", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATA_INSERIMENTO)
            Me.columnMATRICOLA = New DataColumn("MATRICOLA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMATRICOLA)
            Me.columnCOGNOME = New DataColumn("COGNOME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOGNOME)
            Me.columnNOME = New DataColumn("NOME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOME)
            Me.columnVIA = New DataColumn("VIA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVIA)
            Me.columnNUMEROVIA = New DataColumn("NUMEROVIA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNUMEROVIA)
            Me.columnCITTA = New DataColumn("CITTA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCITTA)
            Me.columnCAP = New DataColumn("CAP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCAP)
            Me.columnTELEFONO = New DataColumn("TELEFONO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTELEFONO)
            Me.columnMAIL = New DataColumn("MAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAIL)
            Me.columnDSI = New DataColumn("DSI", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDSI)
            Me.columnATTIVA = New DataColumn("ATTIVA", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnATTIVA)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnNUMERATORE}, true))
            Me.columnNUMERATORE.AllowDBNull = false
            Me.columnNUMERATORE.Unique = true
        End Sub
        
        Public Function NewAutoParchimetri_AnagraficaRow() As AutoParchimetri_AnagraficaRow
            Return CType(Me.NewRow,AutoParchimetri_AnagraficaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AutoParchimetri_AnagraficaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AutoParchimetri_AnagraficaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AutoParchimetri_AnagraficaRowChangedEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_AnagraficaRowChanged(Me, New AutoParchimetri_AnagraficaRowChangeEvent(CType(e.Row,AutoParchimetri_AnagraficaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AutoParchimetri_AnagraficaRowChangingEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_AnagraficaRowChanging(Me, New AutoParchimetri_AnagraficaRowChangeEvent(CType(e.Row,AutoParchimetri_AnagraficaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AutoParchimetri_AnagraficaRowDeletedEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_AnagraficaRowDeleted(Me, New AutoParchimetri_AnagraficaRowChangeEvent(CType(e.Row,AutoParchimetri_AnagraficaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AutoParchimetri_AnagraficaRowDeletingEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_AnagraficaRowDeleting(Me, New AutoParchimetri_AnagraficaRowChangeEvent(CType(e.Row,AutoParchimetri_AnagraficaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAutoParchimetri_AnagraficaRow(ByVal row As AutoParchimetri_AnagraficaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetri_AnagraficaRow
        Inherits DataRow
        
        Private tableAutoParchimetri_Anagrafica As AutoParchimetri_AnagraficaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAutoParchimetri_Anagrafica = CType(Me.Table,AutoParchimetri_AnagraficaDataTable)
        End Sub
        
        Public Property NUMERATORE As Integer
            Get
                Return CType(Me(Me.tableAutoParchimetri_Anagrafica.NUMERATOREColumn),Integer)
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafica.NUMERATOREColumn) = value
            End Set
        End Property
        
        Public Property DATA_INSERIMENTO As Date
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafica.DATA_INSERIMENTOColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafica.DATA_INSERIMENTOColumn) = value
            End Set
        End Property
        
        Public Property MATRICOLA As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafica.MATRICOLAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafica.MATRICOLAColumn) = value
            End Set
        End Property
        
        Public Property COGNOME As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafica.COGNOMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafica.COGNOMEColumn) = value
            End Set
        End Property
        
        Public Property NOME As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafica.NOMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafica.NOMEColumn) = value
            End Set
        End Property
        
        Public Property VIA As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafica.VIAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafica.VIAColumn) = value
            End Set
        End Property
        
        Public Property NUMEROVIA As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafica.NUMEROVIAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafica.NUMEROVIAColumn) = value
            End Set
        End Property
        
        Public Property CITTA As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafica.CITTAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafica.CITTAColumn) = value
            End Set
        End Property
        
        Public Property CAP As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafica.CAPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafica.CAPColumn) = value
            End Set
        End Property
        
        Public Property TELEFONO As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafica.TELEFONOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafica.TELEFONOColumn) = value
            End Set
        End Property
        
        Public Property MAIL As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafica.MAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafica.MAILColumn) = value
            End Set
        End Property
        
        Public Property DSI As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafica.DSIColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafica.DSIColumn) = value
            End Set
        End Property
        
        Public Property ATTIVA As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafica.ATTIVAColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafica.ATTIVAColumn) = value
            End Set
        End Property
        
        Public Function IsDATA_INSERIMENTONull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafica.DATA_INSERIMENTOColumn)
        End Function
        
        Public Sub SetDATA_INSERIMENTONull()
            Me(Me.tableAutoParchimetri_Anagrafica.DATA_INSERIMENTOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMATRICOLANull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafica.MATRICOLAColumn)
        End Function
        
        Public Sub SetMATRICOLANull()
            Me(Me.tableAutoParchimetri_Anagrafica.MATRICOLAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOGNOMENull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafica.COGNOMEColumn)
        End Function
        
        Public Sub SetCOGNOMENull()
            Me(Me.tableAutoParchimetri_Anagrafica.COGNOMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNOMENull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafica.NOMEColumn)
        End Function
        
        Public Sub SetNOMENull()
            Me(Me.tableAutoParchimetri_Anagrafica.NOMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVIANull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafica.VIAColumn)
        End Function
        
        Public Sub SetVIANull()
            Me(Me.tableAutoParchimetri_Anagrafica.VIAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNUMEROVIANull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafica.NUMEROVIAColumn)
        End Function
        
        Public Sub SetNUMEROVIANull()
            Me(Me.tableAutoParchimetri_Anagrafica.NUMEROVIAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCITTANull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafica.CITTAColumn)
        End Function
        
        Public Sub SetCITTANull()
            Me(Me.tableAutoParchimetri_Anagrafica.CITTAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCAPNull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafica.CAPColumn)
        End Function
        
        Public Sub SetCAPNull()
            Me(Me.tableAutoParchimetri_Anagrafica.CAPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTELEFONONull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafica.TELEFONOColumn)
        End Function
        
        Public Sub SetTELEFONONull()
            Me(Me.tableAutoParchimetri_Anagrafica.TELEFONOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMAILNull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafica.MAILColumn)
        End Function
        
        Public Sub SetMAILNull()
            Me(Me.tableAutoParchimetri_Anagrafica.MAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDSINull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafica.DSIColumn)
        End Function
        
        Public Sub SetDSINull()
            Me(Me.tableAutoParchimetri_Anagrafica.DSIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsATTIVANull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafica.ATTIVAColumn)
        End Function
        
        Public Sub SetATTIVANull()
            Me(Me.tableAutoParchimetri_Anagrafica.ATTIVAColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetri_AnagraficaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AutoParchimetri_AnagraficaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AutoParchimetri_AnagraficaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AutoParchimetri_AnagraficaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikeParkDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDATA As DataColumn
        
        Private columnMATRICOLA As DataColumn
        
        Private columnCOGNOME As DataColumn
        
        Private columnNOME As DataColumn
        
        Private columnDATA_NASCITA As DataColumn
        
        Private columnRES_VIA As DataColumn
        
        Private columnRES_N_CIV As DataColumn
        
        Private columnRES_CAP As DataColumn
        
        Private columnRES_ID_CIT As DataColumn
        
        Private columnRES_CIT As DataColumn
        
        Private columnRES_PROV As DataColumn
        
        Private columnTEL As DataColumn
        
        Private columnCEL As DataColumn
        
        Private columnDOM_RES As DataColumn
        
        Private columnDOM_VIA As DataColumn
        
        Private columnDOM_N_CIV As DataColumn
        
        Private columnDOM_CAP As DataColumn
        
        Private columnDOM_ID_CIT As DataColumn
        
        Private columnDOM_CIT As DataColumn
        
        Private columnDOM_PROV As DataColumn
        
        Private columnDOCUMENTO_TIPO As DataColumn
        
        Private columnDOCUMENTO_NUM As DataColumn
        
        Private columnCODICEFISCALE As DataColumn
        
        Private columnTESSERA As DataColumn
        
        Private columnREGIONE As DataColumn
        
        Private columnDATAINSERIMENTO As DataColumn
        
        Private columnIdUtente As DataColumn
        
        Private columnCauzione As DataColumn
        
        Friend Sub New()
            MyBase.New("BikePark")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DATAColumn As DataColumn
            Get
                Return Me.columnDATA
            End Get
        End Property
        
        Friend ReadOnly Property MATRICOLAColumn As DataColumn
            Get
                Return Me.columnMATRICOLA
            End Get
        End Property
        
        Friend ReadOnly Property COGNOMEColumn As DataColumn
            Get
                Return Me.columnCOGNOME
            End Get
        End Property
        
        Friend ReadOnly Property NOMEColumn As DataColumn
            Get
                Return Me.columnNOME
            End Get
        End Property
        
        Friend ReadOnly Property DATA_NASCITAColumn As DataColumn
            Get
                Return Me.columnDATA_NASCITA
            End Get
        End Property
        
        Friend ReadOnly Property RES_VIAColumn As DataColumn
            Get
                Return Me.columnRES_VIA
            End Get
        End Property
        
        Friend ReadOnly Property RES_N_CIVColumn As DataColumn
            Get
                Return Me.columnRES_N_CIV
            End Get
        End Property
        
        Friend ReadOnly Property RES_CAPColumn As DataColumn
            Get
                Return Me.columnRES_CAP
            End Get
        End Property
        
        Friend ReadOnly Property RES_ID_CITColumn As DataColumn
            Get
                Return Me.columnRES_ID_CIT
            End Get
        End Property
        
        Friend ReadOnly Property RES_CITColumn As DataColumn
            Get
                Return Me.columnRES_CIT
            End Get
        End Property
        
        Friend ReadOnly Property RES_PROVColumn As DataColumn
            Get
                Return Me.columnRES_PROV
            End Get
        End Property
        
        Friend ReadOnly Property TELColumn As DataColumn
            Get
                Return Me.columnTEL
            End Get
        End Property
        
        Friend ReadOnly Property CELColumn As DataColumn
            Get
                Return Me.columnCEL
            End Get
        End Property
        
        Friend ReadOnly Property DOM_RESColumn As DataColumn
            Get
                Return Me.columnDOM_RES
            End Get
        End Property
        
        Friend ReadOnly Property DOM_VIAColumn As DataColumn
            Get
                Return Me.columnDOM_VIA
            End Get
        End Property
        
        Friend ReadOnly Property DOM_N_CIVColumn As DataColumn
            Get
                Return Me.columnDOM_N_CIV
            End Get
        End Property
        
        Friend ReadOnly Property DOM_CAPColumn As DataColumn
            Get
                Return Me.columnDOM_CAP
            End Get
        End Property
        
        Friend ReadOnly Property DOM_ID_CITColumn As DataColumn
            Get
                Return Me.columnDOM_ID_CIT
            End Get
        End Property
        
        Friend ReadOnly Property DOM_CITColumn As DataColumn
            Get
                Return Me.columnDOM_CIT
            End Get
        End Property
        
        Friend ReadOnly Property DOM_PROVColumn As DataColumn
            Get
                Return Me.columnDOM_PROV
            End Get
        End Property
        
        Friend ReadOnly Property DOCUMENTO_TIPOColumn As DataColumn
            Get
                Return Me.columnDOCUMENTO_TIPO
            End Get
        End Property
        
        Friend ReadOnly Property DOCUMENTO_NUMColumn As DataColumn
            Get
                Return Me.columnDOCUMENTO_NUM
            End Get
        End Property
        
        Friend ReadOnly Property CODICEFISCALEColumn As DataColumn
            Get
                Return Me.columnCODICEFISCALE
            End Get
        End Property
        
        Friend ReadOnly Property TESSERAColumn As DataColumn
            Get
                Return Me.columnTESSERA
            End Get
        End Property
        
        Friend ReadOnly Property REGIONEColumn As DataColumn
            Get
                Return Me.columnREGIONE
            End Get
        End Property
        
        Friend ReadOnly Property DATAINSERIMENTOColumn As DataColumn
            Get
                Return Me.columnDATAINSERIMENTO
            End Get
        End Property
        
        Friend ReadOnly Property IdUtenteColumn As DataColumn
            Get
                Return Me.columnIdUtente
            End Get
        End Property
        
        Friend ReadOnly Property CauzioneColumn As DataColumn
            Get
                Return Me.columnCauzione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BikeParkRow
            Get
                Return CType(Me.Rows(index),BikeParkRow)
            End Get
        End Property
        
        Public Event BikeParkRowChanged As BikeParkRowChangeEventHandler
        
        Public Event BikeParkRowChanging As BikeParkRowChangeEventHandler
        
        Public Event BikeParkRowDeleted As BikeParkRowChangeEventHandler
        
        Public Event BikeParkRowDeleting As BikeParkRowChangeEventHandler
        
        Public Overloads Sub AddBikeParkRow(ByVal row As BikeParkRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBikeParkRow( _
                    ByVal ID As Integer,  _
                    ByVal DATA As Date,  _
                    ByVal MATRICOLA As String,  _
                    ByVal COGNOME As String,  _
                    ByVal NOME As String,  _
                    ByVal DATA_NASCITA As Date,  _
                    ByVal RES_VIA As String,  _
                    ByVal RES_N_CIV As String,  _
                    ByVal RES_CAP As String,  _
                    ByVal RES_ID_CIT As String,  _
                    ByVal RES_CIT As String,  _
                    ByVal RES_PROV As String,  _
                    ByVal TEL As String,  _
                    ByVal CEL As String,  _
                    ByVal DOM_RES As Boolean,  _
                    ByVal DOM_VIA As String,  _
                    ByVal DOM_N_CIV As String,  _
                    ByVal DOM_CAP As String,  _
                    ByVal DOM_ID_CIT As String,  _
                    ByVal DOM_CIT As String,  _
                    ByVal DOM_PROV As String,  _
                    ByVal DOCUMENTO_TIPO As Integer,  _
                    ByVal DOCUMENTO_NUM As String,  _
                    ByVal CODICEFISCALE As String,  _
                    ByVal TESSERA As String,  _
                    ByVal REGIONE As Boolean,  _
                    ByVal DATAINSERIMENTO As Date,  _
                    ByVal IdUtente As Integer,  _
                    ByVal Cauzione As Double) As BikeParkRow
            Dim rowBikeParkRow As BikeParkRow = CType(Me.NewRow,BikeParkRow)
            rowBikeParkRow.ItemArray = New Object() {ID, DATA, MATRICOLA, COGNOME, NOME, DATA_NASCITA, RES_VIA, RES_N_CIV, RES_CAP, RES_ID_CIT, RES_CIT, RES_PROV, TEL, CEL, DOM_RES, DOM_VIA, DOM_N_CIV, DOM_CAP, DOM_ID_CIT, DOM_CIT, DOM_PROV, DOCUMENTO_TIPO, DOCUMENTO_NUM, CODICEFISCALE, TESSERA, REGIONE, DATAINSERIMENTO, IdUtente, Cauzione}
            Me.Rows.Add(rowBikeParkRow)
            Return rowBikeParkRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As BikeParkRow
            Return CType(Me.Rows.Find(New Object() {ID}),BikeParkRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BikeParkDataTable = CType(MyBase.Clone,BikeParkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BikeParkDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDATA = Me.Columns("DATA")
            Me.columnMATRICOLA = Me.Columns("MATRICOLA")
            Me.columnCOGNOME = Me.Columns("COGNOME")
            Me.columnNOME = Me.Columns("NOME")
            Me.columnDATA_NASCITA = Me.Columns("DATA_NASCITA")
            Me.columnRES_VIA = Me.Columns("RES_VIA")
            Me.columnRES_N_CIV = Me.Columns("RES_N_CIV")
            Me.columnRES_CAP = Me.Columns("RES_CAP")
            Me.columnRES_ID_CIT = Me.Columns("RES_ID_CIT")
            Me.columnRES_CIT = Me.Columns("RES_CIT")
            Me.columnRES_PROV = Me.Columns("RES_PROV")
            Me.columnTEL = Me.Columns("TEL")
            Me.columnCEL = Me.Columns("CEL")
            Me.columnDOM_RES = Me.Columns("DOM_RES")
            Me.columnDOM_VIA = Me.Columns("DOM_VIA")
            Me.columnDOM_N_CIV = Me.Columns("DOM_N_CIV")
            Me.columnDOM_CAP = Me.Columns("DOM_CAP")
            Me.columnDOM_ID_CIT = Me.Columns("DOM_ID_CIT")
            Me.columnDOM_CIT = Me.Columns("DOM_CIT")
            Me.columnDOM_PROV = Me.Columns("DOM_PROV")
            Me.columnDOCUMENTO_TIPO = Me.Columns("DOCUMENTO_TIPO")
            Me.columnDOCUMENTO_NUM = Me.Columns("DOCUMENTO_NUM")
            Me.columnCODICEFISCALE = Me.Columns("CODICEFISCALE")
            Me.columnTESSERA = Me.Columns("TESSERA")
            Me.columnREGIONE = Me.Columns("REGIONE")
            Me.columnDATAINSERIMENTO = Me.Columns("DATAINSERIMENTO")
            Me.columnIdUtente = Me.Columns("IdUtente")
            Me.columnCauzione = Me.Columns("Cauzione")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDATA = New DataColumn("DATA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATA)
            Me.columnMATRICOLA = New DataColumn("MATRICOLA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMATRICOLA)
            Me.columnCOGNOME = New DataColumn("COGNOME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOGNOME)
            Me.columnNOME = New DataColumn("NOME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOME)
            Me.columnDATA_NASCITA = New DataColumn("DATA_NASCITA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATA_NASCITA)
            Me.columnRES_VIA = New DataColumn("RES_VIA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_VIA)
            Me.columnRES_N_CIV = New DataColumn("RES_N_CIV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_N_CIV)
            Me.columnRES_CAP = New DataColumn("RES_CAP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_CAP)
            Me.columnRES_ID_CIT = New DataColumn("RES_ID_CIT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_ID_CIT)
            Me.columnRES_CIT = New DataColumn("RES_CIT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_CIT)
            Me.columnRES_PROV = New DataColumn("RES_PROV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_PROV)
            Me.columnTEL = New DataColumn("TEL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTEL)
            Me.columnCEL = New DataColumn("CEL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEL)
            Me.columnDOM_RES = New DataColumn("DOM_RES", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_RES)
            Me.columnDOM_VIA = New DataColumn("DOM_VIA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_VIA)
            Me.columnDOM_N_CIV = New DataColumn("DOM_N_CIV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_N_CIV)
            Me.columnDOM_CAP = New DataColumn("DOM_CAP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_CAP)
            Me.columnDOM_ID_CIT = New DataColumn("DOM_ID_CIT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_ID_CIT)
            Me.columnDOM_CIT = New DataColumn("DOM_CIT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_CIT)
            Me.columnDOM_PROV = New DataColumn("DOM_PROV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_PROV)
            Me.columnDOCUMENTO_TIPO = New DataColumn("DOCUMENTO_TIPO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCUMENTO_TIPO)
            Me.columnDOCUMENTO_NUM = New DataColumn("DOCUMENTO_NUM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCUMENTO_NUM)
            Me.columnCODICEFISCALE = New DataColumn("CODICEFISCALE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCODICEFISCALE)
            Me.columnTESSERA = New DataColumn("TESSERA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTESSERA)
            Me.columnREGIONE = New DataColumn("REGIONE", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREGIONE)
            Me.columnDATAINSERIMENTO = New DataColumn("DATAINSERIMENTO", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATAINSERIMENTO)
            Me.columnIdUtente = New DataColumn("IdUtente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdUtente)
            Me.columnCauzione = New DataColumn("Cauzione", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCauzione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnDOM_RES.AllowDBNull = false
            Me.columnREGIONE.AllowDBNull = false
        End Sub
        
        Public Function NewBikeParkRow() As BikeParkRow
            Return CType(Me.NewRow,BikeParkRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BikeParkRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BikeParkRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BikeParkRowChangedEvent) Is Nothing) Then
                RaiseEvent BikeParkRowChanged(Me, New BikeParkRowChangeEvent(CType(e.Row,BikeParkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BikeParkRowChangingEvent) Is Nothing) Then
                RaiseEvent BikeParkRowChanging(Me, New BikeParkRowChangeEvent(CType(e.Row,BikeParkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BikeParkRowDeletedEvent) Is Nothing) Then
                RaiseEvent BikeParkRowDeleted(Me, New BikeParkRowChangeEvent(CType(e.Row,BikeParkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BikeParkRowDeletingEvent) Is Nothing) Then
                RaiseEvent BikeParkRowDeleting(Me, New BikeParkRowChangeEvent(CType(e.Row,BikeParkRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBikeParkRow(ByVal row As BikeParkRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikeParkRow
        Inherits DataRow
        
        Private tableBikePark As BikeParkDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBikePark = CType(Me.Table,BikeParkDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableBikePark.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableBikePark.IDColumn) = value
            End Set
        End Property
        
        Public Property DATA As Date
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.DATAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.DATAColumn) = value
            End Set
        End Property
        
        Public Property MATRICOLA As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.MATRICOLAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.MATRICOLAColumn) = value
            End Set
        End Property
        
        Public Property COGNOME As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.COGNOMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.COGNOMEColumn) = value
            End Set
        End Property
        
        Public Property NOME As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.NOMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.NOMEColumn) = value
            End Set
        End Property
        
        Public Property DATA_NASCITA As Date
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.DATA_NASCITAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.DATA_NASCITAColumn) = value
            End Set
        End Property
        
        Public Property RES_VIA As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.RES_VIAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.RES_VIAColumn) = value
            End Set
        End Property
        
        Public Property RES_N_CIV As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.RES_N_CIVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.RES_N_CIVColumn) = value
            End Set
        End Property
        
        Public Property RES_CAP As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.RES_CAPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.RES_CAPColumn) = value
            End Set
        End Property
        
        Public Property RES_ID_CIT As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.RES_ID_CITColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.RES_ID_CITColumn) = value
            End Set
        End Property
        
        Public Property RES_CIT As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.RES_CITColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.RES_CITColumn) = value
            End Set
        End Property
        
        Public Property RES_PROV As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.RES_PROVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.RES_PROVColumn) = value
            End Set
        End Property
        
        Public Property TEL As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.TELColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.TELColumn) = value
            End Set
        End Property
        
        Public Property CEL As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.CELColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.CELColumn) = value
            End Set
        End Property
        
        Public Property DOM_RES As Boolean
            Get
                Return CType(Me(Me.tableBikePark.DOM_RESColumn),Boolean)
            End Get
            Set
                Me(Me.tableBikePark.DOM_RESColumn) = value
            End Set
        End Property
        
        Public Property DOM_VIA As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.DOM_VIAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.DOM_VIAColumn) = value
            End Set
        End Property
        
        Public Property DOM_N_CIV As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.DOM_N_CIVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.DOM_N_CIVColumn) = value
            End Set
        End Property
        
        Public Property DOM_CAP As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.DOM_CAPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.DOM_CAPColumn) = value
            End Set
        End Property
        
        Public Property DOM_ID_CIT As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.DOM_ID_CITColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.DOM_ID_CITColumn) = value
            End Set
        End Property
        
        Public Property DOM_CIT As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.DOM_CITColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.DOM_CITColumn) = value
            End Set
        End Property
        
        Public Property DOM_PROV As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.DOM_PROVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.DOM_PROVColumn) = value
            End Set
        End Property
        
        Public Property DOCUMENTO_TIPO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.DOCUMENTO_TIPOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.DOCUMENTO_TIPOColumn) = value
            End Set
        End Property
        
        Public Property DOCUMENTO_NUM As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.DOCUMENTO_NUMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.DOCUMENTO_NUMColumn) = value
            End Set
        End Property
        
        Public Property CODICEFISCALE As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.CODICEFISCALEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.CODICEFISCALEColumn) = value
            End Set
        End Property
        
        Public Property TESSERA As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.TESSERAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.TESSERAColumn) = value
            End Set
        End Property
        
        Public Property REGIONE As Boolean
            Get
                Return CType(Me(Me.tableBikePark.REGIONEColumn),Boolean)
            End Get
            Set
                Me(Me.tableBikePark.REGIONEColumn) = value
            End Set
        End Property
        
        Public Property DATAINSERIMENTO As Date
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.DATAINSERIMENTOColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.DATAINSERIMENTOColumn) = value
            End Set
        End Property
        
        Public Property IdUtente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.IdUtenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.IdUtenteColumn) = value
            End Set
        End Property
        
        Public Property Cauzione As Double
            Get
                Try 
                    Return CType(Me(Me.tableBikePark.CauzioneColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark.CauzioneColumn) = value
            End Set
        End Property
        
        Public Function IsDATANull() As Boolean
            Return Me.IsNull(Me.tableBikePark.DATAColumn)
        End Function
        
        Public Sub SetDATANull()
            Me(Me.tableBikePark.DATAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMATRICOLANull() As Boolean
            Return Me.IsNull(Me.tableBikePark.MATRICOLAColumn)
        End Function
        
        Public Sub SetMATRICOLANull()
            Me(Me.tableBikePark.MATRICOLAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOGNOMENull() As Boolean
            Return Me.IsNull(Me.tableBikePark.COGNOMEColumn)
        End Function
        
        Public Sub SetCOGNOMENull()
            Me(Me.tableBikePark.COGNOMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNOMENull() As Boolean
            Return Me.IsNull(Me.tableBikePark.NOMEColumn)
        End Function
        
        Public Sub SetNOMENull()
            Me(Me.tableBikePark.NOMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDATA_NASCITANull() As Boolean
            Return Me.IsNull(Me.tableBikePark.DATA_NASCITAColumn)
        End Function
        
        Public Sub SetDATA_NASCITANull()
            Me(Me.tableBikePark.DATA_NASCITAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_VIANull() As Boolean
            Return Me.IsNull(Me.tableBikePark.RES_VIAColumn)
        End Function
        
        Public Sub SetRES_VIANull()
            Me(Me.tableBikePark.RES_VIAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_N_CIVNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.RES_N_CIVColumn)
        End Function
        
        Public Sub SetRES_N_CIVNull()
            Me(Me.tableBikePark.RES_N_CIVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_CAPNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.RES_CAPColumn)
        End Function
        
        Public Sub SetRES_CAPNull()
            Me(Me.tableBikePark.RES_CAPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_ID_CITNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.RES_ID_CITColumn)
        End Function
        
        Public Sub SetRES_ID_CITNull()
            Me(Me.tableBikePark.RES_ID_CITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_CITNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.RES_CITColumn)
        End Function
        
        Public Sub SetRES_CITNull()
            Me(Me.tableBikePark.RES_CITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_PROVNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.RES_PROVColumn)
        End Function
        
        Public Sub SetRES_PROVNull()
            Me(Me.tableBikePark.RES_PROVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTELNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.TELColumn)
        End Function
        
        Public Sub SetTELNull()
            Me(Me.tableBikePark.TELColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCELNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.CELColumn)
        End Function
        
        Public Sub SetCELNull()
            Me(Me.tableBikePark.CELColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_VIANull() As Boolean
            Return Me.IsNull(Me.tableBikePark.DOM_VIAColumn)
        End Function
        
        Public Sub SetDOM_VIANull()
            Me(Me.tableBikePark.DOM_VIAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_N_CIVNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.DOM_N_CIVColumn)
        End Function
        
        Public Sub SetDOM_N_CIVNull()
            Me(Me.tableBikePark.DOM_N_CIVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_CAPNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.DOM_CAPColumn)
        End Function
        
        Public Sub SetDOM_CAPNull()
            Me(Me.tableBikePark.DOM_CAPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_ID_CITNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.DOM_ID_CITColumn)
        End Function
        
        Public Sub SetDOM_ID_CITNull()
            Me(Me.tableBikePark.DOM_ID_CITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_CITNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.DOM_CITColumn)
        End Function
        
        Public Sub SetDOM_CITNull()
            Me(Me.tableBikePark.DOM_CITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_PROVNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.DOM_PROVColumn)
        End Function
        
        Public Sub SetDOM_PROVNull()
            Me(Me.tableBikePark.DOM_PROVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOCUMENTO_TIPONull() As Boolean
            Return Me.IsNull(Me.tableBikePark.DOCUMENTO_TIPOColumn)
        End Function
        
        Public Sub SetDOCUMENTO_TIPONull()
            Me(Me.tableBikePark.DOCUMENTO_TIPOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOCUMENTO_NUMNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.DOCUMENTO_NUMColumn)
        End Function
        
        Public Sub SetDOCUMENTO_NUMNull()
            Me(Me.tableBikePark.DOCUMENTO_NUMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCODICEFISCALENull() As Boolean
            Return Me.IsNull(Me.tableBikePark.CODICEFISCALEColumn)
        End Function
        
        Public Sub SetCODICEFISCALENull()
            Me(Me.tableBikePark.CODICEFISCALEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTESSERANull() As Boolean
            Return Me.IsNull(Me.tableBikePark.TESSERAColumn)
        End Function
        
        Public Sub SetTESSERANull()
            Me(Me.tableBikePark.TESSERAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDATAINSERIMENTONull() As Boolean
            Return Me.IsNull(Me.tableBikePark.DATAINSERIMENTOColumn)
        End Function
        
        Public Sub SetDATAINSERIMENTONull()
            Me(Me.tableBikePark.DATAINSERIMENTOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdUtenteNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.IdUtenteColumn)
        End Function
        
        Public Sub SetIdUtenteNull()
            Me(Me.tableBikePark.IdUtenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCauzioneNull() As Boolean
            Return Me.IsNull(Me.tableBikePark.CauzioneColumn)
        End Function
        
        Public Sub SetCauzioneNull()
            Me(Me.tableBikePark.CauzioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikeParkRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BikeParkRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BikeParkRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BikeParkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikePark_AllegatiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdAnagrafica As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnFileName As DataColumn
        
        Private columnExtension As DataColumn
        
        Friend Sub New()
            MyBase.New("BikePark_Allegati")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdAnagraficaColumn As DataColumn
            Get
                Return Me.columnIdAnagrafica
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property FileNameColumn As DataColumn
            Get
                Return Me.columnFileName
            End Get
        End Property
        
        Friend ReadOnly Property ExtensionColumn As DataColumn
            Get
                Return Me.columnExtension
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BikePark_AllegatiRow
            Get
                Return CType(Me.Rows(index),BikePark_AllegatiRow)
            End Get
        End Property
        
        Public Event BikePark_AllegatiRowChanged As BikePark_AllegatiRowChangeEventHandler
        
        Public Event BikePark_AllegatiRowChanging As BikePark_AllegatiRowChangeEventHandler
        
        Public Event BikePark_AllegatiRowDeleted As BikePark_AllegatiRowChangeEventHandler
        
        Public Event BikePark_AllegatiRowDeleting As BikePark_AllegatiRowChangeEventHandler
        
        Public Overloads Sub AddBikePark_AllegatiRow(ByVal row As BikePark_AllegatiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBikePark_AllegatiRow(ByVal Id As System.Guid, ByVal IdAnagrafica As Integer, ByVal Description As String, ByVal FileName As String, ByVal Extension As String) As BikePark_AllegatiRow
            Dim rowBikePark_AllegatiRow As BikePark_AllegatiRow = CType(Me.NewRow,BikePark_AllegatiRow)
            rowBikePark_AllegatiRow.ItemArray = New Object() {Id, IdAnagrafica, Description, FileName, Extension}
            Me.Rows.Add(rowBikePark_AllegatiRow)
            Return rowBikePark_AllegatiRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As BikePark_AllegatiRow
            Return CType(Me.Rows.Find(New Object() {Id}),BikePark_AllegatiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BikePark_AllegatiDataTable = CType(MyBase.Clone,BikePark_AllegatiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BikePark_AllegatiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdAnagrafica = Me.Columns("IdAnagrafica")
            Me.columnDescription = Me.Columns("Description")
            Me.columnFileName = Me.Columns("FileName")
            Me.columnExtension = Me.Columns("Extension")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdAnagrafica = New DataColumn("IdAnagrafica", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAnagrafica)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnFileName = New DataColumn("FileName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFileName)
            Me.columnExtension = New DataColumn("Extension", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExtension)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewBikePark_AllegatiRow() As BikePark_AllegatiRow
            Return CType(Me.NewRow,BikePark_AllegatiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BikePark_AllegatiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BikePark_AllegatiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BikePark_AllegatiRowChangedEvent) Is Nothing) Then
                RaiseEvent BikePark_AllegatiRowChanged(Me, New BikePark_AllegatiRowChangeEvent(CType(e.Row,BikePark_AllegatiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BikePark_AllegatiRowChangingEvent) Is Nothing) Then
                RaiseEvent BikePark_AllegatiRowChanging(Me, New BikePark_AllegatiRowChangeEvent(CType(e.Row,BikePark_AllegatiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BikePark_AllegatiRowDeletedEvent) Is Nothing) Then
                RaiseEvent BikePark_AllegatiRowDeleted(Me, New BikePark_AllegatiRowChangeEvent(CType(e.Row,BikePark_AllegatiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BikePark_AllegatiRowDeletingEvent) Is Nothing) Then
                RaiseEvent BikePark_AllegatiRowDeleting(Me, New BikePark_AllegatiRowChangeEvent(CType(e.Row,BikePark_AllegatiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBikePark_AllegatiRow(ByVal row As BikePark_AllegatiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikePark_AllegatiRow
        Inherits DataRow
        
        Private tableBikePark_Allegati As BikePark_AllegatiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBikePark_Allegati = CType(Me.Table,BikePark_AllegatiDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableBikePark_Allegati.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableBikePark_Allegati.IdColumn) = value
            End Set
        End Property
        
        Public Property IdAnagrafica As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBikePark_Allegati.IdAnagraficaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark_Allegati.IdAnagraficaColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark_Allegati.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark_Allegati.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property FileName As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark_Allegati.FileNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark_Allegati.FileNameColumn) = value
            End Set
        End Property
        
        Public Property Extension As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark_Allegati.ExtensionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark_Allegati.ExtensionColumn) = value
            End Set
        End Property
        
        Public Function IsIdAnagraficaNull() As Boolean
            Return Me.IsNull(Me.tableBikePark_Allegati.IdAnagraficaColumn)
        End Function
        
        Public Sub SetIdAnagraficaNull()
            Me(Me.tableBikePark_Allegati.IdAnagraficaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableBikePark_Allegati.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableBikePark_Allegati.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFileNameNull() As Boolean
            Return Me.IsNull(Me.tableBikePark_Allegati.FileNameColumn)
        End Function
        
        Public Sub SetFileNameNull()
            Me(Me.tableBikePark_Allegati.FileNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExtensionNull() As Boolean
            Return Me.IsNull(Me.tableBikePark_Allegati.ExtensionColumn)
        End Function
        
        Public Sub SetExtensionNull()
            Me(Me.tableBikePark_Allegati.ExtensionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikePark_AllegatiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BikePark_AllegatiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BikePark_AllegatiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BikePark_AllegatiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_TipoDocumentoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnDescrizione As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroInBici_TipoDocumento")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneColumn As DataColumn
            Get
                Return Me.columnDescrizione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroInBici_TipoDocumentoRow
            Get
                Return CType(Me.Rows(index),CentroInBici_TipoDocumentoRow)
            End Get
        End Property
        
        Public Event CentroInBici_TipoDocumentoRowChanged As CentroInBici_TipoDocumentoRowChangeEventHandler
        
        Public Event CentroInBici_TipoDocumentoRowChanging As CentroInBici_TipoDocumentoRowChangeEventHandler
        
        Public Event CentroInBici_TipoDocumentoRowDeleted As CentroInBici_TipoDocumentoRowChangeEventHandler
        
        Public Event CentroInBici_TipoDocumentoRowDeleting As CentroInBici_TipoDocumentoRowChangeEventHandler
        
        Public Overloads Sub AddCentroInBici_TipoDocumentoRow(ByVal row As CentroInBici_TipoDocumentoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroInBici_TipoDocumentoRow(ByVal Descrizione As String) As CentroInBici_TipoDocumentoRow
            Dim rowCentroInBici_TipoDocumentoRow As CentroInBici_TipoDocumentoRow = CType(Me.NewRow,CentroInBici_TipoDocumentoRow)
            rowCentroInBici_TipoDocumentoRow.ItemArray = New Object() {Nothing, Descrizione}
            Me.Rows.Add(rowCentroInBici_TipoDocumentoRow)
            Return rowCentroInBici_TipoDocumentoRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As CentroInBici_TipoDocumentoRow
            Return CType(Me.Rows.Find(New Object() {Id}),CentroInBici_TipoDocumentoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroInBici_TipoDocumentoDataTable = CType(MyBase.Clone,CentroInBici_TipoDocumentoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroInBici_TipoDocumentoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnDescrizione = Me.Columns("Descrizione")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnDescrizione = New DataColumn("Descrizione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewCentroInBici_TipoDocumentoRow() As CentroInBici_TipoDocumentoRow
            Return CType(Me.NewRow,CentroInBici_TipoDocumentoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroInBici_TipoDocumentoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroInBici_TipoDocumentoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroInBici_TipoDocumentoRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_TipoDocumentoRowChanged(Me, New CentroInBici_TipoDocumentoRowChangeEvent(CType(e.Row,CentroInBici_TipoDocumentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroInBici_TipoDocumentoRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_TipoDocumentoRowChanging(Me, New CentroInBici_TipoDocumentoRowChangeEvent(CType(e.Row,CentroInBici_TipoDocumentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroInBici_TipoDocumentoRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_TipoDocumentoRowDeleted(Me, New CentroInBici_TipoDocumentoRowChangeEvent(CType(e.Row,CentroInBici_TipoDocumentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroInBici_TipoDocumentoRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_TipoDocumentoRowDeleting(Me, New CentroInBici_TipoDocumentoRowChangeEvent(CType(e.Row,CentroInBici_TipoDocumentoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroInBici_TipoDocumentoRow(ByVal row As CentroInBici_TipoDocumentoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_TipoDocumentoRow
        Inherits DataRow
        
        Private tableCentroInBici_TipoDocumento As CentroInBici_TipoDocumentoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroInBici_TipoDocumento = CType(Me.Table,CentroInBici_TipoDocumentoDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableCentroInBici_TipoDocumento.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableCentroInBici_TipoDocumento.IdColumn) = value
            End Set
        End Property
        
        Public Property Descrizione As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_TipoDocumento.DescrizioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_TipoDocumento.DescrizioneColumn) = value
            End Set
        End Property
        
        Public Function IsDescrizioneNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_TipoDocumento.DescrizioneColumn)
        End Function
        
        Public Sub SetDescrizioneNull()
            Me(Me.tableCentroInBici_TipoDocumento.DescrizioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_TipoDocumentoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroInBici_TipoDocumentoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroInBici_TipoDocumentoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroInBici_TipoDocumentoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class COMUNIPROVDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCMISTA As DataColumn
        
        Private columnCMCOMU As DataColumn
        
        Private columnCMPROV As DataColumn
        
        Private columnCMCAPO As DataColumn
        
        Private columnCMBELF As DataColumn
        
        Private columnNAZIONE As DataColumn
        
        Private columnCMORD As DataColumn
        
        Private columnUpdateDate As DataColumn
        
        Private columnDeleteDate As DataColumn
        
        Friend Sub New()
            MyBase.New("COMUNIPROV")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CMISTAColumn As DataColumn
            Get
                Return Me.columnCMISTA
            End Get
        End Property
        
        Friend ReadOnly Property CMCOMUColumn As DataColumn
            Get
                Return Me.columnCMCOMU
            End Get
        End Property
        
        Friend ReadOnly Property CMPROVColumn As DataColumn
            Get
                Return Me.columnCMPROV
            End Get
        End Property
        
        Friend ReadOnly Property CMCAPOColumn As DataColumn
            Get
                Return Me.columnCMCAPO
            End Get
        End Property
        
        Friend ReadOnly Property CMBELFColumn As DataColumn
            Get
                Return Me.columnCMBELF
            End Get
        End Property
        
        Friend ReadOnly Property NAZIONEColumn As DataColumn
            Get
                Return Me.columnNAZIONE
            End Get
        End Property
        
        Friend ReadOnly Property CMORDColumn As DataColumn
            Get
                Return Me.columnCMORD
            End Get
        End Property
        
        Friend ReadOnly Property UpdateDateColumn As DataColumn
            Get
                Return Me.columnUpdateDate
            End Get
        End Property
        
        Friend ReadOnly Property DeleteDateColumn As DataColumn
            Get
                Return Me.columnDeleteDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As COMUNIPROVRow
            Get
                Return CType(Me.Rows(index),COMUNIPROVRow)
            End Get
        End Property
        
        Public Event COMUNIPROVRowChanged As COMUNIPROVRowChangeEventHandler
        
        Public Event COMUNIPROVRowChanging As COMUNIPROVRowChangeEventHandler
        
        Public Event COMUNIPROVRowDeleted As COMUNIPROVRowChangeEventHandler
        
        Public Event COMUNIPROVRowDeleting As COMUNIPROVRowChangeEventHandler
        
        Public Overloads Sub AddCOMUNIPROVRow(ByVal row As COMUNIPROVRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCOMUNIPROVRow(ByVal CMISTA As String, ByVal CMCOMU As String, ByVal CMPROV As String, ByVal CMCAPO As String, ByVal CMBELF As String, ByVal NAZIONE As String, ByVal CMORD As Short, ByVal UpdateDate As Date, ByVal DeleteDate As Date) As COMUNIPROVRow
            Dim rowCOMUNIPROVRow As COMUNIPROVRow = CType(Me.NewRow,COMUNIPROVRow)
            rowCOMUNIPROVRow.ItemArray = New Object() {CMISTA, CMCOMU, CMPROV, CMCAPO, CMBELF, NAZIONE, CMORD, UpdateDate, DeleteDate}
            Me.Rows.Add(rowCOMUNIPROVRow)
            Return rowCOMUNIPROVRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As COMUNIPROVDataTable = CType(MyBase.Clone,COMUNIPROVDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New COMUNIPROVDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCMISTA = Me.Columns("CMISTA")
            Me.columnCMCOMU = Me.Columns("CMCOMU")
            Me.columnCMPROV = Me.Columns("CMPROV")
            Me.columnCMCAPO = Me.Columns("CMCAPO")
            Me.columnCMBELF = Me.Columns("CMBELF")
            Me.columnNAZIONE = Me.Columns("NAZIONE")
            Me.columnCMORD = Me.Columns("CMORD")
            Me.columnUpdateDate = Me.Columns("UpdateDate")
            Me.columnDeleteDate = Me.Columns("DeleteDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnCMISTA = New DataColumn("CMISTA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCMISTA)
            Me.columnCMCOMU = New DataColumn("CMCOMU", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCMCOMU)
            Me.columnCMPROV = New DataColumn("CMPROV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCMPROV)
            Me.columnCMCAPO = New DataColumn("CMCAPO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCMCAPO)
            Me.columnCMBELF = New DataColumn("CMBELF", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCMBELF)
            Me.columnNAZIONE = New DataColumn("NAZIONE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNAZIONE)
            Me.columnCMORD = New DataColumn("CMORD", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCMORD)
            Me.columnUpdateDate = New DataColumn("UpdateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateDate)
            Me.columnDeleteDate = New DataColumn("DeleteDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDeleteDate)
            Me.columnCMISTA.AllowDBNull = false
            Me.columnCMPROV.AllowDBNull = false
            Me.columnCMCAPO.AllowDBNull = false
            Me.columnCMBELF.AllowDBNull = false
            Me.columnNAZIONE.AllowDBNull = false
            Me.columnCMORD.AllowDBNull = false
        End Sub
        
        Public Function NewCOMUNIPROVRow() As COMUNIPROVRow
            Return CType(Me.NewRow,COMUNIPROVRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New COMUNIPROVRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(COMUNIPROVRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COMUNIPROVRowChangedEvent) Is Nothing) Then
                RaiseEvent COMUNIPROVRowChanged(Me, New COMUNIPROVRowChangeEvent(CType(e.Row,COMUNIPROVRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COMUNIPROVRowChangingEvent) Is Nothing) Then
                RaiseEvent COMUNIPROVRowChanging(Me, New COMUNIPROVRowChangeEvent(CType(e.Row,COMUNIPROVRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COMUNIPROVRowDeletedEvent) Is Nothing) Then
                RaiseEvent COMUNIPROVRowDeleted(Me, New COMUNIPROVRowChangeEvent(CType(e.Row,COMUNIPROVRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COMUNIPROVRowDeletingEvent) Is Nothing) Then
                RaiseEvent COMUNIPROVRowDeleting(Me, New COMUNIPROVRowChangeEvent(CType(e.Row,COMUNIPROVRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCOMUNIPROVRow(ByVal row As COMUNIPROVRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class COMUNIPROVRow
        Inherits DataRow
        
        Private tableCOMUNIPROV As COMUNIPROVDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOMUNIPROV = CType(Me.Table,COMUNIPROVDataTable)
        End Sub
        
        Public Property CMISTA As String
            Get
                Return CType(Me(Me.tableCOMUNIPROV.CMISTAColumn),String)
            End Get
            Set
                Me(Me.tableCOMUNIPROV.CMISTAColumn) = value
            End Set
        End Property
        
        Public Property CMCOMU As String
            Get
                Try 
                    Return CType(Me(Me.tableCOMUNIPROV.CMCOMUColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOMUNIPROV.CMCOMUColumn) = value
            End Set
        End Property
        
        Public Property CMPROV As String
            Get
                Return CType(Me(Me.tableCOMUNIPROV.CMPROVColumn),String)
            End Get
            Set
                Me(Me.tableCOMUNIPROV.CMPROVColumn) = value
            End Set
        End Property
        
        Public Property CMCAPO As String
            Get
                Return CType(Me(Me.tableCOMUNIPROV.CMCAPOColumn),String)
            End Get
            Set
                Me(Me.tableCOMUNIPROV.CMCAPOColumn) = value
            End Set
        End Property
        
        Public Property CMBELF As String
            Get
                Return CType(Me(Me.tableCOMUNIPROV.CMBELFColumn),String)
            End Get
            Set
                Me(Me.tableCOMUNIPROV.CMBELFColumn) = value
            End Set
        End Property
        
        Public Property NAZIONE As String
            Get
                Return CType(Me(Me.tableCOMUNIPROV.NAZIONEColumn),String)
            End Get
            Set
                Me(Me.tableCOMUNIPROV.NAZIONEColumn) = value
            End Set
        End Property
        
        Public Property CMORD As Short
            Get
                Return CType(Me(Me.tableCOMUNIPROV.CMORDColumn),Short)
            End Get
            Set
                Me(Me.tableCOMUNIPROV.CMORDColumn) = value
            End Set
        End Property
        
        Public Property UpdateDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOMUNIPROV.UpdateDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOMUNIPROV.UpdateDateColumn) = value
            End Set
        End Property
        
        Public Property DeleteDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOMUNIPROV.DeleteDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOMUNIPROV.DeleteDateColumn) = value
            End Set
        End Property
        
        Public Function IsCMCOMUNull() As Boolean
            Return Me.IsNull(Me.tableCOMUNIPROV.CMCOMUColumn)
        End Function
        
        Public Sub SetCMCOMUNull()
            Me(Me.tableCOMUNIPROV.CMCOMUColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateDateNull() As Boolean
            Return Me.IsNull(Me.tableCOMUNIPROV.UpdateDateColumn)
        End Function
        
        Public Sub SetUpdateDateNull()
            Me(Me.tableCOMUNIPROV.UpdateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDeleteDateNull() As Boolean
            Return Me.IsNull(Me.tableCOMUNIPROV.DeleteDateColumn)
        End Function
        
        Public Sub SetDeleteDateNull()
            Me(Me.tableCOMUNIPROV.DeleteDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class COMUNIPROVRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As COMUNIPROVRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As COMUNIPROVRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As COMUNIPROVRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikePark_TipoNotaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdTipoNota As DataColumn
        
        Private columnTipo As DataColumn
        
        Friend Sub New()
            MyBase.New("BikePark_TipoNota")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdTipoNotaColumn As DataColumn
            Get
                Return Me.columnIdTipoNota
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BikePark_TipoNotaRow
            Get
                Return CType(Me.Rows(index),BikePark_TipoNotaRow)
            End Get
        End Property
        
        Public Event BikePark_TipoNotaRowChanged As BikePark_TipoNotaRowChangeEventHandler
        
        Public Event BikePark_TipoNotaRowChanging As BikePark_TipoNotaRowChangeEventHandler
        
        Public Event BikePark_TipoNotaRowDeleted As BikePark_TipoNotaRowChangeEventHandler
        
        Public Event BikePark_TipoNotaRowDeleting As BikePark_TipoNotaRowChangeEventHandler
        
        Public Overloads Sub AddBikePark_TipoNotaRow(ByVal row As BikePark_TipoNotaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBikePark_TipoNotaRow(ByVal IdTipoNota As Integer, ByVal Tipo As String) As BikePark_TipoNotaRow
            Dim rowBikePark_TipoNotaRow As BikePark_TipoNotaRow = CType(Me.NewRow,BikePark_TipoNotaRow)
            rowBikePark_TipoNotaRow.ItemArray = New Object() {IdTipoNota, Tipo}
            Me.Rows.Add(rowBikePark_TipoNotaRow)
            Return rowBikePark_TipoNotaRow
        End Function
        
        Public Function FindByIdTipoNota(ByVal IdTipoNota As Integer) As BikePark_TipoNotaRow
            Return CType(Me.Rows.Find(New Object() {IdTipoNota}),BikePark_TipoNotaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BikePark_TipoNotaDataTable = CType(MyBase.Clone,BikePark_TipoNotaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BikePark_TipoNotaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdTipoNota = Me.Columns("IdTipoNota")
            Me.columnTipo = Me.Columns("Tipo")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdTipoNota = New DataColumn("IdTipoNota", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdTipoNota)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdTipoNota}, true))
            Me.columnIdTipoNota.AllowDBNull = false
            Me.columnIdTipoNota.Unique = true
        End Sub
        
        Public Function NewBikePark_TipoNotaRow() As BikePark_TipoNotaRow
            Return CType(Me.NewRow,BikePark_TipoNotaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BikePark_TipoNotaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BikePark_TipoNotaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BikePark_TipoNotaRowChangedEvent) Is Nothing) Then
                RaiseEvent BikePark_TipoNotaRowChanged(Me, New BikePark_TipoNotaRowChangeEvent(CType(e.Row,BikePark_TipoNotaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BikePark_TipoNotaRowChangingEvent) Is Nothing) Then
                RaiseEvent BikePark_TipoNotaRowChanging(Me, New BikePark_TipoNotaRowChangeEvent(CType(e.Row,BikePark_TipoNotaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BikePark_TipoNotaRowDeletedEvent) Is Nothing) Then
                RaiseEvent BikePark_TipoNotaRowDeleted(Me, New BikePark_TipoNotaRowChangeEvent(CType(e.Row,BikePark_TipoNotaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BikePark_TipoNotaRowDeletingEvent) Is Nothing) Then
                RaiseEvent BikePark_TipoNotaRowDeleting(Me, New BikePark_TipoNotaRowChangeEvent(CType(e.Row,BikePark_TipoNotaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBikePark_TipoNotaRow(ByVal row As BikePark_TipoNotaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikePark_TipoNotaRow
        Inherits DataRow
        
        Private tableBikePark_TipoNota As BikePark_TipoNotaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBikePark_TipoNota = CType(Me.Table,BikePark_TipoNotaDataTable)
        End Sub
        
        Public Property IdTipoNota As Integer
            Get
                Return CType(Me(Me.tableBikePark_TipoNota.IdTipoNotaColumn),Integer)
            End Get
            Set
                Me(Me.tableBikePark_TipoNota.IdTipoNotaColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark_TipoNota.TipoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark_TipoNota.TipoColumn) = value
            End Set
        End Property
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableBikePark_TipoNota.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tableBikePark_TipoNota.TipoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikePark_TipoNotaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BikePark_TipoNotaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BikePark_TipoNotaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BikePark_TipoNotaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikePark_NoteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdAnagrafica As DataColumn
        
        Private columnIdTipoNota As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnData As DataColumn
        
        Private columnNota As DataColumn
        
        Friend Sub New()
            MyBase.New("BikePark_Note")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdAnagraficaColumn As DataColumn
            Get
                Return Me.columnIdAnagrafica
            End Get
        End Property
        
        Friend ReadOnly Property IdTipoNotaColumn As DataColumn
            Get
                Return Me.columnIdTipoNota
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property NotaColumn As DataColumn
            Get
                Return Me.columnNota
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BikePark_NoteRow
            Get
                Return CType(Me.Rows(index),BikePark_NoteRow)
            End Get
        End Property
        
        Public Event BikePark_NoteRowChanged As BikePark_NoteRowChangeEventHandler
        
        Public Event BikePark_NoteRowChanging As BikePark_NoteRowChangeEventHandler
        
        Public Event BikePark_NoteRowDeleted As BikePark_NoteRowChangeEventHandler
        
        Public Event BikePark_NoteRowDeleting As BikePark_NoteRowChangeEventHandler
        
        Public Overloads Sub AddBikePark_NoteRow(ByVal row As BikePark_NoteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBikePark_NoteRow(ByVal Id As System.Guid, ByVal IdAnagrafica As Integer, ByVal IdTipoNota As Integer, ByVal Tipo As String, ByVal Data As Date, ByVal Nota As String) As BikePark_NoteRow
            Dim rowBikePark_NoteRow As BikePark_NoteRow = CType(Me.NewRow,BikePark_NoteRow)
            rowBikePark_NoteRow.ItemArray = New Object() {Id, IdAnagrafica, IdTipoNota, Tipo, Data, Nota}
            Me.Rows.Add(rowBikePark_NoteRow)
            Return rowBikePark_NoteRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As BikePark_NoteRow
            Return CType(Me.Rows.Find(New Object() {Id}),BikePark_NoteRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BikePark_NoteDataTable = CType(MyBase.Clone,BikePark_NoteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BikePark_NoteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdAnagrafica = Me.Columns("IdAnagrafica")
            Me.columnIdTipoNota = Me.Columns("IdTipoNota")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnData = Me.Columns("Data")
            Me.columnNota = Me.Columns("Nota")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdAnagrafica = New DataColumn("IdAnagrafica", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAnagrafica)
            Me.columnIdTipoNota = New DataColumn("IdTipoNota", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdTipoNota)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnNota = New DataColumn("Nota", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNota)
            Me.Constraints.Add(New UniqueConstraint("dsBiglietterieKey4", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewBikePark_NoteRow() As BikePark_NoteRow
            Return CType(Me.NewRow,BikePark_NoteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BikePark_NoteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BikePark_NoteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BikePark_NoteRowChangedEvent) Is Nothing) Then
                RaiseEvent BikePark_NoteRowChanged(Me, New BikePark_NoteRowChangeEvent(CType(e.Row,BikePark_NoteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BikePark_NoteRowChangingEvent) Is Nothing) Then
                RaiseEvent BikePark_NoteRowChanging(Me, New BikePark_NoteRowChangeEvent(CType(e.Row,BikePark_NoteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BikePark_NoteRowDeletedEvent) Is Nothing) Then
                RaiseEvent BikePark_NoteRowDeleted(Me, New BikePark_NoteRowChangeEvent(CType(e.Row,BikePark_NoteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BikePark_NoteRowDeletingEvent) Is Nothing) Then
                RaiseEvent BikePark_NoteRowDeleting(Me, New BikePark_NoteRowChangeEvent(CType(e.Row,BikePark_NoteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBikePark_NoteRow(ByVal row As BikePark_NoteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikePark_NoteRow
        Inherits DataRow
        
        Private tableBikePark_Note As BikePark_NoteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBikePark_Note = CType(Me.Table,BikePark_NoteDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableBikePark_Note.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableBikePark_Note.IdColumn) = value
            End Set
        End Property
        
        Public Property IdAnagrafica As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBikePark_Note.IdAnagraficaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark_Note.IdAnagraficaColumn) = value
            End Set
        End Property
        
        Public Property IdTipoNota As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBikePark_Note.IdTipoNotaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark_Note.IdTipoNotaColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark_Note.TipoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark_Note.TipoColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableBikePark_Note.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark_Note.DataColumn) = value
            End Set
        End Property
        
        Public Property Nota As String
            Get
                Try 
                    Return CType(Me(Me.tableBikePark_Note.NotaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikePark_Note.NotaColumn) = value
            End Set
        End Property
        
        Public Function IsIdAnagraficaNull() As Boolean
            Return Me.IsNull(Me.tableBikePark_Note.IdAnagraficaColumn)
        End Function
        
        Public Sub SetIdAnagraficaNull()
            Me(Me.tableBikePark_Note.IdAnagraficaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdTipoNotaNull() As Boolean
            Return Me.IsNull(Me.tableBikePark_Note.IdTipoNotaColumn)
        End Function
        
        Public Sub SetIdTipoNotaNull()
            Me(Me.tableBikePark_Note.IdTipoNotaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableBikePark_Note.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tableBikePark_Note.TipoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableBikePark_Note.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableBikePark_Note.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotaNull() As Boolean
            Return Me.IsNull(Me.tableBikePark_Note.NotaColumn)
        End Function
        
        Public Sub SetNotaNull()
            Me(Me.tableBikePark_Note.NotaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikePark_NoteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BikePark_NoteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BikePark_NoteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BikePark_NoteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikeParkListaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDATA As DataColumn
        
        Private columnMATRICOLA As DataColumn
        
        Private columnCOGNOME As DataColumn
        
        Private columnNOME As DataColumn
        
        Private columnDATA_NASCITA As DataColumn
        
        Private columnRES_VIA As DataColumn
        
        Private columnRES_N_CIV As DataColumn
        
        Private columnRES_CAP As DataColumn
        
        Private columnRES_ID_CIT As DataColumn
        
        Private columnRES_CIT As DataColumn
        
        Private columnRES_PROV As DataColumn
        
        Private columnTEL As DataColumn
        
        Private columnCEL As DataColumn
        
        Private columnDOM_RES As DataColumn
        
        Private columnDOM_VIA As DataColumn
        
        Private columnDOM_N_CIV As DataColumn
        
        Private columnDOM_CAP As DataColumn
        
        Private columnDOM_ID_CIT As DataColumn
        
        Private columnDOM_CIT As DataColumn
        
        Private columnDOM_PROV As DataColumn
        
        Private columnDOCUMENTO_TIPO As DataColumn
        
        Private columnDOCUMENTO_NUM As DataColumn
        
        Private columnTESSERA As DataColumn
        
        Private columnCODICEFISCALE As DataColumn
        
        Private columnREGIONE As DataColumn
        
        Private columnDATAINSERIMENTO As DataColumn
        
        Private columnIdUtente As DataColumn
        
        Private columnCauzione As DataColumn
        
        Private columnNumeroNote As DataColumn
        
        Private columnNumeroAllegati As DataColumn
        
        Friend Sub New()
            MyBase.New("BikeParkLista")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DATAColumn As DataColumn
            Get
                Return Me.columnDATA
            End Get
        End Property
        
        Friend ReadOnly Property MATRICOLAColumn As DataColumn
            Get
                Return Me.columnMATRICOLA
            End Get
        End Property
        
        Friend ReadOnly Property COGNOMEColumn As DataColumn
            Get
                Return Me.columnCOGNOME
            End Get
        End Property
        
        Friend ReadOnly Property NOMEColumn As DataColumn
            Get
                Return Me.columnNOME
            End Get
        End Property
        
        Friend ReadOnly Property DATA_NASCITAColumn As DataColumn
            Get
                Return Me.columnDATA_NASCITA
            End Get
        End Property
        
        Friend ReadOnly Property RES_VIAColumn As DataColumn
            Get
                Return Me.columnRES_VIA
            End Get
        End Property
        
        Friend ReadOnly Property RES_N_CIVColumn As DataColumn
            Get
                Return Me.columnRES_N_CIV
            End Get
        End Property
        
        Friend ReadOnly Property RES_CAPColumn As DataColumn
            Get
                Return Me.columnRES_CAP
            End Get
        End Property
        
        Friend ReadOnly Property RES_ID_CITColumn As DataColumn
            Get
                Return Me.columnRES_ID_CIT
            End Get
        End Property
        
        Friend ReadOnly Property RES_CITColumn As DataColumn
            Get
                Return Me.columnRES_CIT
            End Get
        End Property
        
        Friend ReadOnly Property RES_PROVColumn As DataColumn
            Get
                Return Me.columnRES_PROV
            End Get
        End Property
        
        Friend ReadOnly Property TELColumn As DataColumn
            Get
                Return Me.columnTEL
            End Get
        End Property
        
        Friend ReadOnly Property CELColumn As DataColumn
            Get
                Return Me.columnCEL
            End Get
        End Property
        
        Friend ReadOnly Property DOM_RESColumn As DataColumn
            Get
                Return Me.columnDOM_RES
            End Get
        End Property
        
        Friend ReadOnly Property DOM_VIAColumn As DataColumn
            Get
                Return Me.columnDOM_VIA
            End Get
        End Property
        
        Friend ReadOnly Property DOM_N_CIVColumn As DataColumn
            Get
                Return Me.columnDOM_N_CIV
            End Get
        End Property
        
        Friend ReadOnly Property DOM_CAPColumn As DataColumn
            Get
                Return Me.columnDOM_CAP
            End Get
        End Property
        
        Friend ReadOnly Property DOM_ID_CITColumn As DataColumn
            Get
                Return Me.columnDOM_ID_CIT
            End Get
        End Property
        
        Friend ReadOnly Property DOM_CITColumn As DataColumn
            Get
                Return Me.columnDOM_CIT
            End Get
        End Property
        
        Friend ReadOnly Property DOM_PROVColumn As DataColumn
            Get
                Return Me.columnDOM_PROV
            End Get
        End Property
        
        Friend ReadOnly Property DOCUMENTO_TIPOColumn As DataColumn
            Get
                Return Me.columnDOCUMENTO_TIPO
            End Get
        End Property
        
        Friend ReadOnly Property DOCUMENTO_NUMColumn As DataColumn
            Get
                Return Me.columnDOCUMENTO_NUM
            End Get
        End Property
        
        Friend ReadOnly Property TESSERAColumn As DataColumn
            Get
                Return Me.columnTESSERA
            End Get
        End Property
        
        Friend ReadOnly Property CODICEFISCALEColumn As DataColumn
            Get
                Return Me.columnCODICEFISCALE
            End Get
        End Property
        
        Friend ReadOnly Property REGIONEColumn As DataColumn
            Get
                Return Me.columnREGIONE
            End Get
        End Property
        
        Friend ReadOnly Property DATAINSERIMENTOColumn As DataColumn
            Get
                Return Me.columnDATAINSERIMENTO
            End Get
        End Property
        
        Friend ReadOnly Property IdUtenteColumn As DataColumn
            Get
                Return Me.columnIdUtente
            End Get
        End Property
        
        Friend ReadOnly Property CauzioneColumn As DataColumn
            Get
                Return Me.columnCauzione
            End Get
        End Property
        
        Friend ReadOnly Property NumeroNoteColumn As DataColumn
            Get
                Return Me.columnNumeroNote
            End Get
        End Property
        
        Friend ReadOnly Property NumeroAllegatiColumn As DataColumn
            Get
                Return Me.columnNumeroAllegati
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BikeParkListaRow
            Get
                Return CType(Me.Rows(index),BikeParkListaRow)
            End Get
        End Property
        
        Public Event BikeParkListaRowChanged As BikeParkListaRowChangeEventHandler
        
        Public Event BikeParkListaRowChanging As BikeParkListaRowChangeEventHandler
        
        Public Event BikeParkListaRowDeleted As BikeParkListaRowChangeEventHandler
        
        Public Event BikeParkListaRowDeleting As BikeParkListaRowChangeEventHandler
        
        Public Overloads Sub AddBikeParkListaRow(ByVal row As BikeParkListaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBikeParkListaRow( _
                    ByVal ID As Integer,  _
                    ByVal DATA As Date,  _
                    ByVal MATRICOLA As String,  _
                    ByVal COGNOME As String,  _
                    ByVal NOME As String,  _
                    ByVal DATA_NASCITA As Date,  _
                    ByVal RES_VIA As String,  _
                    ByVal RES_N_CIV As String,  _
                    ByVal RES_CAP As String,  _
                    ByVal RES_ID_CIT As String,  _
                    ByVal RES_CIT As String,  _
                    ByVal RES_PROV As String,  _
                    ByVal TEL As String,  _
                    ByVal CEL As String,  _
                    ByVal DOM_RES As Boolean,  _
                    ByVal DOM_VIA As String,  _
                    ByVal DOM_N_CIV As String,  _
                    ByVal DOM_CAP As String,  _
                    ByVal DOM_ID_CIT As String,  _
                    ByVal DOM_CIT As String,  _
                    ByVal DOM_PROV As String,  _
                    ByVal DOCUMENTO_TIPO As Integer,  _
                    ByVal DOCUMENTO_NUM As String,  _
                    ByVal TESSERA As String,  _
                    ByVal CODICEFISCALE As String,  _
                    ByVal REGIONE As Boolean,  _
                    ByVal DATAINSERIMENTO As Date,  _
                    ByVal IdUtente As Integer,  _
                    ByVal Cauzione As Double,  _
                    ByVal NumeroNote As Integer,  _
                    ByVal NumeroAllegati As Integer) As BikeParkListaRow
            Dim rowBikeParkListaRow As BikeParkListaRow = CType(Me.NewRow,BikeParkListaRow)
            rowBikeParkListaRow.ItemArray = New Object() {ID, DATA, MATRICOLA, COGNOME, NOME, DATA_NASCITA, RES_VIA, RES_N_CIV, RES_CAP, RES_ID_CIT, RES_CIT, RES_PROV, TEL, CEL, DOM_RES, DOM_VIA, DOM_N_CIV, DOM_CAP, DOM_ID_CIT, DOM_CIT, DOM_PROV, DOCUMENTO_TIPO, DOCUMENTO_NUM, TESSERA, CODICEFISCALE, REGIONE, DATAINSERIMENTO, IdUtente, Cauzione, NumeroNote, NumeroAllegati}
            Me.Rows.Add(rowBikeParkListaRow)
            Return rowBikeParkListaRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As BikeParkListaRow
            Return CType(Me.Rows.Find(New Object() {ID}),BikeParkListaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BikeParkListaDataTable = CType(MyBase.Clone,BikeParkListaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BikeParkListaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDATA = Me.Columns("DATA")
            Me.columnMATRICOLA = Me.Columns("MATRICOLA")
            Me.columnCOGNOME = Me.Columns("COGNOME")
            Me.columnNOME = Me.Columns("NOME")
            Me.columnDATA_NASCITA = Me.Columns("DATA_NASCITA")
            Me.columnRES_VIA = Me.Columns("RES_VIA")
            Me.columnRES_N_CIV = Me.Columns("RES_N_CIV")
            Me.columnRES_CAP = Me.Columns("RES_CAP")
            Me.columnRES_ID_CIT = Me.Columns("RES_ID_CIT")
            Me.columnRES_CIT = Me.Columns("RES_CIT")
            Me.columnRES_PROV = Me.Columns("RES_PROV")
            Me.columnTEL = Me.Columns("TEL")
            Me.columnCEL = Me.Columns("CEL")
            Me.columnDOM_RES = Me.Columns("DOM_RES")
            Me.columnDOM_VIA = Me.Columns("DOM_VIA")
            Me.columnDOM_N_CIV = Me.Columns("DOM_N_CIV")
            Me.columnDOM_CAP = Me.Columns("DOM_CAP")
            Me.columnDOM_ID_CIT = Me.Columns("DOM_ID_CIT")
            Me.columnDOM_CIT = Me.Columns("DOM_CIT")
            Me.columnDOM_PROV = Me.Columns("DOM_PROV")
            Me.columnDOCUMENTO_TIPO = Me.Columns("DOCUMENTO_TIPO")
            Me.columnDOCUMENTO_NUM = Me.Columns("DOCUMENTO_NUM")
            Me.columnTESSERA = Me.Columns("TESSERA")
            Me.columnCODICEFISCALE = Me.Columns("CODICEFISCALE")
            Me.columnREGIONE = Me.Columns("REGIONE")
            Me.columnDATAINSERIMENTO = Me.Columns("DATAINSERIMENTO")
            Me.columnIdUtente = Me.Columns("IdUtente")
            Me.columnCauzione = Me.Columns("Cauzione")
            Me.columnNumeroNote = Me.Columns("NumeroNote")
            Me.columnNumeroAllegati = Me.Columns("NumeroAllegati")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDATA = New DataColumn("DATA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATA)
            Me.columnMATRICOLA = New DataColumn("MATRICOLA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMATRICOLA)
            Me.columnCOGNOME = New DataColumn("COGNOME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOGNOME)
            Me.columnNOME = New DataColumn("NOME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOME)
            Me.columnDATA_NASCITA = New DataColumn("DATA_NASCITA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATA_NASCITA)
            Me.columnRES_VIA = New DataColumn("RES_VIA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_VIA)
            Me.columnRES_N_CIV = New DataColumn("RES_N_CIV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_N_CIV)
            Me.columnRES_CAP = New DataColumn("RES_CAP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_CAP)
            Me.columnRES_ID_CIT = New DataColumn("RES_ID_CIT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_ID_CIT)
            Me.columnRES_CIT = New DataColumn("RES_CIT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_CIT)
            Me.columnRES_PROV = New DataColumn("RES_PROV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_PROV)
            Me.columnTEL = New DataColumn("TEL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTEL)
            Me.columnCEL = New DataColumn("CEL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEL)
            Me.columnDOM_RES = New DataColumn("DOM_RES", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_RES)
            Me.columnDOM_VIA = New DataColumn("DOM_VIA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_VIA)
            Me.columnDOM_N_CIV = New DataColumn("DOM_N_CIV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_N_CIV)
            Me.columnDOM_CAP = New DataColumn("DOM_CAP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_CAP)
            Me.columnDOM_ID_CIT = New DataColumn("DOM_ID_CIT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_ID_CIT)
            Me.columnDOM_CIT = New DataColumn("DOM_CIT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_CIT)
            Me.columnDOM_PROV = New DataColumn("DOM_PROV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_PROV)
            Me.columnDOCUMENTO_TIPO = New DataColumn("DOCUMENTO_TIPO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCUMENTO_TIPO)
            Me.columnDOCUMENTO_NUM = New DataColumn("DOCUMENTO_NUM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCUMENTO_NUM)
            Me.columnTESSERA = New DataColumn("TESSERA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTESSERA)
            Me.columnCODICEFISCALE = New DataColumn("CODICEFISCALE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCODICEFISCALE)
            Me.columnREGIONE = New DataColumn("REGIONE", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREGIONE)
            Me.columnDATAINSERIMENTO = New DataColumn("DATAINSERIMENTO", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATAINSERIMENTO)
            Me.columnIdUtente = New DataColumn("IdUtente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdUtente)
            Me.columnCauzione = New DataColumn("Cauzione", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCauzione)
            Me.columnNumeroNote = New DataColumn("NumeroNote", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumeroNote)
            Me.columnNumeroAllegati = New DataColumn("NumeroAllegati", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumeroAllegati)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnDOM_RES.AllowDBNull = false
            Me.columnREGIONE.AllowDBNull = false
            Me.columnNumeroNote.ReadOnly = true
            Me.columnNumeroAllegati.ReadOnly = true
        End Sub
        
        Public Function NewBikeParkListaRow() As BikeParkListaRow
            Return CType(Me.NewRow,BikeParkListaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BikeParkListaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BikeParkListaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BikeParkListaRowChangedEvent) Is Nothing) Then
                RaiseEvent BikeParkListaRowChanged(Me, New BikeParkListaRowChangeEvent(CType(e.Row,BikeParkListaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BikeParkListaRowChangingEvent) Is Nothing) Then
                RaiseEvent BikeParkListaRowChanging(Me, New BikeParkListaRowChangeEvent(CType(e.Row,BikeParkListaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BikeParkListaRowDeletedEvent) Is Nothing) Then
                RaiseEvent BikeParkListaRowDeleted(Me, New BikeParkListaRowChangeEvent(CType(e.Row,BikeParkListaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BikeParkListaRowDeletingEvent) Is Nothing) Then
                RaiseEvent BikeParkListaRowDeleting(Me, New BikeParkListaRowChangeEvent(CType(e.Row,BikeParkListaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBikeParkListaRow(ByVal row As BikeParkListaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikeParkListaRow
        Inherits DataRow
        
        Private tableBikeParkLista As BikeParkListaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBikeParkLista = CType(Me.Table,BikeParkListaDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableBikeParkLista.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableBikeParkLista.IDColumn) = value
            End Set
        End Property
        
        Public Property DATA As Date
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.DATAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.DATAColumn) = value
            End Set
        End Property
        
        Public Property MATRICOLA As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.MATRICOLAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.MATRICOLAColumn) = value
            End Set
        End Property
        
        Public Property COGNOME As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.COGNOMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.COGNOMEColumn) = value
            End Set
        End Property
        
        Public Property NOME As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.NOMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.NOMEColumn) = value
            End Set
        End Property
        
        Public Property DATA_NASCITA As Date
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.DATA_NASCITAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.DATA_NASCITAColumn) = value
            End Set
        End Property
        
        Public Property RES_VIA As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.RES_VIAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.RES_VIAColumn) = value
            End Set
        End Property
        
        Public Property RES_N_CIV As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.RES_N_CIVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.RES_N_CIVColumn) = value
            End Set
        End Property
        
        Public Property RES_CAP As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.RES_CAPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.RES_CAPColumn) = value
            End Set
        End Property
        
        Public Property RES_ID_CIT As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.RES_ID_CITColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.RES_ID_CITColumn) = value
            End Set
        End Property
        
        Public Property RES_CIT As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.RES_CITColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.RES_CITColumn) = value
            End Set
        End Property
        
        Public Property RES_PROV As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.RES_PROVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.RES_PROVColumn) = value
            End Set
        End Property
        
        Public Property TEL As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.TELColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.TELColumn) = value
            End Set
        End Property
        
        Public Property CEL As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.CELColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.CELColumn) = value
            End Set
        End Property
        
        Public Property DOM_RES As Boolean
            Get
                Return CType(Me(Me.tableBikeParkLista.DOM_RESColumn),Boolean)
            End Get
            Set
                Me(Me.tableBikeParkLista.DOM_RESColumn) = value
            End Set
        End Property
        
        Public Property DOM_VIA As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.DOM_VIAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.DOM_VIAColumn) = value
            End Set
        End Property
        
        Public Property DOM_N_CIV As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.DOM_N_CIVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.DOM_N_CIVColumn) = value
            End Set
        End Property
        
        Public Property DOM_CAP As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.DOM_CAPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.DOM_CAPColumn) = value
            End Set
        End Property
        
        Public Property DOM_ID_CIT As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.DOM_ID_CITColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.DOM_ID_CITColumn) = value
            End Set
        End Property
        
        Public Property DOM_CIT As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.DOM_CITColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.DOM_CITColumn) = value
            End Set
        End Property
        
        Public Property DOM_PROV As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.DOM_PROVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.DOM_PROVColumn) = value
            End Set
        End Property
        
        Public Property DOCUMENTO_TIPO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.DOCUMENTO_TIPOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.DOCUMENTO_TIPOColumn) = value
            End Set
        End Property
        
        Public Property DOCUMENTO_NUM As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.DOCUMENTO_NUMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.DOCUMENTO_NUMColumn) = value
            End Set
        End Property
        
        Public Property TESSERA As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.TESSERAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.TESSERAColumn) = value
            End Set
        End Property
        
        Public Property CODICEFISCALE As String
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.CODICEFISCALEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.CODICEFISCALEColumn) = value
            End Set
        End Property
        
        Public Property REGIONE As Boolean
            Get
                Return CType(Me(Me.tableBikeParkLista.REGIONEColumn),Boolean)
            End Get
            Set
                Me(Me.tableBikeParkLista.REGIONEColumn) = value
            End Set
        End Property
        
        Public Property DATAINSERIMENTO As Date
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.DATAINSERIMENTOColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.DATAINSERIMENTOColumn) = value
            End Set
        End Property
        
        Public Property IdUtente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.IdUtenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.IdUtenteColumn) = value
            End Set
        End Property
        
        Public Property Cauzione As Double
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.CauzioneColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.CauzioneColumn) = value
            End Set
        End Property
        
        Public Property NumeroNote As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.NumeroNoteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.NumeroNoteColumn) = value
            End Set
        End Property
        
        Public Property NumeroAllegati As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBikeParkLista.NumeroAllegatiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBikeParkLista.NumeroAllegatiColumn) = value
            End Set
        End Property
        
        Public Function IsDATANull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.DATAColumn)
        End Function
        
        Public Sub SetDATANull()
            Me(Me.tableBikeParkLista.DATAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMATRICOLANull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.MATRICOLAColumn)
        End Function
        
        Public Sub SetMATRICOLANull()
            Me(Me.tableBikeParkLista.MATRICOLAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOGNOMENull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.COGNOMEColumn)
        End Function
        
        Public Sub SetCOGNOMENull()
            Me(Me.tableBikeParkLista.COGNOMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNOMENull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.NOMEColumn)
        End Function
        
        Public Sub SetNOMENull()
            Me(Me.tableBikeParkLista.NOMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDATA_NASCITANull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.DATA_NASCITAColumn)
        End Function
        
        Public Sub SetDATA_NASCITANull()
            Me(Me.tableBikeParkLista.DATA_NASCITAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_VIANull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.RES_VIAColumn)
        End Function
        
        Public Sub SetRES_VIANull()
            Me(Me.tableBikeParkLista.RES_VIAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_N_CIVNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.RES_N_CIVColumn)
        End Function
        
        Public Sub SetRES_N_CIVNull()
            Me(Me.tableBikeParkLista.RES_N_CIVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_CAPNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.RES_CAPColumn)
        End Function
        
        Public Sub SetRES_CAPNull()
            Me(Me.tableBikeParkLista.RES_CAPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_ID_CITNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.RES_ID_CITColumn)
        End Function
        
        Public Sub SetRES_ID_CITNull()
            Me(Me.tableBikeParkLista.RES_ID_CITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_CITNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.RES_CITColumn)
        End Function
        
        Public Sub SetRES_CITNull()
            Me(Me.tableBikeParkLista.RES_CITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_PROVNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.RES_PROVColumn)
        End Function
        
        Public Sub SetRES_PROVNull()
            Me(Me.tableBikeParkLista.RES_PROVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTELNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.TELColumn)
        End Function
        
        Public Sub SetTELNull()
            Me(Me.tableBikeParkLista.TELColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCELNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.CELColumn)
        End Function
        
        Public Sub SetCELNull()
            Me(Me.tableBikeParkLista.CELColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_VIANull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.DOM_VIAColumn)
        End Function
        
        Public Sub SetDOM_VIANull()
            Me(Me.tableBikeParkLista.DOM_VIAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_N_CIVNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.DOM_N_CIVColumn)
        End Function
        
        Public Sub SetDOM_N_CIVNull()
            Me(Me.tableBikeParkLista.DOM_N_CIVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_CAPNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.DOM_CAPColumn)
        End Function
        
        Public Sub SetDOM_CAPNull()
            Me(Me.tableBikeParkLista.DOM_CAPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_ID_CITNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.DOM_ID_CITColumn)
        End Function
        
        Public Sub SetDOM_ID_CITNull()
            Me(Me.tableBikeParkLista.DOM_ID_CITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_CITNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.DOM_CITColumn)
        End Function
        
        Public Sub SetDOM_CITNull()
            Me(Me.tableBikeParkLista.DOM_CITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_PROVNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.DOM_PROVColumn)
        End Function
        
        Public Sub SetDOM_PROVNull()
            Me(Me.tableBikeParkLista.DOM_PROVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOCUMENTO_TIPONull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.DOCUMENTO_TIPOColumn)
        End Function
        
        Public Sub SetDOCUMENTO_TIPONull()
            Me(Me.tableBikeParkLista.DOCUMENTO_TIPOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOCUMENTO_NUMNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.DOCUMENTO_NUMColumn)
        End Function
        
        Public Sub SetDOCUMENTO_NUMNull()
            Me(Me.tableBikeParkLista.DOCUMENTO_NUMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTESSERANull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.TESSERAColumn)
        End Function
        
        Public Sub SetTESSERANull()
            Me(Me.tableBikeParkLista.TESSERAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCODICEFISCALENull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.CODICEFISCALEColumn)
        End Function
        
        Public Sub SetCODICEFISCALENull()
            Me(Me.tableBikeParkLista.CODICEFISCALEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDATAINSERIMENTONull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.DATAINSERIMENTOColumn)
        End Function
        
        Public Sub SetDATAINSERIMENTONull()
            Me(Me.tableBikeParkLista.DATAINSERIMENTOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdUtenteNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.IdUtenteColumn)
        End Function
        
        Public Sub SetIdUtenteNull()
            Me(Me.tableBikeParkLista.IdUtenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCauzioneNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.CauzioneColumn)
        End Function
        
        Public Sub SetCauzioneNull()
            Me(Me.tableBikeParkLista.CauzioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNumeroNoteNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.NumeroNoteColumn)
        End Function
        
        Public Sub SetNumeroNoteNull()
            Me(Me.tableBikeParkLista.NumeroNoteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNumeroAllegatiNull() As Boolean
            Return Me.IsNull(Me.tableBikeParkLista.NumeroAllegatiColumn)
        End Function
        
        Public Sub SetNumeroAllegatiNull()
            Me(Me.tableBikeParkLista.NumeroAllegatiColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BikeParkListaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BikeParkListaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BikeParkListaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BikeParkListaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_DurataAbbonamentoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnDescrizione As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroInBici_DurataAbbonamento")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneColumn As DataColumn
            Get
                Return Me.columnDescrizione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroInBici_DurataAbbonamentoRow
            Get
                Return CType(Me.Rows(index),CentroInBici_DurataAbbonamentoRow)
            End Get
        End Property
        
        Public Event CentroInBici_DurataAbbonamentoRowChanged As CentroInBici_DurataAbbonamentoRowChangeEventHandler
        
        Public Event CentroInBici_DurataAbbonamentoRowChanging As CentroInBici_DurataAbbonamentoRowChangeEventHandler
        
        Public Event CentroInBici_DurataAbbonamentoRowDeleted As CentroInBici_DurataAbbonamentoRowChangeEventHandler
        
        Public Event CentroInBici_DurataAbbonamentoRowDeleting As CentroInBici_DurataAbbonamentoRowChangeEventHandler
        
        Public Overloads Sub AddCentroInBici_DurataAbbonamentoRow(ByVal row As CentroInBici_DurataAbbonamentoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroInBici_DurataAbbonamentoRow(ByVal Id As Integer, ByVal Descrizione As String) As CentroInBici_DurataAbbonamentoRow
            Dim rowCentroInBici_DurataAbbonamentoRow As CentroInBici_DurataAbbonamentoRow = CType(Me.NewRow,CentroInBici_DurataAbbonamentoRow)
            rowCentroInBici_DurataAbbonamentoRow.ItemArray = New Object() {Id, Descrizione}
            Me.Rows.Add(rowCentroInBici_DurataAbbonamentoRow)
            Return rowCentroInBici_DurataAbbonamentoRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As CentroInBici_DurataAbbonamentoRow
            Return CType(Me.Rows.Find(New Object() {Id}),CentroInBici_DurataAbbonamentoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroInBici_DurataAbbonamentoDataTable = CType(MyBase.Clone,CentroInBici_DurataAbbonamentoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroInBici_DurataAbbonamentoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnDescrizione = Me.Columns("Descrizione")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnDescrizione = New DataColumn("Descrizione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewCentroInBici_DurataAbbonamentoRow() As CentroInBici_DurataAbbonamentoRow
            Return CType(Me.NewRow,CentroInBici_DurataAbbonamentoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroInBici_DurataAbbonamentoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroInBici_DurataAbbonamentoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroInBici_DurataAbbonamentoRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_DurataAbbonamentoRowChanged(Me, New CentroInBici_DurataAbbonamentoRowChangeEvent(CType(e.Row,CentroInBici_DurataAbbonamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroInBici_DurataAbbonamentoRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_DurataAbbonamentoRowChanging(Me, New CentroInBici_DurataAbbonamentoRowChangeEvent(CType(e.Row,CentroInBici_DurataAbbonamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroInBici_DurataAbbonamentoRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_DurataAbbonamentoRowDeleted(Me, New CentroInBici_DurataAbbonamentoRowChangeEvent(CType(e.Row,CentroInBici_DurataAbbonamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroInBici_DurataAbbonamentoRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_DurataAbbonamentoRowDeleting(Me, New CentroInBici_DurataAbbonamentoRowChangeEvent(CType(e.Row,CentroInBici_DurataAbbonamentoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroInBici_DurataAbbonamentoRow(ByVal row As CentroInBici_DurataAbbonamentoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_DurataAbbonamentoRow
        Inherits DataRow
        
        Private tableCentroInBici_DurataAbbonamento As CentroInBici_DurataAbbonamentoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroInBici_DurataAbbonamento = CType(Me.Table,CentroInBici_DurataAbbonamentoDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableCentroInBici_DurataAbbonamento.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableCentroInBici_DurataAbbonamento.IdColumn) = value
            End Set
        End Property
        
        Public Property Descrizione As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_DurataAbbonamento.DescrizioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_DurataAbbonamento.DescrizioneColumn) = value
            End Set
        End Property
        
        Public Function IsDescrizioneNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_DurataAbbonamento.DescrizioneColumn)
        End Function
        
        Public Sub SetDescrizioneNull()
            Me(Me.tableCentroInBici_DurataAbbonamento.DescrizioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_DurataAbbonamentoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroInBici_DurataAbbonamentoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroInBici_DurataAbbonamentoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroInBici_DurataAbbonamentoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_OrigineAbbonamentoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnDescrizione As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroInBici_OrigineAbbonamento")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneColumn As DataColumn
            Get
                Return Me.columnDescrizione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroInBici_OrigineAbbonamentoRow
            Get
                Return CType(Me.Rows(index),CentroInBici_OrigineAbbonamentoRow)
            End Get
        End Property
        
        Public Event CentroInBici_OrigineAbbonamentoRowChanged As CentroInBici_OrigineAbbonamentoRowChangeEventHandler
        
        Public Event CentroInBici_OrigineAbbonamentoRowChanging As CentroInBici_OrigineAbbonamentoRowChangeEventHandler
        
        Public Event CentroInBici_OrigineAbbonamentoRowDeleted As CentroInBici_OrigineAbbonamentoRowChangeEventHandler
        
        Public Event CentroInBici_OrigineAbbonamentoRowDeleting As CentroInBici_OrigineAbbonamentoRowChangeEventHandler
        
        Public Overloads Sub AddCentroInBici_OrigineAbbonamentoRow(ByVal row As CentroInBici_OrigineAbbonamentoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroInBici_OrigineAbbonamentoRow(ByVal Id As Integer, ByVal Descrizione As String) As CentroInBici_OrigineAbbonamentoRow
            Dim rowCentroInBici_OrigineAbbonamentoRow As CentroInBici_OrigineAbbonamentoRow = CType(Me.NewRow,CentroInBici_OrigineAbbonamentoRow)
            rowCentroInBici_OrigineAbbonamentoRow.ItemArray = New Object() {Id, Descrizione}
            Me.Rows.Add(rowCentroInBici_OrigineAbbonamentoRow)
            Return rowCentroInBici_OrigineAbbonamentoRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As CentroInBici_OrigineAbbonamentoRow
            Return CType(Me.Rows.Find(New Object() {Id}),CentroInBici_OrigineAbbonamentoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroInBici_OrigineAbbonamentoDataTable = CType(MyBase.Clone,CentroInBici_OrigineAbbonamentoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroInBici_OrigineAbbonamentoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnDescrizione = Me.Columns("Descrizione")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnDescrizione = New DataColumn("Descrizione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewCentroInBici_OrigineAbbonamentoRow() As CentroInBici_OrigineAbbonamentoRow
            Return CType(Me.NewRow,CentroInBici_OrigineAbbonamentoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroInBici_OrigineAbbonamentoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroInBici_OrigineAbbonamentoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroInBici_OrigineAbbonamentoRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_OrigineAbbonamentoRowChanged(Me, New CentroInBici_OrigineAbbonamentoRowChangeEvent(CType(e.Row,CentroInBici_OrigineAbbonamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroInBici_OrigineAbbonamentoRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_OrigineAbbonamentoRowChanging(Me, New CentroInBici_OrigineAbbonamentoRowChangeEvent(CType(e.Row,CentroInBici_OrigineAbbonamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroInBici_OrigineAbbonamentoRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_OrigineAbbonamentoRowDeleted(Me, New CentroInBici_OrigineAbbonamentoRowChangeEvent(CType(e.Row,CentroInBici_OrigineAbbonamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroInBici_OrigineAbbonamentoRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_OrigineAbbonamentoRowDeleting(Me, New CentroInBici_OrigineAbbonamentoRowChangeEvent(CType(e.Row,CentroInBici_OrigineAbbonamentoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroInBici_OrigineAbbonamentoRow(ByVal row As CentroInBici_OrigineAbbonamentoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_OrigineAbbonamentoRow
        Inherits DataRow
        
        Private tableCentroInBici_OrigineAbbonamento As CentroInBici_OrigineAbbonamentoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroInBici_OrigineAbbonamento = CType(Me.Table,CentroInBici_OrigineAbbonamentoDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableCentroInBici_OrigineAbbonamento.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableCentroInBici_OrigineAbbonamento.IdColumn) = value
            End Set
        End Property
        
        Public Property Descrizione As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_OrigineAbbonamento.DescrizioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_OrigineAbbonamento.DescrizioneColumn) = value
            End Set
        End Property
        
        Public Function IsDescrizioneNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_OrigineAbbonamento.DescrizioneColumn)
        End Function
        
        Public Sub SetDescrizioneNull()
            Me(Me.tableCentroInBici_OrigineAbbonamento.DescrizioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_OrigineAbbonamentoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroInBici_OrigineAbbonamentoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroInBici_OrigineAbbonamentoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroInBici_OrigineAbbonamentoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_TipoAbbonamentoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnDescrizione As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroInBici_TipoAbbonamento")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneColumn As DataColumn
            Get
                Return Me.columnDescrizione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroInBici_TipoAbbonamentoRow
            Get
                Return CType(Me.Rows(index),CentroInBici_TipoAbbonamentoRow)
            End Get
        End Property
        
        Public Event CentroInBici_TipoAbbonamentoRowChanged As CentroInBici_TipoAbbonamentoRowChangeEventHandler
        
        Public Event CentroInBici_TipoAbbonamentoRowChanging As CentroInBici_TipoAbbonamentoRowChangeEventHandler
        
        Public Event CentroInBici_TipoAbbonamentoRowDeleted As CentroInBici_TipoAbbonamentoRowChangeEventHandler
        
        Public Event CentroInBici_TipoAbbonamentoRowDeleting As CentroInBici_TipoAbbonamentoRowChangeEventHandler
        
        Public Overloads Sub AddCentroInBici_TipoAbbonamentoRow(ByVal row As CentroInBici_TipoAbbonamentoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroInBici_TipoAbbonamentoRow(ByVal Id As Integer, ByVal Descrizione As String) As CentroInBici_TipoAbbonamentoRow
            Dim rowCentroInBici_TipoAbbonamentoRow As CentroInBici_TipoAbbonamentoRow = CType(Me.NewRow,CentroInBici_TipoAbbonamentoRow)
            rowCentroInBici_TipoAbbonamentoRow.ItemArray = New Object() {Id, Descrizione}
            Me.Rows.Add(rowCentroInBici_TipoAbbonamentoRow)
            Return rowCentroInBici_TipoAbbonamentoRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As CentroInBici_TipoAbbonamentoRow
            Return CType(Me.Rows.Find(New Object() {Id}),CentroInBici_TipoAbbonamentoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroInBici_TipoAbbonamentoDataTable = CType(MyBase.Clone,CentroInBici_TipoAbbonamentoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroInBici_TipoAbbonamentoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnDescrizione = Me.Columns("Descrizione")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnDescrizione = New DataColumn("Descrizione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewCentroInBici_TipoAbbonamentoRow() As CentroInBici_TipoAbbonamentoRow
            Return CType(Me.NewRow,CentroInBici_TipoAbbonamentoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroInBici_TipoAbbonamentoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroInBici_TipoAbbonamentoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroInBici_TipoAbbonamentoRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_TipoAbbonamentoRowChanged(Me, New CentroInBici_TipoAbbonamentoRowChangeEvent(CType(e.Row,CentroInBici_TipoAbbonamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroInBici_TipoAbbonamentoRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_TipoAbbonamentoRowChanging(Me, New CentroInBici_TipoAbbonamentoRowChangeEvent(CType(e.Row,CentroInBici_TipoAbbonamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroInBici_TipoAbbonamentoRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_TipoAbbonamentoRowDeleted(Me, New CentroInBici_TipoAbbonamentoRowChangeEvent(CType(e.Row,CentroInBici_TipoAbbonamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroInBici_TipoAbbonamentoRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_TipoAbbonamentoRowDeleting(Me, New CentroInBici_TipoAbbonamentoRowChangeEvent(CType(e.Row,CentroInBici_TipoAbbonamentoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroInBici_TipoAbbonamentoRow(ByVal row As CentroInBici_TipoAbbonamentoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_TipoAbbonamentoRow
        Inherits DataRow
        
        Private tableCentroInBici_TipoAbbonamento As CentroInBici_TipoAbbonamentoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroInBici_TipoAbbonamento = CType(Me.Table,CentroInBici_TipoAbbonamentoDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableCentroInBici_TipoAbbonamento.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableCentroInBici_TipoAbbonamento.IdColumn) = value
            End Set
        End Property
        
        Public Property Descrizione As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_TipoAbbonamento.DescrizioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_TipoAbbonamento.DescrizioneColumn) = value
            End Set
        End Property
        
        Public Function IsDescrizioneNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_TipoAbbonamento.DescrizioneColumn)
        End Function
        
        Public Sub SetDescrizioneNull()
            Me(Me.tableCentroInBici_TipoAbbonamento.DescrizioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_TipoAbbonamentoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroInBici_TipoAbbonamentoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroInBici_TipoAbbonamentoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroInBici_TipoAbbonamentoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_TipoNotaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdTipoNota As DataColumn
        
        Private columnTipo As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroInBici_TipoNota")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdTipoNotaColumn As DataColumn
            Get
                Return Me.columnIdTipoNota
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroInBici_TipoNotaRow
            Get
                Return CType(Me.Rows(index),CentroInBici_TipoNotaRow)
            End Get
        End Property
        
        Public Event CentroInBici_TipoNotaRowChanged As CentroInBici_TipoNotaRowChangeEventHandler
        
        Public Event CentroInBici_TipoNotaRowChanging As CentroInBici_TipoNotaRowChangeEventHandler
        
        Public Event CentroInBici_TipoNotaRowDeleted As CentroInBici_TipoNotaRowChangeEventHandler
        
        Public Event CentroInBici_TipoNotaRowDeleting As CentroInBici_TipoNotaRowChangeEventHandler
        
        Public Overloads Sub AddCentroInBici_TipoNotaRow(ByVal row As CentroInBici_TipoNotaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroInBici_TipoNotaRow(ByVal IdTipoNota As Integer, ByVal Tipo As String) As CentroInBici_TipoNotaRow
            Dim rowCentroInBici_TipoNotaRow As CentroInBici_TipoNotaRow = CType(Me.NewRow,CentroInBici_TipoNotaRow)
            rowCentroInBici_TipoNotaRow.ItemArray = New Object() {IdTipoNota, Tipo}
            Me.Rows.Add(rowCentroInBici_TipoNotaRow)
            Return rowCentroInBici_TipoNotaRow
        End Function
        
        Public Function FindByIdTipoNota(ByVal IdTipoNota As Integer) As CentroInBici_TipoNotaRow
            Return CType(Me.Rows.Find(New Object() {IdTipoNota}),CentroInBici_TipoNotaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroInBici_TipoNotaDataTable = CType(MyBase.Clone,CentroInBici_TipoNotaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroInBici_TipoNotaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdTipoNota = Me.Columns("IdTipoNota")
            Me.columnTipo = Me.Columns("Tipo")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdTipoNota = New DataColumn("IdTipoNota", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdTipoNota)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdTipoNota}, true))
            Me.columnIdTipoNota.AllowDBNull = false
            Me.columnIdTipoNota.Unique = true
        End Sub
        
        Public Function NewCentroInBici_TipoNotaRow() As CentroInBici_TipoNotaRow
            Return CType(Me.NewRow,CentroInBici_TipoNotaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroInBici_TipoNotaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroInBici_TipoNotaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroInBici_TipoNotaRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_TipoNotaRowChanged(Me, New CentroInBici_TipoNotaRowChangeEvent(CType(e.Row,CentroInBici_TipoNotaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroInBici_TipoNotaRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_TipoNotaRowChanging(Me, New CentroInBici_TipoNotaRowChangeEvent(CType(e.Row,CentroInBici_TipoNotaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroInBici_TipoNotaRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroInBici_TipoNotaRowDeleted(Me, New CentroInBici_TipoNotaRowChangeEvent(CType(e.Row,CentroInBici_TipoNotaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroInBici_TipoNotaRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroInBici_TipoNotaRowDeleting(Me, New CentroInBici_TipoNotaRowChangeEvent(CType(e.Row,CentroInBici_TipoNotaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroInBici_TipoNotaRow(ByVal row As CentroInBici_TipoNotaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_TipoNotaRow
        Inherits DataRow
        
        Private tableCentroInBici_TipoNota As CentroInBici_TipoNotaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroInBici_TipoNota = CType(Me.Table,CentroInBici_TipoNotaDataTable)
        End Sub
        
        Public Property IdTipoNota As Integer
            Get
                Return CType(Me(Me.tableCentroInBici_TipoNota.IdTipoNotaColumn),Integer)
            End Get
            Set
                Me(Me.tableCentroInBici_TipoNota.IdTipoNotaColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici_TipoNota.TipoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici_TipoNota.TipoColumn) = value
            End Set
        End Property
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici_TipoNota.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tableCentroInBici_TipoNota.TipoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBici_TipoNotaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroInBici_TipoNotaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroInBici_TipoNotaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroInBici_TipoNotaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBiciDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDATA As DataColumn
        
        Private columnMATRICOLA As DataColumn
        
        Private columnMINORENNE As DataColumn
        
        Private columnCOGNOME As DataColumn
        
        Private columnNOME As DataColumn
        
        Private columnDATA_NASCITA As DataColumn
        
        Private columnPARENTELA As DataColumn
        
        Private columnCOGNOME_PARENTE As DataColumn
        
        Private columnNOME_PARENTE As DataColumn
        
        Private columnRES_VIA As DataColumn
        
        Private columnRES_N_CIV As DataColumn
        
        Private columnRES_CAP As DataColumn
        
        Private columnRES_CIT As DataColumn
        
        Private columnRES_PROV As DataColumn
        
        Private columnRES_VIA_P As DataColumn
        
        Private columnRES_N_CIV_P As DataColumn
        
        Private columnRES_CAP_P As DataColumn
        
        Private columnRES_CIT_P As DataColumn
        
        Private columnRES_PROV_P As DataColumn
        
        Private columnTEL As DataColumn
        
        Private columnCEL As DataColumn
        
        Private columnDOM_RES As DataColumn
        
        Private columnDOM_VIA As DataColumn
        
        Private columnDOM_N_CIV As DataColumn
        
        Private columnDOM_CAP As DataColumn
        
        Private columnDOM_CIT As DataColumn
        
        Private columnDOM_PROV As DataColumn
        
        Private columnDOCUMENTO_TIPO As DataColumn
        
        Private columnDOCUMENTO_NUM As DataColumn
        
        Private columnCHIAVE As DataColumn
        
        Private columnREGIONE As DataColumn
        
        Private columnIdUtente As DataColumn
        
        Private columnCauzione As DataColumn
        
        Private columnStudente As DataColumn
        
        Private columnComune As DataColumn
        
        Private columnABBONAMENTO_NUM As DataColumn
        
        Private columnABBONAMENTO_ORIGINE As DataColumn
        
        Private columnABBONAMENTO_TIPO As DataColumn
        
        Private columnABBONAMENTO_DURATA As DataColumn
        
        Private columnPendolare As DataColumn
        
        Private columnABBONAMENTO_ALTRO As DataColumn
        
        Private columnABBONAMENTO_TRATTA As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroInBici")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DATAColumn As DataColumn
            Get
                Return Me.columnDATA
            End Get
        End Property
        
        Friend ReadOnly Property MATRICOLAColumn As DataColumn
            Get
                Return Me.columnMATRICOLA
            End Get
        End Property
        
        Friend ReadOnly Property MINORENNEColumn As DataColumn
            Get
                Return Me.columnMINORENNE
            End Get
        End Property
        
        Friend ReadOnly Property COGNOMEColumn As DataColumn
            Get
                Return Me.columnCOGNOME
            End Get
        End Property
        
        Friend ReadOnly Property NOMEColumn As DataColumn
            Get
                Return Me.columnNOME
            End Get
        End Property
        
        Friend ReadOnly Property DATA_NASCITAColumn As DataColumn
            Get
                Return Me.columnDATA_NASCITA
            End Get
        End Property
        
        Friend ReadOnly Property PARENTELAColumn As DataColumn
            Get
                Return Me.columnPARENTELA
            End Get
        End Property
        
        Friend ReadOnly Property COGNOME_PARENTEColumn As DataColumn
            Get
                Return Me.columnCOGNOME_PARENTE
            End Get
        End Property
        
        Friend ReadOnly Property NOME_PARENTEColumn As DataColumn
            Get
                Return Me.columnNOME_PARENTE
            End Get
        End Property
        
        Friend ReadOnly Property RES_VIAColumn As DataColumn
            Get
                Return Me.columnRES_VIA
            End Get
        End Property
        
        Friend ReadOnly Property RES_N_CIVColumn As DataColumn
            Get
                Return Me.columnRES_N_CIV
            End Get
        End Property
        
        Friend ReadOnly Property RES_CAPColumn As DataColumn
            Get
                Return Me.columnRES_CAP
            End Get
        End Property
        
        Friend ReadOnly Property RES_CITColumn As DataColumn
            Get
                Return Me.columnRES_CIT
            End Get
        End Property
        
        Friend ReadOnly Property RES_PROVColumn As DataColumn
            Get
                Return Me.columnRES_PROV
            End Get
        End Property
        
        Friend ReadOnly Property RES_VIA_PColumn As DataColumn
            Get
                Return Me.columnRES_VIA_P
            End Get
        End Property
        
        Friend ReadOnly Property RES_N_CIV_PColumn As DataColumn
            Get
                Return Me.columnRES_N_CIV_P
            End Get
        End Property
        
        Friend ReadOnly Property RES_CAP_PColumn As DataColumn
            Get
                Return Me.columnRES_CAP_P
            End Get
        End Property
        
        Friend ReadOnly Property RES_CIT_PColumn As DataColumn
            Get
                Return Me.columnRES_CIT_P
            End Get
        End Property
        
        Friend ReadOnly Property RES_PROV_PColumn As DataColumn
            Get
                Return Me.columnRES_PROV_P
            End Get
        End Property
        
        Friend ReadOnly Property TELColumn As DataColumn
            Get
                Return Me.columnTEL
            End Get
        End Property
        
        Friend ReadOnly Property CELColumn As DataColumn
            Get
                Return Me.columnCEL
            End Get
        End Property
        
        Friend ReadOnly Property DOM_RESColumn As DataColumn
            Get
                Return Me.columnDOM_RES
            End Get
        End Property
        
        Friend ReadOnly Property DOM_VIAColumn As DataColumn
            Get
                Return Me.columnDOM_VIA
            End Get
        End Property
        
        Friend ReadOnly Property DOM_N_CIVColumn As DataColumn
            Get
                Return Me.columnDOM_N_CIV
            End Get
        End Property
        
        Friend ReadOnly Property DOM_CAPColumn As DataColumn
            Get
                Return Me.columnDOM_CAP
            End Get
        End Property
        
        Friend ReadOnly Property DOM_CITColumn As DataColumn
            Get
                Return Me.columnDOM_CIT
            End Get
        End Property
        
        Friend ReadOnly Property DOM_PROVColumn As DataColumn
            Get
                Return Me.columnDOM_PROV
            End Get
        End Property
        
        Friend ReadOnly Property DOCUMENTO_TIPOColumn As DataColumn
            Get
                Return Me.columnDOCUMENTO_TIPO
            End Get
        End Property
        
        Friend ReadOnly Property DOCUMENTO_NUMColumn As DataColumn
            Get
                Return Me.columnDOCUMENTO_NUM
            End Get
        End Property
        
        Friend ReadOnly Property CHIAVEColumn As DataColumn
            Get
                Return Me.columnCHIAVE
            End Get
        End Property
        
        Friend ReadOnly Property REGIONEColumn As DataColumn
            Get
                Return Me.columnREGIONE
            End Get
        End Property
        
        Friend ReadOnly Property IdUtenteColumn As DataColumn
            Get
                Return Me.columnIdUtente
            End Get
        End Property
        
        Friend ReadOnly Property CauzioneColumn As DataColumn
            Get
                Return Me.columnCauzione
            End Get
        End Property
        
        Friend ReadOnly Property StudenteColumn As DataColumn
            Get
                Return Me.columnStudente
            End Get
        End Property
        
        Friend ReadOnly Property ComuneColumn As DataColumn
            Get
                Return Me.columnComune
            End Get
        End Property
        
        Friend ReadOnly Property ABBONAMENTO_NUMColumn As DataColumn
            Get
                Return Me.columnABBONAMENTO_NUM
            End Get
        End Property
        
        Friend ReadOnly Property ABBONAMENTO_ORIGINEColumn As DataColumn
            Get
                Return Me.columnABBONAMENTO_ORIGINE
            End Get
        End Property
        
        Friend ReadOnly Property ABBONAMENTO_TIPOColumn As DataColumn
            Get
                Return Me.columnABBONAMENTO_TIPO
            End Get
        End Property
        
        Friend ReadOnly Property ABBONAMENTO_DURATAColumn As DataColumn
            Get
                Return Me.columnABBONAMENTO_DURATA
            End Get
        End Property
        
        Friend ReadOnly Property PendolareColumn As DataColumn
            Get
                Return Me.columnPendolare
            End Get
        End Property
        
        Friend ReadOnly Property ABBONAMENTO_ALTROColumn As DataColumn
            Get
                Return Me.columnABBONAMENTO_ALTRO
            End Get
        End Property
        
        Friend ReadOnly Property ABBONAMENTO_TRATTAColumn As DataColumn
            Get
                Return Me.columnABBONAMENTO_TRATTA
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroInBiciRow
            Get
                Return CType(Me.Rows(index),CentroInBiciRow)
            End Get
        End Property
        
        Public Event CentroInBiciRowChanged As CentroInBiciRowChangeEventHandler
        
        Public Event CentroInBiciRowChanging As CentroInBiciRowChangeEventHandler
        
        Public Event CentroInBiciRowDeleted As CentroInBiciRowChangeEventHandler
        
        Public Event CentroInBiciRowDeleting As CentroInBiciRowChangeEventHandler
        
        Public Overloads Sub AddCentroInBiciRow(ByVal row As CentroInBiciRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroInBiciRow( _
                    ByVal ID As Integer,  _
                    ByVal DATA As Date,  _
                    ByVal MATRICOLA As String,  _
                    ByVal MINORENNE As Boolean,  _
                    ByVal COGNOME As String,  _
                    ByVal NOME As String,  _
                    ByVal DATA_NASCITA As Date,  _
                    ByVal PARENTELA As Integer,  _
                    ByVal COGNOME_PARENTE As String,  _
                    ByVal NOME_PARENTE As String,  _
                    ByVal RES_VIA As String,  _
                    ByVal RES_N_CIV As String,  _
                    ByVal RES_CAP As String,  _
                    ByVal RES_CIT As String,  _
                    ByVal RES_PROV As String,  _
                    ByVal RES_VIA_P As String,  _
                    ByVal RES_N_CIV_P As String,  _
                    ByVal RES_CAP_P As String,  _
                    ByVal RES_CIT_P As String,  _
                    ByVal RES_PROV_P As String,  _
                    ByVal TEL As String,  _
                    ByVal CEL As String,  _
                    ByVal DOM_RES As Boolean,  _
                    ByVal DOM_VIA As String,  _
                    ByVal DOM_N_CIV As String,  _
                    ByVal DOM_CAP As String,  _
                    ByVal DOM_CIT As String,  _
                    ByVal DOM_PROV As String,  _
                    ByVal DOCUMENTO_TIPO As Integer,  _
                    ByVal DOCUMENTO_NUM As String,  _
                    ByVal CHIAVE As String,  _
                    ByVal REGIONE As Boolean,  _
                    ByVal IdUtente As Integer,  _
                    ByVal Cauzione As Double,  _
                    ByVal Studente As Boolean,  _
                    ByVal Comune As Boolean,  _
                    ByVal ABBONAMENTO_NUM As String,  _
                    ByVal ABBONAMENTO_ORIGINE As Integer,  _
                    ByVal ABBONAMENTO_TIPO As Integer,  _
                    ByVal ABBONAMENTO_DURATA As Integer,  _
                    ByVal Pendolare As Boolean,  _
                    ByVal ABBONAMENTO_ALTRO As String,  _
                    ByVal ABBONAMENTO_TRATTA As String) As CentroInBiciRow
            Dim rowCentroInBiciRow As CentroInBiciRow = CType(Me.NewRow,CentroInBiciRow)
            rowCentroInBiciRow.ItemArray = New Object() {ID, DATA, MATRICOLA, MINORENNE, COGNOME, NOME, DATA_NASCITA, PARENTELA, COGNOME_PARENTE, NOME_PARENTE, RES_VIA, RES_N_CIV, RES_CAP, RES_CIT, RES_PROV, RES_VIA_P, RES_N_CIV_P, RES_CAP_P, RES_CIT_P, RES_PROV_P, TEL, CEL, DOM_RES, DOM_VIA, DOM_N_CIV, DOM_CAP, DOM_CIT, DOM_PROV, DOCUMENTO_TIPO, DOCUMENTO_NUM, CHIAVE, REGIONE, IdUtente, Cauzione, Studente, Comune, ABBONAMENTO_NUM, ABBONAMENTO_ORIGINE, ABBONAMENTO_TIPO, ABBONAMENTO_DURATA, Pendolare, ABBONAMENTO_ALTRO, ABBONAMENTO_TRATTA}
            Me.Rows.Add(rowCentroInBiciRow)
            Return rowCentroInBiciRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As CentroInBiciRow
            Return CType(Me.Rows.Find(New Object() {ID}),CentroInBiciRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroInBiciDataTable = CType(MyBase.Clone,CentroInBiciDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroInBiciDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDATA = Me.Columns("DATA")
            Me.columnMATRICOLA = Me.Columns("MATRICOLA")
            Me.columnMINORENNE = Me.Columns("MINORENNE")
            Me.columnCOGNOME = Me.Columns("COGNOME")
            Me.columnNOME = Me.Columns("NOME")
            Me.columnDATA_NASCITA = Me.Columns("DATA_NASCITA")
            Me.columnPARENTELA = Me.Columns("PARENTELA")
            Me.columnCOGNOME_PARENTE = Me.Columns("COGNOME_PARENTE")
            Me.columnNOME_PARENTE = Me.Columns("NOME_PARENTE")
            Me.columnRES_VIA = Me.Columns("RES_VIA")
            Me.columnRES_N_CIV = Me.Columns("RES_N_CIV")
            Me.columnRES_CAP = Me.Columns("RES_CAP")
            Me.columnRES_CIT = Me.Columns("RES_CIT")
            Me.columnRES_PROV = Me.Columns("RES_PROV")
            Me.columnRES_VIA_P = Me.Columns("RES_VIA_P")
            Me.columnRES_N_CIV_P = Me.Columns("RES_N_CIV_P")
            Me.columnRES_CAP_P = Me.Columns("RES_CAP_P")
            Me.columnRES_CIT_P = Me.Columns("RES_CIT_P")
            Me.columnRES_PROV_P = Me.Columns("RES_PROV_P")
            Me.columnTEL = Me.Columns("TEL")
            Me.columnCEL = Me.Columns("CEL")
            Me.columnDOM_RES = Me.Columns("DOM_RES")
            Me.columnDOM_VIA = Me.Columns("DOM_VIA")
            Me.columnDOM_N_CIV = Me.Columns("DOM_N_CIV")
            Me.columnDOM_CAP = Me.Columns("DOM_CAP")
            Me.columnDOM_CIT = Me.Columns("DOM_CIT")
            Me.columnDOM_PROV = Me.Columns("DOM_PROV")
            Me.columnDOCUMENTO_TIPO = Me.Columns("DOCUMENTO_TIPO")
            Me.columnDOCUMENTO_NUM = Me.Columns("DOCUMENTO_NUM")
            Me.columnCHIAVE = Me.Columns("CHIAVE")
            Me.columnREGIONE = Me.Columns("REGIONE")
            Me.columnIdUtente = Me.Columns("IdUtente")
            Me.columnCauzione = Me.Columns("Cauzione")
            Me.columnStudente = Me.Columns("Studente")
            Me.columnComune = Me.Columns("Comune")
            Me.columnABBONAMENTO_NUM = Me.Columns("ABBONAMENTO_NUM")
            Me.columnABBONAMENTO_ORIGINE = Me.Columns("ABBONAMENTO_ORIGINE")
            Me.columnABBONAMENTO_TIPO = Me.Columns("ABBONAMENTO_TIPO")
            Me.columnABBONAMENTO_DURATA = Me.Columns("ABBONAMENTO_DURATA")
            Me.columnPendolare = Me.Columns("Pendolare")
            Me.columnABBONAMENTO_ALTRO = Me.Columns("ABBONAMENTO_ALTRO")
            Me.columnABBONAMENTO_TRATTA = Me.Columns("ABBONAMENTO_TRATTA")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDATA = New DataColumn("DATA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATA)
            Me.columnMATRICOLA = New DataColumn("MATRICOLA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMATRICOLA)
            Me.columnMINORENNE = New DataColumn("MINORENNE", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMINORENNE)
            Me.columnCOGNOME = New DataColumn("COGNOME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOGNOME)
            Me.columnNOME = New DataColumn("NOME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOME)
            Me.columnDATA_NASCITA = New DataColumn("DATA_NASCITA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATA_NASCITA)
            Me.columnPARENTELA = New DataColumn("PARENTELA", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARENTELA)
            Me.columnCOGNOME_PARENTE = New DataColumn("COGNOME_PARENTE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOGNOME_PARENTE)
            Me.columnNOME_PARENTE = New DataColumn("NOME_PARENTE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOME_PARENTE)
            Me.columnRES_VIA = New DataColumn("RES_VIA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_VIA)
            Me.columnRES_N_CIV = New DataColumn("RES_N_CIV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_N_CIV)
            Me.columnRES_CAP = New DataColumn("RES_CAP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_CAP)
            Me.columnRES_CIT = New DataColumn("RES_CIT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_CIT)
            Me.columnRES_PROV = New DataColumn("RES_PROV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_PROV)
            Me.columnRES_VIA_P = New DataColumn("RES_VIA_P", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_VIA_P)
            Me.columnRES_N_CIV_P = New DataColumn("RES_N_CIV_P", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_N_CIV_P)
            Me.columnRES_CAP_P = New DataColumn("RES_CAP_P", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_CAP_P)
            Me.columnRES_CIT_P = New DataColumn("RES_CIT_P", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_CIT_P)
            Me.columnRES_PROV_P = New DataColumn("RES_PROV_P", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRES_PROV_P)
            Me.columnTEL = New DataColumn("TEL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTEL)
            Me.columnCEL = New DataColumn("CEL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEL)
            Me.columnDOM_RES = New DataColumn("DOM_RES", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_RES)
            Me.columnDOM_VIA = New DataColumn("DOM_VIA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_VIA)
            Me.columnDOM_N_CIV = New DataColumn("DOM_N_CIV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_N_CIV)
            Me.columnDOM_CAP = New DataColumn("DOM_CAP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_CAP)
            Me.columnDOM_CIT = New DataColumn("DOM_CIT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_CIT)
            Me.columnDOM_PROV = New DataColumn("DOM_PROV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOM_PROV)
            Me.columnDOCUMENTO_TIPO = New DataColumn("DOCUMENTO_TIPO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCUMENTO_TIPO)
            Me.columnDOCUMENTO_NUM = New DataColumn("DOCUMENTO_NUM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCUMENTO_NUM)
            Me.columnCHIAVE = New DataColumn("CHIAVE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHIAVE)
            Me.columnREGIONE = New DataColumn("REGIONE", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREGIONE)
            Me.columnIdUtente = New DataColumn("IdUtente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdUtente)
            Me.columnCauzione = New DataColumn("Cauzione", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCauzione)
            Me.columnStudente = New DataColumn("Studente", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStudente)
            Me.columnComune = New DataColumn("Comune", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComune)
            Me.columnABBONAMENTO_NUM = New DataColumn("ABBONAMENTO_NUM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABBONAMENTO_NUM)
            Me.columnABBONAMENTO_ORIGINE = New DataColumn("ABBONAMENTO_ORIGINE", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABBONAMENTO_ORIGINE)
            Me.columnABBONAMENTO_TIPO = New DataColumn("ABBONAMENTO_TIPO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABBONAMENTO_TIPO)
            Me.columnABBONAMENTO_DURATA = New DataColumn("ABBONAMENTO_DURATA", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABBONAMENTO_DURATA)
            Me.columnPendolare = New DataColumn("Pendolare", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPendolare)
            Me.columnABBONAMENTO_ALTRO = New DataColumn("ABBONAMENTO_ALTRO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABBONAMENTO_ALTRO)
            Me.columnABBONAMENTO_TRATTA = New DataColumn("ABBONAMENTO_TRATTA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABBONAMENTO_TRATTA)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnMINORENNE.AllowDBNull = false
            Me.columnDOM_RES.AllowDBNull = false
            Me.columnREGIONE.AllowDBNull = false
        End Sub
        
        Public Function NewCentroInBiciRow() As CentroInBiciRow
            Return CType(Me.NewRow,CentroInBiciRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroInBiciRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroInBiciRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroInBiciRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroInBiciRowChanged(Me, New CentroInBiciRowChangeEvent(CType(e.Row,CentroInBiciRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroInBiciRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroInBiciRowChanging(Me, New CentroInBiciRowChangeEvent(CType(e.Row,CentroInBiciRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroInBiciRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroInBiciRowDeleted(Me, New CentroInBiciRowChangeEvent(CType(e.Row,CentroInBiciRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroInBiciRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroInBiciRowDeleting(Me, New CentroInBiciRowChangeEvent(CType(e.Row,CentroInBiciRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroInBiciRow(ByVal row As CentroInBiciRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBiciRow
        Inherits DataRow
        
        Private tableCentroInBici As CentroInBiciDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroInBici = CType(Me.Table,CentroInBiciDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableCentroInBici.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCentroInBici.IDColumn) = value
            End Set
        End Property
        
        Public Property DATA As Date
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.DATAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.DATAColumn) = value
            End Set
        End Property
        
        Public Property MATRICOLA As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.MATRICOLAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.MATRICOLAColumn) = value
            End Set
        End Property
        
        Public Property MINORENNE As Boolean
            Get
                Return CType(Me(Me.tableCentroInBici.MINORENNEColumn),Boolean)
            End Get
            Set
                Me(Me.tableCentroInBici.MINORENNEColumn) = value
            End Set
        End Property
        
        Public Property COGNOME As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.COGNOMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.COGNOMEColumn) = value
            End Set
        End Property
        
        Public Property NOME As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.NOMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.NOMEColumn) = value
            End Set
        End Property
        
        Public Property DATA_NASCITA As Date
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.DATA_NASCITAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.DATA_NASCITAColumn) = value
            End Set
        End Property
        
        Public Property PARENTELA As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.PARENTELAColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.PARENTELAColumn) = value
            End Set
        End Property
        
        Public Property COGNOME_PARENTE As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.COGNOME_PARENTEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.COGNOME_PARENTEColumn) = value
            End Set
        End Property
        
        Public Property NOME_PARENTE As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.NOME_PARENTEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.NOME_PARENTEColumn) = value
            End Set
        End Property
        
        Public Property RES_VIA As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.RES_VIAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.RES_VIAColumn) = value
            End Set
        End Property
        
        Public Property RES_N_CIV As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.RES_N_CIVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.RES_N_CIVColumn) = value
            End Set
        End Property
        
        Public Property RES_CAP As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.RES_CAPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.RES_CAPColumn) = value
            End Set
        End Property
        
        Public Property RES_CIT As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.RES_CITColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.RES_CITColumn) = value
            End Set
        End Property
        
        Public Property RES_PROV As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.RES_PROVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.RES_PROVColumn) = value
            End Set
        End Property
        
        Public Property RES_VIA_P As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.RES_VIA_PColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.RES_VIA_PColumn) = value
            End Set
        End Property
        
        Public Property RES_N_CIV_P As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.RES_N_CIV_PColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.RES_N_CIV_PColumn) = value
            End Set
        End Property
        
        Public Property RES_CAP_P As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.RES_CAP_PColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.RES_CAP_PColumn) = value
            End Set
        End Property
        
        Public Property RES_CIT_P As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.RES_CIT_PColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.RES_CIT_PColumn) = value
            End Set
        End Property
        
        Public Property RES_PROV_P As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.RES_PROV_PColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.RES_PROV_PColumn) = value
            End Set
        End Property
        
        Public Property TEL As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.TELColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.TELColumn) = value
            End Set
        End Property
        
        Public Property CEL As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.CELColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.CELColumn) = value
            End Set
        End Property
        
        Public Property DOM_RES As Boolean
            Get
                Return CType(Me(Me.tableCentroInBici.DOM_RESColumn),Boolean)
            End Get
            Set
                Me(Me.tableCentroInBici.DOM_RESColumn) = value
            End Set
        End Property
        
        Public Property DOM_VIA As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.DOM_VIAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.DOM_VIAColumn) = value
            End Set
        End Property
        
        Public Property DOM_N_CIV As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.DOM_N_CIVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.DOM_N_CIVColumn) = value
            End Set
        End Property
        
        Public Property DOM_CAP As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.DOM_CAPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.DOM_CAPColumn) = value
            End Set
        End Property
        
        Public Property DOM_CIT As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.DOM_CITColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.DOM_CITColumn) = value
            End Set
        End Property
        
        Public Property DOM_PROV As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.DOM_PROVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.DOM_PROVColumn) = value
            End Set
        End Property
        
        Public Property DOCUMENTO_TIPO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.DOCUMENTO_TIPOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.DOCUMENTO_TIPOColumn) = value
            End Set
        End Property
        
        Public Property DOCUMENTO_NUM As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.DOCUMENTO_NUMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.DOCUMENTO_NUMColumn) = value
            End Set
        End Property
        
        Public Property CHIAVE As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.CHIAVEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.CHIAVEColumn) = value
            End Set
        End Property
        
        Public Property REGIONE As Boolean
            Get
                Return CType(Me(Me.tableCentroInBici.REGIONEColumn),Boolean)
            End Get
            Set
                Me(Me.tableCentroInBici.REGIONEColumn) = value
            End Set
        End Property
        
        Public Property IdUtente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.IdUtenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.IdUtenteColumn) = value
            End Set
        End Property
        
        Public Property Cauzione As Double
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.CauzioneColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.CauzioneColumn) = value
            End Set
        End Property
        
        Public Property Studente As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.StudenteColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.StudenteColumn) = value
            End Set
        End Property
        
        Public Property Comune As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.ComuneColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.ComuneColumn) = value
            End Set
        End Property
        
        Public Property ABBONAMENTO_NUM As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.ABBONAMENTO_NUMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.ABBONAMENTO_NUMColumn) = value
            End Set
        End Property
        
        Public Property ABBONAMENTO_ORIGINE As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.ABBONAMENTO_ORIGINEColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.ABBONAMENTO_ORIGINEColumn) = value
            End Set
        End Property
        
        Public Property ABBONAMENTO_TIPO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.ABBONAMENTO_TIPOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.ABBONAMENTO_TIPOColumn) = value
            End Set
        End Property
        
        Public Property ABBONAMENTO_DURATA As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.ABBONAMENTO_DURATAColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.ABBONAMENTO_DURATAColumn) = value
            End Set
        End Property
        
        Public Property Pendolare As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.PendolareColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.PendolareColumn) = value
            End Set
        End Property
        
        Public Property ABBONAMENTO_ALTRO As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.ABBONAMENTO_ALTROColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.ABBONAMENTO_ALTROColumn) = value
            End Set
        End Property
        
        Public Property ABBONAMENTO_TRATTA As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroInBici.ABBONAMENTO_TRATTAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroInBici.ABBONAMENTO_TRATTAColumn) = value
            End Set
        End Property
        
        Public Function IsDATANull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.DATAColumn)
        End Function
        
        Public Sub SetDATANull()
            Me(Me.tableCentroInBici.DATAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMATRICOLANull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.MATRICOLAColumn)
        End Function
        
        Public Sub SetMATRICOLANull()
            Me(Me.tableCentroInBici.MATRICOLAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOGNOMENull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.COGNOMEColumn)
        End Function
        
        Public Sub SetCOGNOMENull()
            Me(Me.tableCentroInBici.COGNOMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNOMENull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.NOMEColumn)
        End Function
        
        Public Sub SetNOMENull()
            Me(Me.tableCentroInBici.NOMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDATA_NASCITANull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.DATA_NASCITAColumn)
        End Function
        
        Public Sub SetDATA_NASCITANull()
            Me(Me.tableCentroInBici.DATA_NASCITAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARENTELANull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.PARENTELAColumn)
        End Function
        
        Public Sub SetPARENTELANull()
            Me(Me.tableCentroInBici.PARENTELAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOGNOME_PARENTENull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.COGNOME_PARENTEColumn)
        End Function
        
        Public Sub SetCOGNOME_PARENTENull()
            Me(Me.tableCentroInBici.COGNOME_PARENTEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNOME_PARENTENull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.NOME_PARENTEColumn)
        End Function
        
        Public Sub SetNOME_PARENTENull()
            Me(Me.tableCentroInBici.NOME_PARENTEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_VIANull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.RES_VIAColumn)
        End Function
        
        Public Sub SetRES_VIANull()
            Me(Me.tableCentroInBici.RES_VIAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_N_CIVNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.RES_N_CIVColumn)
        End Function
        
        Public Sub SetRES_N_CIVNull()
            Me(Me.tableCentroInBici.RES_N_CIVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_CAPNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.RES_CAPColumn)
        End Function
        
        Public Sub SetRES_CAPNull()
            Me(Me.tableCentroInBici.RES_CAPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_CITNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.RES_CITColumn)
        End Function
        
        Public Sub SetRES_CITNull()
            Me(Me.tableCentroInBici.RES_CITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_PROVNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.RES_PROVColumn)
        End Function
        
        Public Sub SetRES_PROVNull()
            Me(Me.tableCentroInBici.RES_PROVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_VIA_PNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.RES_VIA_PColumn)
        End Function
        
        Public Sub SetRES_VIA_PNull()
            Me(Me.tableCentroInBici.RES_VIA_PColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_N_CIV_PNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.RES_N_CIV_PColumn)
        End Function
        
        Public Sub SetRES_N_CIV_PNull()
            Me(Me.tableCentroInBici.RES_N_CIV_PColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_CAP_PNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.RES_CAP_PColumn)
        End Function
        
        Public Sub SetRES_CAP_PNull()
            Me(Me.tableCentroInBici.RES_CAP_PColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_CIT_PNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.RES_CIT_PColumn)
        End Function
        
        Public Sub SetRES_CIT_PNull()
            Me(Me.tableCentroInBici.RES_CIT_PColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRES_PROV_PNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.RES_PROV_PColumn)
        End Function
        
        Public Sub SetRES_PROV_PNull()
            Me(Me.tableCentroInBici.RES_PROV_PColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTELNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.TELColumn)
        End Function
        
        Public Sub SetTELNull()
            Me(Me.tableCentroInBici.TELColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCELNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.CELColumn)
        End Function
        
        Public Sub SetCELNull()
            Me(Me.tableCentroInBici.CELColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_VIANull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.DOM_VIAColumn)
        End Function
        
        Public Sub SetDOM_VIANull()
            Me(Me.tableCentroInBici.DOM_VIAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_N_CIVNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.DOM_N_CIVColumn)
        End Function
        
        Public Sub SetDOM_N_CIVNull()
            Me(Me.tableCentroInBici.DOM_N_CIVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_CAPNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.DOM_CAPColumn)
        End Function
        
        Public Sub SetDOM_CAPNull()
            Me(Me.tableCentroInBici.DOM_CAPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_CITNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.DOM_CITColumn)
        End Function
        
        Public Sub SetDOM_CITNull()
            Me(Me.tableCentroInBici.DOM_CITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOM_PROVNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.DOM_PROVColumn)
        End Function
        
        Public Sub SetDOM_PROVNull()
            Me(Me.tableCentroInBici.DOM_PROVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOCUMENTO_TIPONull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.DOCUMENTO_TIPOColumn)
        End Function
        
        Public Sub SetDOCUMENTO_TIPONull()
            Me(Me.tableCentroInBici.DOCUMENTO_TIPOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOCUMENTO_NUMNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.DOCUMENTO_NUMColumn)
        End Function
        
        Public Sub SetDOCUMENTO_NUMNull()
            Me(Me.tableCentroInBici.DOCUMENTO_NUMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHIAVENull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.CHIAVEColumn)
        End Function
        
        Public Sub SetCHIAVENull()
            Me(Me.tableCentroInBici.CHIAVEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdUtenteNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.IdUtenteColumn)
        End Function
        
        Public Sub SetIdUtenteNull()
            Me(Me.tableCentroInBici.IdUtenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCauzioneNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.CauzioneColumn)
        End Function
        
        Public Sub SetCauzioneNull()
            Me(Me.tableCentroInBici.CauzioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStudenteNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.StudenteColumn)
        End Function
        
        Public Sub SetStudenteNull()
            Me(Me.tableCentroInBici.StudenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsComuneNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.ComuneColumn)
        End Function
        
        Public Sub SetComuneNull()
            Me(Me.tableCentroInBici.ComuneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsABBONAMENTO_NUMNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.ABBONAMENTO_NUMColumn)
        End Function
        
        Public Sub SetABBONAMENTO_NUMNull()
            Me(Me.tableCentroInBici.ABBONAMENTO_NUMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsABBONAMENTO_ORIGINENull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.ABBONAMENTO_ORIGINEColumn)
        End Function
        
        Public Sub SetABBONAMENTO_ORIGINENull()
            Me(Me.tableCentroInBici.ABBONAMENTO_ORIGINEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsABBONAMENTO_TIPONull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.ABBONAMENTO_TIPOColumn)
        End Function
        
        Public Sub SetABBONAMENTO_TIPONull()
            Me(Me.tableCentroInBici.ABBONAMENTO_TIPOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsABBONAMENTO_DURATANull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.ABBONAMENTO_DURATAColumn)
        End Function
        
        Public Sub SetABBONAMENTO_DURATANull()
            Me(Me.tableCentroInBici.ABBONAMENTO_DURATAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPendolareNull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.PendolareColumn)
        End Function
        
        Public Sub SetPendolareNull()
            Me(Me.tableCentroInBici.PendolareColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsABBONAMENTO_ALTRONull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.ABBONAMENTO_ALTROColumn)
        End Function
        
        Public Sub SetABBONAMENTO_ALTRONull()
            Me(Me.tableCentroInBici.ABBONAMENTO_ALTROColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsABBONAMENTO_TRATTANull() As Boolean
            Return Me.IsNull(Me.tableCentroInBici.ABBONAMENTO_TRATTAColumn)
        End Function
        
        Public Sub SetABBONAMENTO_TRATTANull()
            Me(Me.tableCentroInBici.ABBONAMENTO_TRATTAColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroInBiciRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroInBiciRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroInBiciRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroInBiciRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetri_AnagraficheDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnNUMERATORE As DataColumn
        
        Private columnDATA_INSERIMENTO As DataColumn
        
        Private columnMATRICOLA As DataColumn
        
        Private columnCOGNOME As DataColumn
        
        Private columnNOME As DataColumn
        
        Private columnVIA As DataColumn
        
        Private columnNUMEROVIA As DataColumn
        
        Private columnCITTA As DataColumn
        
        Private columnCAP As DataColumn
        
        Private columnTELEFONO As DataColumn
        
        Private columnMAIL As DataColumn
        
        Private columnDSI As DataColumn
        
        Private columnMATAUTO As DataColumn
        
        Private columnTIPO As DataColumn
        
        Private columnDATAVENDITA As DataColumn
        
        Private columnDATARESO As DataColumn
        
        Private columnATTIVA As DataColumn
        
        Friend Sub New()
            MyBase.New("AutoParchimetri_Anagrafiche")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NUMERATOREColumn As DataColumn
            Get
                Return Me.columnNUMERATORE
            End Get
        End Property
        
        Friend ReadOnly Property DATA_INSERIMENTOColumn As DataColumn
            Get
                Return Me.columnDATA_INSERIMENTO
            End Get
        End Property
        
        Friend ReadOnly Property MATRICOLAColumn As DataColumn
            Get
                Return Me.columnMATRICOLA
            End Get
        End Property
        
        Friend ReadOnly Property COGNOMEColumn As DataColumn
            Get
                Return Me.columnCOGNOME
            End Get
        End Property
        
        Friend ReadOnly Property NOMEColumn As DataColumn
            Get
                Return Me.columnNOME
            End Get
        End Property
        
        Friend ReadOnly Property VIAColumn As DataColumn
            Get
                Return Me.columnVIA
            End Get
        End Property
        
        Friend ReadOnly Property NUMEROVIAColumn As DataColumn
            Get
                Return Me.columnNUMEROVIA
            End Get
        End Property
        
        Friend ReadOnly Property CITTAColumn As DataColumn
            Get
                Return Me.columnCITTA
            End Get
        End Property
        
        Friend ReadOnly Property CAPColumn As DataColumn
            Get
                Return Me.columnCAP
            End Get
        End Property
        
        Friend ReadOnly Property TELEFONOColumn As DataColumn
            Get
                Return Me.columnTELEFONO
            End Get
        End Property
        
        Friend ReadOnly Property MAILColumn As DataColumn
            Get
                Return Me.columnMAIL
            End Get
        End Property
        
        Friend ReadOnly Property DSIColumn As DataColumn
            Get
                Return Me.columnDSI
            End Get
        End Property
        
        Friend ReadOnly Property MATAUTOColumn As DataColumn
            Get
                Return Me.columnMATAUTO
            End Get
        End Property
        
        Friend ReadOnly Property TIPOColumn As DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        Friend ReadOnly Property DATAVENDITAColumn As DataColumn
            Get
                Return Me.columnDATAVENDITA
            End Get
        End Property
        
        Friend ReadOnly Property DATARESOColumn As DataColumn
            Get
                Return Me.columnDATARESO
            End Get
        End Property
        
        Friend ReadOnly Property ATTIVAColumn As DataColumn
            Get
                Return Me.columnATTIVA
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AutoParchimetri_AnagraficheRow
            Get
                Return CType(Me.Rows(index),AutoParchimetri_AnagraficheRow)
            End Get
        End Property
        
        Public Event AutoParchimetri_AnagraficheRowChanged As AutoParchimetri_AnagraficheRowChangeEventHandler
        
        Public Event AutoParchimetri_AnagraficheRowChanging As AutoParchimetri_AnagraficheRowChangeEventHandler
        
        Public Event AutoParchimetri_AnagraficheRowDeleted As AutoParchimetri_AnagraficheRowChangeEventHandler
        
        Public Event AutoParchimetri_AnagraficheRowDeleting As AutoParchimetri_AnagraficheRowChangeEventHandler
        
        Public Overloads Sub AddAutoParchimetri_AnagraficheRow(ByVal row As AutoParchimetri_AnagraficheRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAutoParchimetri_AnagraficheRow( _
                    ByVal ID As String,  _
                    ByVal NUMERATORE As Integer,  _
                    ByVal DATA_INSERIMENTO As Date,  _
                    ByVal MATRICOLA As String,  _
                    ByVal COGNOME As String,  _
                    ByVal NOME As String,  _
                    ByVal VIA As String,  _
                    ByVal NUMEROVIA As String,  _
                    ByVal CITTA As String,  _
                    ByVal CAP As String,  _
                    ByVal TELEFONO As String,  _
                    ByVal MAIL As String,  _
                    ByVal DSI As Integer,  _
                    ByVal MATAUTO As String,  _
                    ByVal TIPO As String,  _
                    ByVal DATAVENDITA As Date,  _
                    ByVal DATARESO As Date,  _
                    ByVal ATTIVA As Boolean) As AutoParchimetri_AnagraficheRow
            Dim rowAutoParchimetri_AnagraficheRow As AutoParchimetri_AnagraficheRow = CType(Me.NewRow,AutoParchimetri_AnagraficheRow)
            rowAutoParchimetri_AnagraficheRow.ItemArray = New Object() {ID, NUMERATORE, DATA_INSERIMENTO, MATRICOLA, COGNOME, NOME, VIA, NUMEROVIA, CITTA, CAP, TELEFONO, MAIL, DSI, MATAUTO, TIPO, DATAVENDITA, DATARESO, ATTIVA}
            Me.Rows.Add(rowAutoParchimetri_AnagraficheRow)
            Return rowAutoParchimetri_AnagraficheRow
        End Function
        
        Public Function FindByID(ByVal ID As String) As AutoParchimetri_AnagraficheRow
            Return CType(Me.Rows.Find(New Object() {ID}),AutoParchimetri_AnagraficheRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AutoParchimetri_AnagraficheDataTable = CType(MyBase.Clone,AutoParchimetri_AnagraficheDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AutoParchimetri_AnagraficheDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnNUMERATORE = Me.Columns("NUMERATORE")
            Me.columnDATA_INSERIMENTO = Me.Columns("DATA_INSERIMENTO")
            Me.columnMATRICOLA = Me.Columns("MATRICOLA")
            Me.columnCOGNOME = Me.Columns("COGNOME")
            Me.columnNOME = Me.Columns("NOME")
            Me.columnVIA = Me.Columns("VIA")
            Me.columnNUMEROVIA = Me.Columns("NUMEROVIA")
            Me.columnCITTA = Me.Columns("CITTA")
            Me.columnCAP = Me.Columns("CAP")
            Me.columnTELEFONO = Me.Columns("TELEFONO")
            Me.columnMAIL = Me.Columns("MAIL")
            Me.columnDSI = Me.Columns("DSI")
            Me.columnMATAUTO = Me.Columns("MATAUTO")
            Me.columnTIPO = Me.Columns("TIPO")
            Me.columnDATAVENDITA = Me.Columns("DATAVENDITA")
            Me.columnDATARESO = Me.Columns("DATARESO")
            Me.columnATTIVA = Me.Columns("ATTIVA")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnNUMERATORE = New DataColumn("NUMERATORE", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNUMERATORE)
            Me.columnDATA_INSERIMENTO = New DataColumn("DATA_INSERIMENTO", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATA_INSERIMENTO)
            Me.columnMATRICOLA = New DataColumn("MATRICOLA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMATRICOLA)
            Me.columnCOGNOME = New DataColumn("COGNOME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOGNOME)
            Me.columnNOME = New DataColumn("NOME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOME)
            Me.columnVIA = New DataColumn("VIA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVIA)
            Me.columnNUMEROVIA = New DataColumn("NUMEROVIA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNUMEROVIA)
            Me.columnCITTA = New DataColumn("CITTA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCITTA)
            Me.columnCAP = New DataColumn("CAP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCAP)
            Me.columnTELEFONO = New DataColumn("TELEFONO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTELEFONO)
            Me.columnMAIL = New DataColumn("MAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAIL)
            Me.columnDSI = New DataColumn("DSI", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDSI)
            Me.columnMATAUTO = New DataColumn("MATAUTO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMATAUTO)
            Me.columnTIPO = New DataColumn("TIPO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTIPO)
            Me.columnDATAVENDITA = New DataColumn("DATAVENDITA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATAVENDITA)
            Me.columnDATARESO = New DataColumn("DATARESO", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATARESO)
            Me.columnATTIVA = New DataColumn("ATTIVA", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnATTIVA)
            Me.Constraints.Add(New UniqueConstraint("dsBiglietterieKey1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnNUMERATORE.AllowDBNull = false
        End Sub
        
        Public Function NewAutoParchimetri_AnagraficheRow() As AutoParchimetri_AnagraficheRow
            Return CType(Me.NewRow,AutoParchimetri_AnagraficheRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AutoParchimetri_AnagraficheRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AutoParchimetri_AnagraficheRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AutoParchimetri_AnagraficheRowChangedEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_AnagraficheRowChanged(Me, New AutoParchimetri_AnagraficheRowChangeEvent(CType(e.Row,AutoParchimetri_AnagraficheRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AutoParchimetri_AnagraficheRowChangingEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_AnagraficheRowChanging(Me, New AutoParchimetri_AnagraficheRowChangeEvent(CType(e.Row,AutoParchimetri_AnagraficheRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AutoParchimetri_AnagraficheRowDeletedEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_AnagraficheRowDeleted(Me, New AutoParchimetri_AnagraficheRowChangeEvent(CType(e.Row,AutoParchimetri_AnagraficheRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AutoParchimetri_AnagraficheRowDeletingEvent) Is Nothing) Then
                RaiseEvent AutoParchimetri_AnagraficheRowDeleting(Me, New AutoParchimetri_AnagraficheRowChangeEvent(CType(e.Row,AutoParchimetri_AnagraficheRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAutoParchimetri_AnagraficheRow(ByVal row As AutoParchimetri_AnagraficheRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetri_AnagraficheRow
        Inherits DataRow
        
        Private tableAutoParchimetri_Anagrafiche As AutoParchimetri_AnagraficheDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAutoParchimetri_Anagrafiche = CType(Me.Table,AutoParchimetri_AnagraficheDataTable)
        End Sub
        
        Public Property ID As String
            Get
                Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.IDColumn),String)
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.IDColumn) = value
            End Set
        End Property
        
        Public Property NUMERATORE As Integer
            Get
                Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.NUMERATOREColumn),Integer)
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.NUMERATOREColumn) = value
            End Set
        End Property
        
        Public Property DATA_INSERIMENTO As Date
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.DATA_INSERIMENTOColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.DATA_INSERIMENTOColumn) = value
            End Set
        End Property
        
        Public Property MATRICOLA As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.MATRICOLAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.MATRICOLAColumn) = value
            End Set
        End Property
        
        Public Property COGNOME As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.COGNOMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.COGNOMEColumn) = value
            End Set
        End Property
        
        Public Property NOME As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.NOMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.NOMEColumn) = value
            End Set
        End Property
        
        Public Property VIA As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.VIAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.VIAColumn) = value
            End Set
        End Property
        
        Public Property NUMEROVIA As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.NUMEROVIAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.NUMEROVIAColumn) = value
            End Set
        End Property
        
        Public Property CITTA As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.CITTAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.CITTAColumn) = value
            End Set
        End Property
        
        Public Property CAP As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.CAPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.CAPColumn) = value
            End Set
        End Property
        
        Public Property TELEFONO As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.TELEFONOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.TELEFONOColumn) = value
            End Set
        End Property
        
        Public Property MAIL As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.MAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.MAILColumn) = value
            End Set
        End Property
        
        Public Property DSI As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.DSIColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.DSIColumn) = value
            End Set
        End Property
        
        Public Property MATAUTO As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.MATAUTOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.MATAUTOColumn) = value
            End Set
        End Property
        
        Public Property TIPO As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.TIPOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.TIPOColumn) = value
            End Set
        End Property
        
        Public Property DATAVENDITA As Date
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.DATAVENDITAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.DATAVENDITAColumn) = value
            End Set
        End Property
        
        Public Property DATARESO As Date
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.DATARESOColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.DATARESOColumn) = value
            End Set
        End Property
        
        Public Property ATTIVA As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAutoParchimetri_Anagrafiche.ATTIVAColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoParchimetri_Anagrafiche.ATTIVAColumn) = value
            End Set
        End Property
        
        Public Function IsDATA_INSERIMENTONull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.DATA_INSERIMENTOColumn)
        End Function
        
        Public Sub SetDATA_INSERIMENTONull()
            Me(Me.tableAutoParchimetri_Anagrafiche.DATA_INSERIMENTOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMATRICOLANull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.MATRICOLAColumn)
        End Function
        
        Public Sub SetMATRICOLANull()
            Me(Me.tableAutoParchimetri_Anagrafiche.MATRICOLAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOGNOMENull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.COGNOMEColumn)
        End Function
        
        Public Sub SetCOGNOMENull()
            Me(Me.tableAutoParchimetri_Anagrafiche.COGNOMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNOMENull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.NOMEColumn)
        End Function
        
        Public Sub SetNOMENull()
            Me(Me.tableAutoParchimetri_Anagrafiche.NOMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVIANull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.VIAColumn)
        End Function
        
        Public Sub SetVIANull()
            Me(Me.tableAutoParchimetri_Anagrafiche.VIAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNUMEROVIANull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.NUMEROVIAColumn)
        End Function
        
        Public Sub SetNUMEROVIANull()
            Me(Me.tableAutoParchimetri_Anagrafiche.NUMEROVIAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCITTANull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.CITTAColumn)
        End Function
        
        Public Sub SetCITTANull()
            Me(Me.tableAutoParchimetri_Anagrafiche.CITTAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCAPNull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.CAPColumn)
        End Function
        
        Public Sub SetCAPNull()
            Me(Me.tableAutoParchimetri_Anagrafiche.CAPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTELEFONONull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.TELEFONOColumn)
        End Function
        
        Public Sub SetTELEFONONull()
            Me(Me.tableAutoParchimetri_Anagrafiche.TELEFONOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMAILNull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.MAILColumn)
        End Function
        
        Public Sub SetMAILNull()
            Me(Me.tableAutoParchimetri_Anagrafiche.MAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDSINull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.DSIColumn)
        End Function
        
        Public Sub SetDSINull()
            Me(Me.tableAutoParchimetri_Anagrafiche.DSIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMATAUTONull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.MATAUTOColumn)
        End Function
        
        Public Sub SetMATAUTONull()
            Me(Me.tableAutoParchimetri_Anagrafiche.MATAUTOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTIPONull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.TIPOColumn)
        End Function
        
        Public Sub SetTIPONull()
            Me(Me.tableAutoParchimetri_Anagrafiche.TIPOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDATAVENDITANull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.DATAVENDITAColumn)
        End Function
        
        Public Sub SetDATAVENDITANull()
            Me(Me.tableAutoParchimetri_Anagrafiche.DATAVENDITAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDATARESONull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.DATARESOColumn)
        End Function
        
        Public Sub SetDATARESONull()
            Me(Me.tableAutoParchimetri_Anagrafiche.DATARESOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsATTIVANull() As Boolean
            Return Me.IsNull(Me.tableAutoParchimetri_Anagrafiche.ATTIVAColumn)
        End Function
        
        Public Sub SetATTIVANull()
            Me(Me.tableAutoParchimetri_Anagrafiche.ATTIVAColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoParchimetri_AnagraficheRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AutoParchimetri_AnagraficheRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AutoParchimetri_AnagraficheRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AutoParchimetri_AnagraficheRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
