'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2503
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsRiposiTutti
    Inherits DataSet
    
    Private tableRiposi As RiposiDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Riposi")) Is Nothing) Then
                Me.Tables.Add(New RiposiDataTable(ds.Tables("Riposi")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Riposi As RiposiDataTable
        Get
            Return Me.tableRiposi
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsRiposiTutti = CType(MyBase.Clone,DsRiposiTutti)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Riposi")) Is Nothing) Then
            Me.Tables.Add(New RiposiDataTable(ds.Tables("Riposi")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableRiposi = CType(Me.Tables("Riposi"),RiposiDataTable)
        If (Not (Me.tableRiposi) Is Nothing) Then
            Me.tableRiposi.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsRiposiTutti"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsRiposiTutti.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableRiposi = New RiposiDataTable
        Me.Tables.Add(Me.tableRiposi)
    End Sub
    
    Private Function ShouldSerializeRiposi() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub RiposiRowChangeEventHandler(ByVal sender As Object, ByVal e As RiposiRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RiposiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnTTMATR As DataColumn
        
        Private columnTTGGGG As DataColumn
        
        Private columnTTMMGG As DataColumn
        
        Private columnTTAAGG As DataColumn
        
        Private columnTTCTUR As DataColumn
        
        Private columnDataRiposo As DataColumn
        
        Friend Sub New()
            MyBase.New("Riposi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property TTMATRColumn As DataColumn
            Get
                Return Me.columnTTMATR
            End Get
        End Property
        
        Friend ReadOnly Property TTGGGGColumn As DataColumn
            Get
                Return Me.columnTTGGGG
            End Get
        End Property
        
        Friend ReadOnly Property TTMMGGColumn As DataColumn
            Get
                Return Me.columnTTMMGG
            End Get
        End Property
        
        Friend ReadOnly Property TTAAGGColumn As DataColumn
            Get
                Return Me.columnTTAAGG
            End Get
        End Property
        
        Friend ReadOnly Property TTCTURColumn As DataColumn
            Get
                Return Me.columnTTCTUR
            End Get
        End Property
        
        Friend ReadOnly Property DataRiposoColumn As DataColumn
            Get
                Return Me.columnDataRiposo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RiposiRow
            Get
                Return CType(Me.Rows(index),RiposiRow)
            End Get
        End Property
        
        Public Event RiposiRowChanged As RiposiRowChangeEventHandler
        
        Public Event RiposiRowChanging As RiposiRowChangeEventHandler
        
        Public Event RiposiRowDeleted As RiposiRowChangeEventHandler
        
        Public Event RiposiRowDeleting As RiposiRowChangeEventHandler
        
        Public Overloads Sub AddRiposiRow(ByVal row As RiposiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRiposiRow(ByVal TTMATR As String, ByVal TTGGGG As String, ByVal TTMMGG As String, ByVal TTAAGG As String, ByVal TTCTUR As String, ByVal DataRiposo As String) As RiposiRow
            Dim rowRiposiRow As RiposiRow = CType(Me.NewRow,RiposiRow)
            rowRiposiRow.ItemArray = New Object() {Nothing, TTMATR, TTGGGG, TTMMGG, TTAAGG, TTCTUR, DataRiposo}
            Me.Rows.Add(rowRiposiRow)
            Return rowRiposiRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As RiposiRow
            Return CType(Me.Rows.Find(New Object() {ID}),RiposiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RiposiDataTable = CType(MyBase.Clone,RiposiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RiposiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnTTMATR = Me.Columns("TTMATR")
            Me.columnTTGGGG = Me.Columns("TTGGGG")
            Me.columnTTMMGG = Me.Columns("TTMMGG")
            Me.columnTTAAGG = Me.Columns("TTAAGG")
            Me.columnTTCTUR = Me.Columns("TTCTUR")
            Me.columnDataRiposo = Me.Columns("DataRiposo")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnTTMATR = New DataColumn("TTMATR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTMATR)
            Me.columnTTGGGG = New DataColumn("TTGGGG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTGGGG)
            Me.columnTTMMGG = New DataColumn("TTMMGG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTMMGG)
            Me.columnTTAAGG = New DataColumn("TTAAGG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTAAGG)
            Me.columnTTCTUR = New DataColumn("TTCTUR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTCTUR)
            Me.columnDataRiposo = New DataColumn("DataRiposo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataRiposo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        Public Function NewRiposiRow() As RiposiRow
            Return CType(Me.NewRow,RiposiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RiposiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RiposiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RiposiRowChangedEvent) Is Nothing) Then
                RaiseEvent RiposiRowChanged(Me, New RiposiRowChangeEvent(CType(e.Row,RiposiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RiposiRowChangingEvent) Is Nothing) Then
                RaiseEvent RiposiRowChanging(Me, New RiposiRowChangeEvent(CType(e.Row,RiposiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RiposiRowDeletedEvent) Is Nothing) Then
                RaiseEvent RiposiRowDeleted(Me, New RiposiRowChangeEvent(CType(e.Row,RiposiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RiposiRowDeletingEvent) Is Nothing) Then
                RaiseEvent RiposiRowDeleting(Me, New RiposiRowChangeEvent(CType(e.Row,RiposiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRiposiRow(ByVal row As RiposiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RiposiRow
        Inherits DataRow
        
        Private tableRiposi As RiposiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRiposi = CType(Me.Table,RiposiDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableRiposi.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableRiposi.IDColumn) = value
            End Set
        End Property
        
        Public Property TTMATR As String
            Get
                Try 
                    Return CType(Me(Me.tableRiposi.TTMATRColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRiposi.TTMATRColumn) = value
            End Set
        End Property
        
        Public Property TTGGGG As String
            Get
                Try 
                    Return CType(Me(Me.tableRiposi.TTGGGGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRiposi.TTGGGGColumn) = value
            End Set
        End Property
        
        Public Property TTMMGG As String
            Get
                Try 
                    Return CType(Me(Me.tableRiposi.TTMMGGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRiposi.TTMMGGColumn) = value
            End Set
        End Property
        
        Public Property TTAAGG As String
            Get
                Try 
                    Return CType(Me(Me.tableRiposi.TTAAGGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRiposi.TTAAGGColumn) = value
            End Set
        End Property
        
        Public Property TTCTUR As String
            Get
                Try 
                    Return CType(Me(Me.tableRiposi.TTCTURColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRiposi.TTCTURColumn) = value
            End Set
        End Property
        
        Public Property DataRiposo As String
            Get
                Try 
                    Return CType(Me(Me.tableRiposi.DataRiposoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRiposi.DataRiposoColumn) = value
            End Set
        End Property
        
        Public Function IsTTMATRNull() As Boolean
            Return Me.IsNull(Me.tableRiposi.TTMATRColumn)
        End Function
        
        Public Sub SetTTMATRNull()
            Me(Me.tableRiposi.TTMATRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTGGGGNull() As Boolean
            Return Me.IsNull(Me.tableRiposi.TTGGGGColumn)
        End Function
        
        Public Sub SetTTGGGGNull()
            Me(Me.tableRiposi.TTGGGGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTMMGGNull() As Boolean
            Return Me.IsNull(Me.tableRiposi.TTMMGGColumn)
        End Function
        
        Public Sub SetTTMMGGNull()
            Me(Me.tableRiposi.TTMMGGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTAAGGNull() As Boolean
            Return Me.IsNull(Me.tableRiposi.TTAAGGColumn)
        End Function
        
        Public Sub SetTTAAGGNull()
            Me(Me.tableRiposi.TTAAGGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTCTURNull() As Boolean
            Return Me.IsNull(Me.tableRiposi.TTCTURColumn)
        End Function
        
        Public Sub SetTTCTURNull()
            Me(Me.tableRiposi.TTCTURColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataRiposoNull() As Boolean
            Return Me.IsNull(Me.tableRiposi.DataRiposoColumn)
        End Function
        
        Public Sub SetDataRiposoNull()
            Me(Me.tableRiposi.DataRiposoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RiposiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RiposiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RiposiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RiposiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
