'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2503
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsVestizione
    Inherits DataSet
    
    Private tableAccertatori As AccertatoriDataTable
    
    Private tableTurni As TurniDataTable
    
    Private tableGiustificativi As GiustificativiDataTable
    
    Private tableAccertatoriTurno As AccertatoriTurnoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Accertatori")) Is Nothing) Then
                Me.Tables.Add(New AccertatoriDataTable(ds.Tables("Accertatori")))
            End If
            If (Not (ds.Tables("Turni")) Is Nothing) Then
                Me.Tables.Add(New TurniDataTable(ds.Tables("Turni")))
            End If
            If (Not (ds.Tables("Giustificativi")) Is Nothing) Then
                Me.Tables.Add(New GiustificativiDataTable(ds.Tables("Giustificativi")))
            End If
            If (Not (ds.Tables("AccertatoriTurno")) Is Nothing) Then
                Me.Tables.Add(New AccertatoriTurnoDataTable(ds.Tables("AccertatoriTurno")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accertatori As AccertatoriDataTable
        Get
            Return Me.tableAccertatori
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Turni As TurniDataTable
        Get
            Return Me.tableTurni
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Giustificativi As GiustificativiDataTable
        Get
            Return Me.tableGiustificativi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AccertatoriTurno As AccertatoriTurnoDataTable
        Get
            Return Me.tableAccertatoriTurno
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsVestizione = CType(MyBase.Clone,dsVestizione)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Accertatori")) Is Nothing) Then
            Me.Tables.Add(New AccertatoriDataTable(ds.Tables("Accertatori")))
        End If
        If (Not (ds.Tables("Turni")) Is Nothing) Then
            Me.Tables.Add(New TurniDataTable(ds.Tables("Turni")))
        End If
        If (Not (ds.Tables("Giustificativi")) Is Nothing) Then
            Me.Tables.Add(New GiustificativiDataTable(ds.Tables("Giustificativi")))
        End If
        If (Not (ds.Tables("AccertatoriTurno")) Is Nothing) Then
            Me.Tables.Add(New AccertatoriTurnoDataTable(ds.Tables("AccertatoriTurno")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAccertatori = CType(Me.Tables("Accertatori"),AccertatoriDataTable)
        If (Not (Me.tableAccertatori) Is Nothing) Then
            Me.tableAccertatori.InitVars
        End If
        Me.tableTurni = CType(Me.Tables("Turni"),TurniDataTable)
        If (Not (Me.tableTurni) Is Nothing) Then
            Me.tableTurni.InitVars
        End If
        Me.tableGiustificativi = CType(Me.Tables("Giustificativi"),GiustificativiDataTable)
        If (Not (Me.tableGiustificativi) Is Nothing) Then
            Me.tableGiustificativi.InitVars
        End If
        Me.tableAccertatoriTurno = CType(Me.Tables("AccertatoriTurno"),AccertatoriTurnoDataTable)
        If (Not (Me.tableAccertatoriTurno) Is Nothing) Then
            Me.tableAccertatoriTurno.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsVestizione"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsVestizione.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAccertatori = New AccertatoriDataTable
        Me.Tables.Add(Me.tableAccertatori)
        Me.tableTurni = New TurniDataTable
        Me.Tables.Add(Me.tableTurni)
        Me.tableGiustificativi = New GiustificativiDataTable
        Me.Tables.Add(Me.tableGiustificativi)
        Me.tableAccertatoriTurno = New AccertatoriTurnoDataTable
        Me.Tables.Add(Me.tableAccertatoriTurno)
    End Sub
    
    Private Function ShouldSerializeAccertatori() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTurni() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGiustificativi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccertatoriTurno() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub AccertatoriRowChangeEventHandler(ByVal sender As Object, ByVal e As AccertatoriRowChangeEvent)
    
    Public Delegate Sub TurniRowChangeEventHandler(ByVal sender As Object, ByVal e As TurniRowChangeEvent)
    
    Public Delegate Sub GiustificativiRowChangeEventHandler(ByVal sender As Object, ByVal e As GiustificativiRowChangeEvent)
    
    Public Delegate Sub AccertatoriTurnoRowChangeEventHandler(ByVal sender As Object, ByVal e As AccertatoriTurnoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccertatoriDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMatricola As DataColumn
        
        Private columnData As DataColumn
        
        Private columnTurno As DataColumn
        
        Private columnFlagAssenza As DataColumn
        
        Private columnCognomeNome As DataColumn
        
        Private columnCodiceGiustificativo As DataColumn
        
        Private columnOraInizioGiustificativo As DataColumn
        
        Private columnOraFineGiustificativo As DataColumn
        
        Private columnTipoAssenza As DataColumn
        
        Private columnCodiceGruppo As DataColumn
        
        Private columnGruppo As DataColumn
        
        Friend Sub New()
            MyBase.New("Accertatori")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MatricolaColumn As DataColumn
            Get
                Return Me.columnMatricola
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property TurnoColumn As DataColumn
            Get
                Return Me.columnTurno
            End Get
        End Property
        
        Friend ReadOnly Property FlagAssenzaColumn As DataColumn
            Get
                Return Me.columnFlagAssenza
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeColumn As DataColumn
            Get
                Return Me.columnCognomeNome
            End Get
        End Property
        
        Friend ReadOnly Property CodiceGiustificativoColumn As DataColumn
            Get
                Return Me.columnCodiceGiustificativo
            End Get
        End Property
        
        Friend ReadOnly Property OraInizioGiustificativoColumn As DataColumn
            Get
                Return Me.columnOraInizioGiustificativo
            End Get
        End Property
        
        Friend ReadOnly Property OraFineGiustificativoColumn As DataColumn
            Get
                Return Me.columnOraFineGiustificativo
            End Get
        End Property
        
        Friend ReadOnly Property TipoAssenzaColumn As DataColumn
            Get
                Return Me.columnTipoAssenza
            End Get
        End Property
        
        Friend ReadOnly Property CodiceGruppoColumn As DataColumn
            Get
                Return Me.columnCodiceGruppo
            End Get
        End Property
        
        Friend ReadOnly Property GruppoColumn As DataColumn
            Get
                Return Me.columnGruppo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AccertatoriRow
            Get
                Return CType(Me.Rows(index),AccertatoriRow)
            End Get
        End Property
        
        Public Event AccertatoriRowChanged As AccertatoriRowChangeEventHandler
        
        Public Event AccertatoriRowChanging As AccertatoriRowChangeEventHandler
        
        Public Event AccertatoriRowDeleted As AccertatoriRowChangeEventHandler
        
        Public Event AccertatoriRowDeleting As AccertatoriRowChangeEventHandler
        
        Public Overloads Sub AddAccertatoriRow(ByVal row As AccertatoriRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatoriRow(ByVal Matricola As Decimal, ByVal Data As Date, ByVal Turno As Decimal, ByVal FlagAssenza As Boolean, ByVal CognomeNome As String, ByVal CodiceGiustificativo As String, ByVal OraInizioGiustificativo As Decimal, ByVal OraFineGiustificativo As Decimal, ByVal TipoAssenza As String, ByVal CodiceGruppo As String, ByVal Gruppo As String) As AccertatoriRow
            Dim rowAccertatoriRow As AccertatoriRow = CType(Me.NewRow,AccertatoriRow)
            rowAccertatoriRow.ItemArray = New Object() {Matricola, Data, Turno, FlagAssenza, CognomeNome, CodiceGiustificativo, OraInizioGiustificativo, OraFineGiustificativo, TipoAssenza, CodiceGruppo, Gruppo}
            Me.Rows.Add(rowAccertatoriRow)
            Return rowAccertatoriRow
        End Function
        
        Public Function FindByMatricola(ByVal Matricola As Decimal) As AccertatoriRow
            Return CType(Me.Rows.Find(New Object() {Matricola}),AccertatoriRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AccertatoriDataTable = CType(MyBase.Clone,AccertatoriDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AccertatoriDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMatricola = Me.Columns("Matricola")
            Me.columnData = Me.Columns("Data")
            Me.columnTurno = Me.Columns("Turno")
            Me.columnFlagAssenza = Me.Columns("FlagAssenza")
            Me.columnCognomeNome = Me.Columns("CognomeNome")
            Me.columnCodiceGiustificativo = Me.Columns("CodiceGiustificativo")
            Me.columnOraInizioGiustificativo = Me.Columns("OraInizioGiustificativo")
            Me.columnOraFineGiustificativo = Me.Columns("OraFineGiustificativo")
            Me.columnTipoAssenza = Me.Columns("TipoAssenza")
            Me.columnCodiceGruppo = Me.Columns("CodiceGruppo")
            Me.columnGruppo = Me.Columns("Gruppo")
        End Sub
        
        Private Sub InitClass()
            Me.columnMatricola = New DataColumn("Matricola", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMatricola)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnTurno = New DataColumn("Turno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurno)
            Me.columnFlagAssenza = New DataColumn("FlagAssenza", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlagAssenza)
            Me.columnCognomeNome = New DataColumn("CognomeNome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNome)
            Me.columnCodiceGiustificativo = New DataColumn("CodiceGiustificativo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodiceGiustificativo)
            Me.columnOraInizioGiustificativo = New DataColumn("OraInizioGiustificativo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraInizioGiustificativo)
            Me.columnOraFineGiustificativo = New DataColumn("OraFineGiustificativo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraFineGiustificativo)
            Me.columnTipoAssenza = New DataColumn("TipoAssenza", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoAssenza)
            Me.columnCodiceGruppo = New DataColumn("CodiceGruppo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodiceGruppo)
            Me.columnGruppo = New DataColumn("Gruppo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGruppo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnMatricola}, true))
            Me.columnMatricola.AllowDBNull = false
            Me.columnMatricola.Unique = true
            Me.columnData.AllowDBNull = false
        End Sub
        
        Public Function NewAccertatoriRow() As AccertatoriRow
            Return CType(Me.NewRow,AccertatoriRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AccertatoriRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AccertatoriRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AccertatoriRowChangedEvent) Is Nothing) Then
                RaiseEvent AccertatoriRowChanged(Me, New AccertatoriRowChangeEvent(CType(e.Row,AccertatoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AccertatoriRowChangingEvent) Is Nothing) Then
                RaiseEvent AccertatoriRowChanging(Me, New AccertatoriRowChangeEvent(CType(e.Row,AccertatoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AccertatoriRowDeletedEvent) Is Nothing) Then
                RaiseEvent AccertatoriRowDeleted(Me, New AccertatoriRowChangeEvent(CType(e.Row,AccertatoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AccertatoriRowDeletingEvent) Is Nothing) Then
                RaiseEvent AccertatoriRowDeleting(Me, New AccertatoriRowChangeEvent(CType(e.Row,AccertatoriRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatoriRow(ByVal row As AccertatoriRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccertatoriRow
        Inherits DataRow
        
        Private tableAccertatori As AccertatoriDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatori = CType(Me.Table,AccertatoriDataTable)
        End Sub
        
        Public Property Matricola As Decimal
            Get
                Return CType(Me(Me.tableAccertatori.MatricolaColumn),Decimal)
            End Get
            Set
                Me(Me.tableAccertatori.MatricolaColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Return CType(Me(Me.tableAccertatori.DataColumn),Date)
            End Get
            Set
                Me(Me.tableAccertatori.DataColumn) = value
            End Set
        End Property
        
        Public Property Turno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori.TurnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori.TurnoColumn) = value
            End Set
        End Property
        
        Public Property FlagAssenza As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori.FlagAssenzaColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori.FlagAssenzaColumn) = value
            End Set
        End Property
        
        Public Property CognomeNome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori.CognomeNomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori.CognomeNomeColumn) = value
            End Set
        End Property
        
        Public Property CodiceGiustificativo As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori.CodiceGiustificativoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori.CodiceGiustificativoColumn) = value
            End Set
        End Property
        
        Public Property OraInizioGiustificativo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori.OraInizioGiustificativoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori.OraInizioGiustificativoColumn) = value
            End Set
        End Property
        
        Public Property OraFineGiustificativo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori.OraFineGiustificativoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori.OraFineGiustificativoColumn) = value
            End Set
        End Property
        
        Public Property TipoAssenza As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori.TipoAssenzaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori.TipoAssenzaColumn) = value
            End Set
        End Property
        
        Public Property CodiceGruppo As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori.CodiceGruppoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori.CodiceGruppoColumn) = value
            End Set
        End Property
        
        Public Property Gruppo As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori.GruppoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori.GruppoColumn) = value
            End Set
        End Property
        
        Public Function IsTurnoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori.TurnoColumn)
        End Function
        
        Public Sub SetTurnoNull()
            Me(Me.tableAccertatori.TurnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlagAssenzaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori.FlagAssenzaColumn)
        End Function
        
        Public Sub SetFlagAssenzaNull()
            Me(Me.tableAccertatori.FlagAssenzaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori.CognomeNomeColumn)
        End Function
        
        Public Sub SetCognomeNomeNull()
            Me(Me.tableAccertatori.CognomeNomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodiceGiustificativoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori.CodiceGiustificativoColumn)
        End Function
        
        Public Sub SetCodiceGiustificativoNull()
            Me(Me.tableAccertatori.CodiceGiustificativoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraInizioGiustificativoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori.OraInizioGiustificativoColumn)
        End Function
        
        Public Sub SetOraInizioGiustificativoNull()
            Me(Me.tableAccertatori.OraInizioGiustificativoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraFineGiustificativoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori.OraFineGiustificativoColumn)
        End Function
        
        Public Sub SetOraFineGiustificativoNull()
            Me(Me.tableAccertatori.OraFineGiustificativoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoAssenzaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori.TipoAssenzaColumn)
        End Function
        
        Public Sub SetTipoAssenzaNull()
            Me(Me.tableAccertatori.TipoAssenzaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodiceGruppoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori.CodiceGruppoColumn)
        End Function
        
        Public Sub SetCodiceGruppoNull()
            Me(Me.tableAccertatori.CodiceGruppoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGruppoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori.GruppoColumn)
        End Function
        
        Public Sub SetGruppoNull()
            Me(Me.tableAccertatori.GruppoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccertatoriRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AccertatoriRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AccertatoriRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AccertatoriRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TurniDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTurno As DataColumn
        
        Private columnData As DataColumn
        
        Private columnCodiceTipologia As DataColumn
        
        Private columnTipologiaTurno As DataColumn
        
        Private columnPercorso As DataColumn
        
        Private columnDescrizionePercorso As DataColumn
        
        Private columnOrdineAssegnamento As DataColumn
        
        Private columnNota As DataColumn
        
        Friend Sub New()
            MyBase.New("Turni")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TurnoColumn As DataColumn
            Get
                Return Me.columnTurno
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property CodiceTipologiaColumn As DataColumn
            Get
                Return Me.columnCodiceTipologia
            End Get
        End Property
        
        Friend ReadOnly Property TipologiaTurnoColumn As DataColumn
            Get
                Return Me.columnTipologiaTurno
            End Get
        End Property
        
        Friend ReadOnly Property PercorsoColumn As DataColumn
            Get
                Return Me.columnPercorso
            End Get
        End Property
        
        Friend ReadOnly Property DescrizionePercorsoColumn As DataColumn
            Get
                Return Me.columnDescrizionePercorso
            End Get
        End Property
        
        Friend ReadOnly Property OrdineAssegnamentoColumn As DataColumn
            Get
                Return Me.columnOrdineAssegnamento
            End Get
        End Property
        
        Friend ReadOnly Property NotaColumn As DataColumn
            Get
                Return Me.columnNota
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TurniRow
            Get
                Return CType(Me.Rows(index),TurniRow)
            End Get
        End Property
        
        Public Event TurniRowChanged As TurniRowChangeEventHandler
        
        Public Event TurniRowChanging As TurniRowChangeEventHandler
        
        Public Event TurniRowDeleted As TurniRowChangeEventHandler
        
        Public Event TurniRowDeleting As TurniRowChangeEventHandler
        
        Public Overloads Sub AddTurniRow(ByVal row As TurniRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTurniRow(ByVal Turno As Decimal, ByVal Data As Date, ByVal CodiceTipologia As String, ByVal TipologiaTurno As String, ByVal Percorso As String, ByVal DescrizionePercorso As String, ByVal OrdineAssegnamento As Decimal, ByVal Nota As String) As TurniRow
            Dim rowTurniRow As TurniRow = CType(Me.NewRow,TurniRow)
            rowTurniRow.ItemArray = New Object() {Turno, Data, CodiceTipologia, TipologiaTurno, Percorso, DescrizionePercorso, OrdineAssegnamento, Nota}
            Me.Rows.Add(rowTurniRow)
            Return rowTurniRow
        End Function
        
        Public Function FindByTurno(ByVal Turno As Decimal) As TurniRow
            Return CType(Me.Rows.Find(New Object() {Turno}),TurniRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TurniDataTable = CType(MyBase.Clone,TurniDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TurniDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTurno = Me.Columns("Turno")
            Me.columnData = Me.Columns("Data")
            Me.columnCodiceTipologia = Me.Columns("CodiceTipologia")
            Me.columnTipologiaTurno = Me.Columns("TipologiaTurno")
            Me.columnPercorso = Me.Columns("Percorso")
            Me.columnDescrizionePercorso = Me.Columns("DescrizionePercorso")
            Me.columnOrdineAssegnamento = Me.Columns("OrdineAssegnamento")
            Me.columnNota = Me.Columns("Nota")
        End Sub
        
        Private Sub InitClass()
            Me.columnTurno = New DataColumn("Turno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurno)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnCodiceTipologia = New DataColumn("CodiceTipologia", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodiceTipologia)
            Me.columnTipologiaTurno = New DataColumn("TipologiaTurno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipologiaTurno)
            Me.columnPercorso = New DataColumn("Percorso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPercorso)
            Me.columnDescrizionePercorso = New DataColumn("DescrizionePercorso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizionePercorso)
            Me.columnOrdineAssegnamento = New DataColumn("OrdineAssegnamento", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdineAssegnamento)
            Me.columnNota = New DataColumn("Nota", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNota)
            Me.Constraints.Add(New UniqueConstraint("dsVestizioneKey1", New DataColumn() {Me.columnTurno}, true))
            Me.columnTurno.AllowDBNull = false
            Me.columnTurno.Unique = true
        End Sub
        
        Public Function NewTurniRow() As TurniRow
            Return CType(Me.NewRow,TurniRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TurniRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TurniRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TurniRowChangedEvent) Is Nothing) Then
                RaiseEvent TurniRowChanged(Me, New TurniRowChangeEvent(CType(e.Row,TurniRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TurniRowChangingEvent) Is Nothing) Then
                RaiseEvent TurniRowChanging(Me, New TurniRowChangeEvent(CType(e.Row,TurniRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TurniRowDeletedEvent) Is Nothing) Then
                RaiseEvent TurniRowDeleted(Me, New TurniRowChangeEvent(CType(e.Row,TurniRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TurniRowDeletingEvent) Is Nothing) Then
                RaiseEvent TurniRowDeleting(Me, New TurniRowChangeEvent(CType(e.Row,TurniRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTurniRow(ByVal row As TurniRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TurniRow
        Inherits DataRow
        
        Private tableTurni As TurniDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTurni = CType(Me.Table,TurniDataTable)
        End Sub
        
        Public Property Turno As Decimal
            Get
                Return CType(Me(Me.tableTurni.TurnoColumn),Decimal)
            End Get
            Set
                Me(Me.tableTurni.TurnoColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableTurni.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurni.DataColumn) = value
            End Set
        End Property
        
        Public Property CodiceTipologia As String
            Get
                Try 
                    Return CType(Me(Me.tableTurni.CodiceTipologiaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurni.CodiceTipologiaColumn) = value
            End Set
        End Property
        
        Public Property TipologiaTurno As String
            Get
                Try 
                    Return CType(Me(Me.tableTurni.TipologiaTurnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurni.TipologiaTurnoColumn) = value
            End Set
        End Property
        
        Public Property Percorso As String
            Get
                Try 
                    Return CType(Me(Me.tableTurni.PercorsoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurni.PercorsoColumn) = value
            End Set
        End Property
        
        Public Property DescrizionePercorso As String
            Get
                Try 
                    Return CType(Me(Me.tableTurni.DescrizionePercorsoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurni.DescrizionePercorsoColumn) = value
            End Set
        End Property
        
        Public Property OrdineAssegnamento As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTurni.OrdineAssegnamentoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurni.OrdineAssegnamentoColumn) = value
            End Set
        End Property
        
        Public Property Nota As String
            Get
                Try 
                    Return CType(Me(Me.tableTurni.NotaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurni.NotaColumn) = value
            End Set
        End Property
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableTurni.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableTurni.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodiceTipologiaNull() As Boolean
            Return Me.IsNull(Me.tableTurni.CodiceTipologiaColumn)
        End Function
        
        Public Sub SetCodiceTipologiaNull()
            Me(Me.tableTurni.CodiceTipologiaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipologiaTurnoNull() As Boolean
            Return Me.IsNull(Me.tableTurni.TipologiaTurnoColumn)
        End Function
        
        Public Sub SetTipologiaTurnoNull()
            Me(Me.tableTurni.TipologiaTurnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPercorsoNull() As Boolean
            Return Me.IsNull(Me.tableTurni.PercorsoColumn)
        End Function
        
        Public Sub SetPercorsoNull()
            Me(Me.tableTurni.PercorsoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescrizionePercorsoNull() As Boolean
            Return Me.IsNull(Me.tableTurni.DescrizionePercorsoColumn)
        End Function
        
        Public Sub SetDescrizionePercorsoNull()
            Me(Me.tableTurni.DescrizionePercorsoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdineAssegnamentoNull() As Boolean
            Return Me.IsNull(Me.tableTurni.OrdineAssegnamentoColumn)
        End Function
        
        Public Sub SetOrdineAssegnamentoNull()
            Me(Me.tableTurni.OrdineAssegnamentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotaNull() As Boolean
            Return Me.IsNull(Me.tableTurni.NotaColumn)
        End Function
        
        Public Sub SetNotaNull()
            Me(Me.tableTurni.NotaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TurniRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TurniRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TurniRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TurniRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GiustificativiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMatricola As DataColumn
        
        Private columnData As DataColumn
        
        Private columnCodiceGiustificativo As DataColumn
        
        Private columnOraInizioGiustificativo As DataColumn
        
        Private columnOraFineGiustificativo As DataColumn
        
        Private columnTipoAssenza As DataColumn
        
        Friend Sub New()
            MyBase.New("Giustificativi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MatricolaColumn As DataColumn
            Get
                Return Me.columnMatricola
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property CodiceGiustificativoColumn As DataColumn
            Get
                Return Me.columnCodiceGiustificativo
            End Get
        End Property
        
        Friend ReadOnly Property OraInizioGiustificativoColumn As DataColumn
            Get
                Return Me.columnOraInizioGiustificativo
            End Get
        End Property
        
        Friend ReadOnly Property OraFineGiustificativoColumn As DataColumn
            Get
                Return Me.columnOraFineGiustificativo
            End Get
        End Property
        
        Friend ReadOnly Property TipoAssenzaColumn As DataColumn
            Get
                Return Me.columnTipoAssenza
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GiustificativiRow
            Get
                Return CType(Me.Rows(index),GiustificativiRow)
            End Get
        End Property
        
        Public Event GiustificativiRowChanged As GiustificativiRowChangeEventHandler
        
        Public Event GiustificativiRowChanging As GiustificativiRowChangeEventHandler
        
        Public Event GiustificativiRowDeleted As GiustificativiRowChangeEventHandler
        
        Public Event GiustificativiRowDeleting As GiustificativiRowChangeEventHandler
        
        Public Overloads Sub AddGiustificativiRow(ByVal row As GiustificativiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGiustificativiRow(ByVal Matricola As Decimal, ByVal Data As Date, ByVal CodiceGiustificativo As String, ByVal OraInizioGiustificativo As Decimal, ByVal OraFineGiustificativo As Decimal, ByVal TipoAssenza As String) As GiustificativiRow
            Dim rowGiustificativiRow As GiustificativiRow = CType(Me.NewRow,GiustificativiRow)
            rowGiustificativiRow.ItemArray = New Object() {Matricola, Data, CodiceGiustificativo, OraInizioGiustificativo, OraFineGiustificativo, TipoAssenza}
            Me.Rows.Add(rowGiustificativiRow)
            Return rowGiustificativiRow
        End Function
        
        Public Function FindByMatricolaDataCodiceGiustificativoOraInizioGiustificativo(ByVal Matricola As Decimal, ByVal Data As Date, ByVal CodiceGiustificativo As String, ByVal OraInizioGiustificativo As Decimal) As GiustificativiRow
            Return CType(Me.Rows.Find(New Object() {Matricola, Data, CodiceGiustificativo, OraInizioGiustificativo}),GiustificativiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GiustificativiDataTable = CType(MyBase.Clone,GiustificativiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GiustificativiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMatricola = Me.Columns("Matricola")
            Me.columnData = Me.Columns("Data")
            Me.columnCodiceGiustificativo = Me.Columns("CodiceGiustificativo")
            Me.columnOraInizioGiustificativo = Me.Columns("OraInizioGiustificativo")
            Me.columnOraFineGiustificativo = Me.Columns("OraFineGiustificativo")
            Me.columnTipoAssenza = Me.Columns("TipoAssenza")
        End Sub
        
        Private Sub InitClass()
            Me.columnMatricola = New DataColumn("Matricola", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMatricola)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnCodiceGiustificativo = New DataColumn("CodiceGiustificativo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodiceGiustificativo)
            Me.columnOraInizioGiustificativo = New DataColumn("OraInizioGiustificativo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraInizioGiustificativo)
            Me.columnOraFineGiustificativo = New DataColumn("OraFineGiustificativo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraFineGiustificativo)
            Me.columnTipoAssenza = New DataColumn("TipoAssenza", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoAssenza)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnMatricola, Me.columnData, Me.columnCodiceGiustificativo, Me.columnOraInizioGiustificativo}, true))
            Me.columnMatricola.AllowDBNull = false
            Me.columnData.AllowDBNull = false
            Me.columnCodiceGiustificativo.AllowDBNull = false
            Me.columnOraInizioGiustificativo.AllowDBNull = false
        End Sub
        
        Public Function NewGiustificativiRow() As GiustificativiRow
            Return CType(Me.NewRow,GiustificativiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GiustificativiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GiustificativiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GiustificativiRowChangedEvent) Is Nothing) Then
                RaiseEvent GiustificativiRowChanged(Me, New GiustificativiRowChangeEvent(CType(e.Row,GiustificativiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GiustificativiRowChangingEvent) Is Nothing) Then
                RaiseEvent GiustificativiRowChanging(Me, New GiustificativiRowChangeEvent(CType(e.Row,GiustificativiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GiustificativiRowDeletedEvent) Is Nothing) Then
                RaiseEvent GiustificativiRowDeleted(Me, New GiustificativiRowChangeEvent(CType(e.Row,GiustificativiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GiustificativiRowDeletingEvent) Is Nothing) Then
                RaiseEvent GiustificativiRowDeleting(Me, New GiustificativiRowChangeEvent(CType(e.Row,GiustificativiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGiustificativiRow(ByVal row As GiustificativiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GiustificativiRow
        Inherits DataRow
        
        Private tableGiustificativi As GiustificativiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGiustificativi = CType(Me.Table,GiustificativiDataTable)
        End Sub
        
        Public Property Matricola As Decimal
            Get
                Return CType(Me(Me.tableGiustificativi.MatricolaColumn),Decimal)
            End Get
            Set
                Me(Me.tableGiustificativi.MatricolaColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Return CType(Me(Me.tableGiustificativi.DataColumn),Date)
            End Get
            Set
                Me(Me.tableGiustificativi.DataColumn) = value
            End Set
        End Property
        
        Public Property CodiceGiustificativo As String
            Get
                Return CType(Me(Me.tableGiustificativi.CodiceGiustificativoColumn),String)
            End Get
            Set
                Me(Me.tableGiustificativi.CodiceGiustificativoColumn) = value
            End Set
        End Property
        
        Public Property OraInizioGiustificativo As Decimal
            Get
                Return CType(Me(Me.tableGiustificativi.OraInizioGiustificativoColumn),Decimal)
            End Get
            Set
                Me(Me.tableGiustificativi.OraInizioGiustificativoColumn) = value
            End Set
        End Property
        
        Public Property OraFineGiustificativo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGiustificativi.OraFineGiustificativoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGiustificativi.OraFineGiustificativoColumn) = value
            End Set
        End Property
        
        Public Property TipoAssenza As String
            Get
                Try 
                    Return CType(Me(Me.tableGiustificativi.TipoAssenzaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGiustificativi.TipoAssenzaColumn) = value
            End Set
        End Property
        
        Public Function IsOraFineGiustificativoNull() As Boolean
            Return Me.IsNull(Me.tableGiustificativi.OraFineGiustificativoColumn)
        End Function
        
        Public Sub SetOraFineGiustificativoNull()
            Me(Me.tableGiustificativi.OraFineGiustificativoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoAssenzaNull() As Boolean
            Return Me.IsNull(Me.tableGiustificativi.TipoAssenzaColumn)
        End Function
        
        Public Sub SetTipoAssenzaNull()
            Me(Me.tableGiustificativi.TipoAssenzaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GiustificativiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GiustificativiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GiustificativiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GiustificativiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccertatoriTurnoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMatricola As DataColumn
        
        Private columnData As DataColumn
        
        Private columnTurno As DataColumn
        
        Private columnCognomeNome As DataColumn
        
        Private columnCodiceGruppo As DataColumn
        
        Private columnGruppo As DataColumn
        
        Private columnTipologiaTurno As DataColumn
        
        Friend Sub New()
            MyBase.New("AccertatoriTurno")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MatricolaColumn As DataColumn
            Get
                Return Me.columnMatricola
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property TurnoColumn As DataColumn
            Get
                Return Me.columnTurno
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeColumn As DataColumn
            Get
                Return Me.columnCognomeNome
            End Get
        End Property
        
        Friend ReadOnly Property CodiceGruppoColumn As DataColumn
            Get
                Return Me.columnCodiceGruppo
            End Get
        End Property
        
        Friend ReadOnly Property GruppoColumn As DataColumn
            Get
                Return Me.columnGruppo
            End Get
        End Property
        
        Friend ReadOnly Property TipologiaTurnoColumn As DataColumn
            Get
                Return Me.columnTipologiaTurno
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AccertatoriTurnoRow
            Get
                Return CType(Me.Rows(index),AccertatoriTurnoRow)
            End Get
        End Property
        
        Public Event AccertatoriTurnoRowChanged As AccertatoriTurnoRowChangeEventHandler
        
        Public Event AccertatoriTurnoRowChanging As AccertatoriTurnoRowChangeEventHandler
        
        Public Event AccertatoriTurnoRowDeleted As AccertatoriTurnoRowChangeEventHandler
        
        Public Event AccertatoriTurnoRowDeleting As AccertatoriTurnoRowChangeEventHandler
        
        Public Overloads Sub AddAccertatoriTurnoRow(ByVal row As AccertatoriTurnoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatoriTurnoRow(ByVal Matricola As Decimal, ByVal Data As Date, ByVal Turno As Decimal, ByVal CognomeNome As String, ByVal CodiceGruppo As String, ByVal Gruppo As String, ByVal TipologiaTurno As String) As AccertatoriTurnoRow
            Dim rowAccertatoriTurnoRow As AccertatoriTurnoRow = CType(Me.NewRow,AccertatoriTurnoRow)
            rowAccertatoriTurnoRow.ItemArray = New Object() {Matricola, Data, Turno, CognomeNome, CodiceGruppo, Gruppo, TipologiaTurno}
            Me.Rows.Add(rowAccertatoriTurnoRow)
            Return rowAccertatoriTurnoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AccertatoriTurnoDataTable = CType(MyBase.Clone,AccertatoriTurnoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AccertatoriTurnoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMatricola = Me.Columns("Matricola")
            Me.columnData = Me.Columns("Data")
            Me.columnTurno = Me.Columns("Turno")
            Me.columnCognomeNome = Me.Columns("CognomeNome")
            Me.columnCodiceGruppo = Me.Columns("CodiceGruppo")
            Me.columnGruppo = Me.Columns("Gruppo")
            Me.columnTipologiaTurno = Me.Columns("TipologiaTurno")
        End Sub
        
        Private Sub InitClass()
            Me.columnMatricola = New DataColumn("Matricola", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMatricola)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnTurno = New DataColumn("Turno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurno)
            Me.columnCognomeNome = New DataColumn("CognomeNome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNome)
            Me.columnCodiceGruppo = New DataColumn("CodiceGruppo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodiceGruppo)
            Me.columnGruppo = New DataColumn("Gruppo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGruppo)
            Me.columnTipologiaTurno = New DataColumn("TipologiaTurno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipologiaTurno)
            Me.columnMatricola.AllowDBNull = false
            Me.columnData.AllowDBNull = false
        End Sub
        
        Public Function NewAccertatoriTurnoRow() As AccertatoriTurnoRow
            Return CType(Me.NewRow,AccertatoriTurnoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AccertatoriTurnoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AccertatoriTurnoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AccertatoriTurnoRowChangedEvent) Is Nothing) Then
                RaiseEvent AccertatoriTurnoRowChanged(Me, New AccertatoriTurnoRowChangeEvent(CType(e.Row,AccertatoriTurnoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AccertatoriTurnoRowChangingEvent) Is Nothing) Then
                RaiseEvent AccertatoriTurnoRowChanging(Me, New AccertatoriTurnoRowChangeEvent(CType(e.Row,AccertatoriTurnoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AccertatoriTurnoRowDeletedEvent) Is Nothing) Then
                RaiseEvent AccertatoriTurnoRowDeleted(Me, New AccertatoriTurnoRowChangeEvent(CType(e.Row,AccertatoriTurnoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AccertatoriTurnoRowDeletingEvent) Is Nothing) Then
                RaiseEvent AccertatoriTurnoRowDeleting(Me, New AccertatoriTurnoRowChangeEvent(CType(e.Row,AccertatoriTurnoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatoriTurnoRow(ByVal row As AccertatoriTurnoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccertatoriTurnoRow
        Inherits DataRow
        
        Private tableAccertatoriTurno As AccertatoriTurnoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatoriTurno = CType(Me.Table,AccertatoriTurnoDataTable)
        End Sub
        
        Public Property Matricola As Decimal
            Get
                Return CType(Me(Me.tableAccertatoriTurno.MatricolaColumn),Decimal)
            End Get
            Set
                Me(Me.tableAccertatoriTurno.MatricolaColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Return CType(Me(Me.tableAccertatoriTurno.DataColumn),Date)
            End Get
            Set
                Me(Me.tableAccertatoriTurno.DataColumn) = value
            End Set
        End Property
        
        Public Property Turno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAccertatoriTurno.TurnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatoriTurno.TurnoColumn) = value
            End Set
        End Property
        
        Public Property CognomeNome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatoriTurno.CognomeNomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatoriTurno.CognomeNomeColumn) = value
            End Set
        End Property
        
        Public Property CodiceGruppo As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatoriTurno.CodiceGruppoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatoriTurno.CodiceGruppoColumn) = value
            End Set
        End Property
        
        Public Property Gruppo As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatoriTurno.GruppoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatoriTurno.GruppoColumn) = value
            End Set
        End Property
        
        Public Property TipologiaTurno As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatoriTurno.TipologiaTurnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatoriTurno.TipologiaTurnoColumn) = value
            End Set
        End Property
        
        Public Function IsTurnoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatoriTurno.TurnoColumn)
        End Function
        
        Public Sub SetTurnoNull()
            Me(Me.tableAccertatoriTurno.TurnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatoriTurno.CognomeNomeColumn)
        End Function
        
        Public Sub SetCognomeNomeNull()
            Me(Me.tableAccertatoriTurno.CognomeNomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodiceGruppoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatoriTurno.CodiceGruppoColumn)
        End Function
        
        Public Sub SetCodiceGruppoNull()
            Me(Me.tableAccertatoriTurno.CodiceGruppoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGruppoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatoriTurno.GruppoColumn)
        End Function
        
        Public Sub SetGruppoNull()
            Me(Me.tableAccertatoriTurno.GruppoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipologiaTurnoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatoriTurno.TipologiaTurnoColumn)
        End Function
        
        Public Sub SetTipologiaTurnoNull()
            Me(Me.tableAccertatoriTurno.TipologiaTurnoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccertatoriTurnoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AccertatoriTurnoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AccertatoriTurnoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AccertatoriTurnoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
