'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsTitoliSosta
    Inherits DataSet
    
    Private tableDivisioneZona As DivisioneZonaDataTable
    
    Private tableTitoliSosta As TitoliSostaDataTable
    
    Private tableTitoliSostaD As TitoliSostaDDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DivisioneZona")) Is Nothing) Then
                Me.Tables.Add(New DivisioneZonaDataTable(ds.Tables("DivisioneZona")))
            End If
            If (Not (ds.Tables("TitoliSosta")) Is Nothing) Then
                Me.Tables.Add(New TitoliSostaDataTable(ds.Tables("TitoliSosta")))
            End If
            If (Not (ds.Tables("TitoliSostaD")) Is Nothing) Then
                Me.Tables.Add(New TitoliSostaDDataTable(ds.Tables("TitoliSostaD")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DivisioneZona As DivisioneZonaDataTable
        Get
            Return Me.tableDivisioneZona
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TitoliSosta As TitoliSostaDataTable
        Get
            Return Me.tableTitoliSosta
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TitoliSostaD As TitoliSostaDDataTable
        Get
            Return Me.tableTitoliSostaD
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsTitoliSosta = CType(MyBase.Clone,DsTitoliSosta)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("DivisioneZona")) Is Nothing) Then
            Me.Tables.Add(New DivisioneZonaDataTable(ds.Tables("DivisioneZona")))
        End If
        If (Not (ds.Tables("TitoliSosta")) Is Nothing) Then
            Me.Tables.Add(New TitoliSostaDataTable(ds.Tables("TitoliSosta")))
        End If
        If (Not (ds.Tables("TitoliSostaD")) Is Nothing) Then
            Me.Tables.Add(New TitoliSostaDDataTable(ds.Tables("TitoliSostaD")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableDivisioneZona = CType(Me.Tables("DivisioneZona"),DivisioneZonaDataTable)
        If (Not (Me.tableDivisioneZona) Is Nothing) Then
            Me.tableDivisioneZona.InitVars
        End If
        Me.tableTitoliSosta = CType(Me.Tables("TitoliSosta"),TitoliSostaDataTable)
        If (Not (Me.tableTitoliSosta) Is Nothing) Then
            Me.tableTitoliSosta.InitVars
        End If
        Me.tableTitoliSostaD = CType(Me.Tables("TitoliSostaD"),TitoliSostaDDataTable)
        If (Not (Me.tableTitoliSostaD) Is Nothing) Then
            Me.tableTitoliSostaD.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsTitoliSosta"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsTitoliSosta.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableDivisioneZona = New DivisioneZonaDataTable
        Me.Tables.Add(Me.tableDivisioneZona)
        Me.tableTitoliSosta = New TitoliSostaDataTable
        Me.Tables.Add(Me.tableTitoliSosta)
        Me.tableTitoliSostaD = New TitoliSostaDDataTable
        Me.Tables.Add(Me.tableTitoliSostaD)
    End Sub
    
    Private Function ShouldSerializeDivisioneZona() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTitoliSosta() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTitoliSostaD() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub DivisioneZonaRowChangeEventHandler(ByVal sender As Object, ByVal e As DivisioneZonaRowChangeEvent)
    
    Public Delegate Sub TitoliSostaRowChangeEventHandler(ByVal sender As Object, ByVal e As TitoliSostaRowChangeEvent)
    
    Public Delegate Sub TitoliSostaDRowChangeEventHandler(ByVal sender As Object, ByVal e As TitoliSostaDRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivisioneZonaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnDescrizione As DataColumn
        
        Friend Sub New()
            MyBase.New("DivisioneZona")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneColumn As DataColumn
            Get
                Return Me.columnDescrizione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DivisioneZonaRow
            Get
                Return CType(Me.Rows(index),DivisioneZonaRow)
            End Get
        End Property
        
        Public Event DivisioneZonaRowChanged As DivisioneZonaRowChangeEventHandler
        
        Public Event DivisioneZonaRowChanging As DivisioneZonaRowChangeEventHandler
        
        Public Event DivisioneZonaRowDeleted As DivisioneZonaRowChangeEventHandler
        
        Public Event DivisioneZonaRowDeleting As DivisioneZonaRowChangeEventHandler
        
        Public Overloads Sub AddDivisioneZonaRow(ByVal row As DivisioneZonaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDivisioneZonaRow(ByVal Id As Integer, ByVal Descrizione As String) As DivisioneZonaRow
            Dim rowDivisioneZonaRow As DivisioneZonaRow = CType(Me.NewRow,DivisioneZonaRow)
            rowDivisioneZonaRow.ItemArray = New Object() {Id, Descrizione}
            Me.Rows.Add(rowDivisioneZonaRow)
            Return rowDivisioneZonaRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As DivisioneZonaRow
            Return CType(Me.Rows.Find(New Object() {Id}),DivisioneZonaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DivisioneZonaDataTable = CType(MyBase.Clone,DivisioneZonaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DivisioneZonaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnDescrizione = Me.Columns("Descrizione")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnDescrizione = New DataColumn("Descrizione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewDivisioneZonaRow() As DivisioneZonaRow
            Return CType(Me.NewRow,DivisioneZonaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DivisioneZonaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DivisioneZonaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DivisioneZonaRowChangedEvent) Is Nothing) Then
                RaiseEvent DivisioneZonaRowChanged(Me, New DivisioneZonaRowChangeEvent(CType(e.Row,DivisioneZonaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DivisioneZonaRowChangingEvent) Is Nothing) Then
                RaiseEvent DivisioneZonaRowChanging(Me, New DivisioneZonaRowChangeEvent(CType(e.Row,DivisioneZonaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DivisioneZonaRowDeletedEvent) Is Nothing) Then
                RaiseEvent DivisioneZonaRowDeleted(Me, New DivisioneZonaRowChangeEvent(CType(e.Row,DivisioneZonaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DivisioneZonaRowDeletingEvent) Is Nothing) Then
                RaiseEvent DivisioneZonaRowDeleting(Me, New DivisioneZonaRowChangeEvent(CType(e.Row,DivisioneZonaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDivisioneZonaRow(ByVal row As DivisioneZonaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivisioneZonaRow
        Inherits DataRow
        
        Private tableDivisioneZona As DivisioneZonaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDivisioneZona = CType(Me.Table,DivisioneZonaDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableDivisioneZona.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableDivisioneZona.IdColumn) = value
            End Set
        End Property
        
        Public Property Descrizione As String
            Get
                Try 
                    Return CType(Me(Me.tableDivisioneZona.DescrizioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDivisioneZona.DescrizioneColumn) = value
            End Set
        End Property
        
        Public Function IsDescrizioneNull() As Boolean
            Return Me.IsNull(Me.tableDivisioneZona.DescrizioneColumn)
        End Function
        
        Public Sub SetDescrizioneNull()
            Me(Me.tableDivisioneZona.DescrizioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DivisioneZonaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DivisioneZonaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DivisioneZonaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DivisioneZonaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TitoliSostaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnCodiceTit As DataColumn
        
        Private columnDivisione As DataColumn
        
        Friend Sub New()
            MyBase.New("TitoliSosta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property CodiceTitColumn As DataColumn
            Get
                Return Me.columnCodiceTit
            End Get
        End Property
        
        Friend ReadOnly Property DivisioneColumn As DataColumn
            Get
                Return Me.columnDivisione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TitoliSostaRow
            Get
                Return CType(Me.Rows(index),TitoliSostaRow)
            End Get
        End Property
        
        Public Event TitoliSostaRowChanged As TitoliSostaRowChangeEventHandler
        
        Public Event TitoliSostaRowChanging As TitoliSostaRowChangeEventHandler
        
        Public Event TitoliSostaRowDeleted As TitoliSostaRowChangeEventHandler
        
        Public Event TitoliSostaRowDeleting As TitoliSostaRowChangeEventHandler
        
        Public Overloads Sub AddTitoliSostaRow(ByVal row As TitoliSostaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTitoliSostaRow(ByVal Id As System.Guid, ByVal CodiceTit As String, ByVal Divisione As Integer) As TitoliSostaRow
            Dim rowTitoliSostaRow As TitoliSostaRow = CType(Me.NewRow,TitoliSostaRow)
            rowTitoliSostaRow.ItemArray = New Object() {Id, CodiceTit, Divisione}
            Me.Rows.Add(rowTitoliSostaRow)
            Return rowTitoliSostaRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As TitoliSostaRow
            Return CType(Me.Rows.Find(New Object() {Id}),TitoliSostaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TitoliSostaDataTable = CType(MyBase.Clone,TitoliSostaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TitoliSostaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnCodiceTit = Me.Columns("CodiceTit")
            Me.columnDivisione = Me.Columns("Divisione")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnCodiceTit = New DataColumn("CodiceTit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodiceTit)
            Me.columnDivisione = New DataColumn("Divisione", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivisione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewTitoliSostaRow() As TitoliSostaRow
            Return CType(Me.NewRow,TitoliSostaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TitoliSostaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TitoliSostaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TitoliSostaRowChangedEvent) Is Nothing) Then
                RaiseEvent TitoliSostaRowChanged(Me, New TitoliSostaRowChangeEvent(CType(e.Row,TitoliSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TitoliSostaRowChangingEvent) Is Nothing) Then
                RaiseEvent TitoliSostaRowChanging(Me, New TitoliSostaRowChangeEvent(CType(e.Row,TitoliSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TitoliSostaRowDeletedEvent) Is Nothing) Then
                RaiseEvent TitoliSostaRowDeleted(Me, New TitoliSostaRowChangeEvent(CType(e.Row,TitoliSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TitoliSostaRowDeletingEvent) Is Nothing) Then
                RaiseEvent TitoliSostaRowDeleting(Me, New TitoliSostaRowChangeEvent(CType(e.Row,TitoliSostaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTitoliSostaRow(ByVal row As TitoliSostaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TitoliSostaRow
        Inherits DataRow
        
        Private tableTitoliSosta As TitoliSostaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTitoliSosta = CType(Me.Table,TitoliSostaDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableTitoliSosta.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableTitoliSosta.IdColumn) = value
            End Set
        End Property
        
        Public Property CodiceTit As String
            Get
                Try 
                    Return CType(Me(Me.tableTitoliSosta.CodiceTitColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTitoliSosta.CodiceTitColumn) = value
            End Set
        End Property
        
        Public Property Divisione As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTitoliSosta.DivisioneColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTitoliSosta.DivisioneColumn) = value
            End Set
        End Property
        
        Public Function IsCodiceTitNull() As Boolean
            Return Me.IsNull(Me.tableTitoliSosta.CodiceTitColumn)
        End Function
        
        Public Sub SetCodiceTitNull()
            Me(Me.tableTitoliSosta.CodiceTitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivisioneNull() As Boolean
            Return Me.IsNull(Me.tableTitoliSosta.DivisioneColumn)
        End Function
        
        Public Sub SetDivisioneNull()
            Me(Me.tableTitoliSosta.DivisioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TitoliSostaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TitoliSostaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TitoliSostaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TitoliSostaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TitoliSostaDDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnCodiceTit As DataColumn
        
        Private columnDivisione As DataColumn
        
        Private columnDescrizioneDiv As DataColumn
        
        Friend Sub New()
            MyBase.New("TitoliSostaD")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property CodiceTitColumn As DataColumn
            Get
                Return Me.columnCodiceTit
            End Get
        End Property
        
        Friend ReadOnly Property DivisioneColumn As DataColumn
            Get
                Return Me.columnDivisione
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneDivColumn As DataColumn
            Get
                Return Me.columnDescrizioneDiv
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TitoliSostaDRow
            Get
                Return CType(Me.Rows(index),TitoliSostaDRow)
            End Get
        End Property
        
        Public Event TitoliSostaDRowChanged As TitoliSostaDRowChangeEventHandler
        
        Public Event TitoliSostaDRowChanging As TitoliSostaDRowChangeEventHandler
        
        Public Event TitoliSostaDRowDeleted As TitoliSostaDRowChangeEventHandler
        
        Public Event TitoliSostaDRowDeleting As TitoliSostaDRowChangeEventHandler
        
        Public Overloads Sub AddTitoliSostaDRow(ByVal row As TitoliSostaDRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTitoliSostaDRow(ByVal Id As System.Guid, ByVal CodiceTit As String, ByVal Divisione As Integer, ByVal DescrizioneDiv As String) As TitoliSostaDRow
            Dim rowTitoliSostaDRow As TitoliSostaDRow = CType(Me.NewRow,TitoliSostaDRow)
            rowTitoliSostaDRow.ItemArray = New Object() {Id, CodiceTit, Divisione, DescrizioneDiv}
            Me.Rows.Add(rowTitoliSostaDRow)
            Return rowTitoliSostaDRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TitoliSostaDDataTable = CType(MyBase.Clone,TitoliSostaDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TitoliSostaDDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnCodiceTit = Me.Columns("CodiceTit")
            Me.columnDivisione = Me.Columns("Divisione")
            Me.columnDescrizioneDiv = Me.Columns("DescrizioneDiv")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnCodiceTit = New DataColumn("CodiceTit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodiceTit)
            Me.columnDivisione = New DataColumn("Divisione", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivisione)
            Me.columnDescrizioneDiv = New DataColumn("DescrizioneDiv", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizioneDiv)
            Me.columnId.AllowDBNull = false
        End Sub
        
        Public Function NewTitoliSostaDRow() As TitoliSostaDRow
            Return CType(Me.NewRow,TitoliSostaDRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TitoliSostaDRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TitoliSostaDRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TitoliSostaDRowChangedEvent) Is Nothing) Then
                RaiseEvent TitoliSostaDRowChanged(Me, New TitoliSostaDRowChangeEvent(CType(e.Row,TitoliSostaDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TitoliSostaDRowChangingEvent) Is Nothing) Then
                RaiseEvent TitoliSostaDRowChanging(Me, New TitoliSostaDRowChangeEvent(CType(e.Row,TitoliSostaDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TitoliSostaDRowDeletedEvent) Is Nothing) Then
                RaiseEvent TitoliSostaDRowDeleted(Me, New TitoliSostaDRowChangeEvent(CType(e.Row,TitoliSostaDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TitoliSostaDRowDeletingEvent) Is Nothing) Then
                RaiseEvent TitoliSostaDRowDeleting(Me, New TitoliSostaDRowChangeEvent(CType(e.Row,TitoliSostaDRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTitoliSostaDRow(ByVal row As TitoliSostaDRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TitoliSostaDRow
        Inherits DataRow
        
        Private tableTitoliSostaD As TitoliSostaDDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTitoliSostaD = CType(Me.Table,TitoliSostaDDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableTitoliSostaD.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableTitoliSostaD.IdColumn) = value
            End Set
        End Property
        
        Public Property CodiceTit As String
            Get
                Try 
                    Return CType(Me(Me.tableTitoliSostaD.CodiceTitColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTitoliSostaD.CodiceTitColumn) = value
            End Set
        End Property
        
        Public Property Divisione As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTitoliSostaD.DivisioneColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTitoliSostaD.DivisioneColumn) = value
            End Set
        End Property
        
        Public Property DescrizioneDiv As String
            Get
                Try 
                    Return CType(Me(Me.tableTitoliSostaD.DescrizioneDivColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTitoliSostaD.DescrizioneDivColumn) = value
            End Set
        End Property
        
        Public Function IsCodiceTitNull() As Boolean
            Return Me.IsNull(Me.tableTitoliSostaD.CodiceTitColumn)
        End Function
        
        Public Sub SetCodiceTitNull()
            Me(Me.tableTitoliSostaD.CodiceTitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivisioneNull() As Boolean
            Return Me.IsNull(Me.tableTitoliSostaD.DivisioneColumn)
        End Function
        
        Public Sub SetDivisioneNull()
            Me(Me.tableTitoliSostaD.DivisioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescrizioneDivNull() As Boolean
            Return Me.IsNull(Me.tableTitoliSostaD.DescrizioneDivColumn)
        End Function
        
        Public Sub SetDescrizioneDivNull()
            Me(Me.tableTitoliSostaD.DescrizioneDivColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TitoliSostaDRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TitoliSostaDRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TitoliSostaDRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TitoliSostaDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
