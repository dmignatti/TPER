'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsStalli
    Inherits DataSet
    
    Private tableSettori As SettoriDataTable
    
    Private tableStradarioBologna As StradarioBolognaDataTable
    
    Private tableStalliNoteSt As StalliNoteStDataTable
    
    Private tableStalli As StalliDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Settori")) Is Nothing) Then
                Me.Tables.Add(New SettoriDataTable(ds.Tables("Settori")))
            End If
            If (Not (ds.Tables("StradarioBologna")) Is Nothing) Then
                Me.Tables.Add(New StradarioBolognaDataTable(ds.Tables("StradarioBologna")))
            End If
            If (Not (ds.Tables("StalliNoteSt")) Is Nothing) Then
                Me.Tables.Add(New StalliNoteStDataTable(ds.Tables("StalliNoteSt")))
            End If
            If (Not (ds.Tables("Stalli")) Is Nothing) Then
                Me.Tables.Add(New StalliDataTable(ds.Tables("Stalli")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Settori As SettoriDataTable
        Get
            Return Me.tableSettori
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StradarioBologna As StradarioBolognaDataTable
        Get
            Return Me.tableStradarioBologna
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StalliNoteSt As StalliNoteStDataTable
        Get
            Return Me.tableStalliNoteSt
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Stalli As StalliDataTable
        Get
            Return Me.tableStalli
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsStalli = CType(MyBase.Clone,DsStalli)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Settori")) Is Nothing) Then
            Me.Tables.Add(New SettoriDataTable(ds.Tables("Settori")))
        End If
        If (Not (ds.Tables("StradarioBologna")) Is Nothing) Then
            Me.Tables.Add(New StradarioBolognaDataTable(ds.Tables("StradarioBologna")))
        End If
        If (Not (ds.Tables("StalliNoteSt")) Is Nothing) Then
            Me.Tables.Add(New StalliNoteStDataTable(ds.Tables("StalliNoteSt")))
        End If
        If (Not (ds.Tables("Stalli")) Is Nothing) Then
            Me.Tables.Add(New StalliDataTable(ds.Tables("Stalli")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableSettori = CType(Me.Tables("Settori"),SettoriDataTable)
        If (Not (Me.tableSettori) Is Nothing) Then
            Me.tableSettori.InitVars
        End If
        Me.tableStradarioBologna = CType(Me.Tables("StradarioBologna"),StradarioBolognaDataTable)
        If (Not (Me.tableStradarioBologna) Is Nothing) Then
            Me.tableStradarioBologna.InitVars
        End If
        Me.tableStalliNoteSt = CType(Me.Tables("StalliNoteSt"),StalliNoteStDataTable)
        If (Not (Me.tableStalliNoteSt) Is Nothing) Then
            Me.tableStalliNoteSt.InitVars
        End If
        Me.tableStalli = CType(Me.Tables("Stalli"),StalliDataTable)
        If (Not (Me.tableStalli) Is Nothing) Then
            Me.tableStalli.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsStalli"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsStalli.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableSettori = New SettoriDataTable
        Me.Tables.Add(Me.tableSettori)
        Me.tableStradarioBologna = New StradarioBolognaDataTable
        Me.Tables.Add(Me.tableStradarioBologna)
        Me.tableStalliNoteSt = New StalliNoteStDataTable
        Me.Tables.Add(Me.tableStalliNoteSt)
        Me.tableStalli = New StalliDataTable
        Me.Tables.Add(Me.tableStalli)
    End Sub
    
    Private Function ShouldSerializeSettori() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStradarioBologna() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStalliNoteSt() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStalli() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub SettoriRowChangeEventHandler(ByVal sender As Object, ByVal e As SettoriRowChangeEvent)
    
    Public Delegate Sub StradarioBolognaRowChangeEventHandler(ByVal sender As Object, ByVal e As StradarioBolognaRowChangeEvent)
    
    Public Delegate Sub StalliNoteStRowChangeEventHandler(ByVal sender As Object, ByVal e As StalliNoteStRowChangeEvent)
    
    Public Delegate Sub StalliRowChangeEventHandler(ByVal sender As Object, ByVal e As StalliRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SettoriDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_SZF As DataColumn
        
        Private columnId_ZonaSettoreUnico As DataColumn
        
        Private columnDesc_Settore As DataColumn
        
        Private columnDesc_Dettaglio_Settore As DataColumn
        
        Friend Sub New()
            MyBase.New("Settori")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_SZFColumn As DataColumn
            Get
                Return Me.columnId_SZF
            End Get
        End Property
        
        Friend ReadOnly Property Id_ZonaSettoreUnicoColumn As DataColumn
            Get
                Return Me.columnId_ZonaSettoreUnico
            End Get
        End Property
        
        Friend ReadOnly Property Desc_SettoreColumn As DataColumn
            Get
                Return Me.columnDesc_Settore
            End Get
        End Property
        
        Friend ReadOnly Property Desc_Dettaglio_SettoreColumn As DataColumn
            Get
                Return Me.columnDesc_Dettaglio_Settore
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SettoriRow
            Get
                Return CType(Me.Rows(index),SettoriRow)
            End Get
        End Property
        
        Public Event SettoriRowChanged As SettoriRowChangeEventHandler
        
        Public Event SettoriRowChanging As SettoriRowChangeEventHandler
        
        Public Event SettoriRowDeleted As SettoriRowChangeEventHandler
        
        Public Event SettoriRowDeleting As SettoriRowChangeEventHandler
        
        Public Overloads Sub AddSettoriRow(ByVal row As SettoriRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSettoriRow(ByVal Id_SZF As Integer, ByVal Id_ZonaSettoreUnico As Integer, ByVal Desc_Settore As String, ByVal Desc_Dettaglio_Settore As String) As SettoriRow
            Dim rowSettoriRow As SettoriRow = CType(Me.NewRow,SettoriRow)
            rowSettoriRow.ItemArray = New Object() {Id_SZF, Id_ZonaSettoreUnico, Desc_Settore, Desc_Dettaglio_Settore}
            Me.Rows.Add(rowSettoriRow)
            Return rowSettoriRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SettoriDataTable = CType(MyBase.Clone,SettoriDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SettoriDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_SZF = Me.Columns("Id_SZF")
            Me.columnId_ZonaSettoreUnico = Me.Columns("Id_ZonaSettoreUnico")
            Me.columnDesc_Settore = Me.Columns("Desc_Settore")
            Me.columnDesc_Dettaglio_Settore = Me.Columns("Desc_Dettaglio_Settore")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_SZF = New DataColumn("Id_SZF", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_SZF)
            Me.columnId_ZonaSettoreUnico = New DataColumn("Id_ZonaSettoreUnico", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_ZonaSettoreUnico)
            Me.columnDesc_Settore = New DataColumn("Desc_Settore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesc_Settore)
            Me.columnDesc_Dettaglio_Settore = New DataColumn("Desc_Dettaglio_Settore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesc_Dettaglio_Settore)
            Me.columnId_SZF.AllowDBNull = false
        End Sub
        
        Public Function NewSettoriRow() As SettoriRow
            Return CType(Me.NewRow,SettoriRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SettoriRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SettoriRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SettoriRowChangedEvent) Is Nothing) Then
                RaiseEvent SettoriRowChanged(Me, New SettoriRowChangeEvent(CType(e.Row,SettoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SettoriRowChangingEvent) Is Nothing) Then
                RaiseEvent SettoriRowChanging(Me, New SettoriRowChangeEvent(CType(e.Row,SettoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SettoriRowDeletedEvent) Is Nothing) Then
                RaiseEvent SettoriRowDeleted(Me, New SettoriRowChangeEvent(CType(e.Row,SettoriRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SettoriRowDeletingEvent) Is Nothing) Then
                RaiseEvent SettoriRowDeleting(Me, New SettoriRowChangeEvent(CType(e.Row,SettoriRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSettoriRow(ByVal row As SettoriRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SettoriRow
        Inherits DataRow
        
        Private tableSettori As SettoriDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSettori = CType(Me.Table,SettoriDataTable)
        End Sub
        
        Public Property Id_SZF As Integer
            Get
                Return CType(Me(Me.tableSettori.Id_SZFColumn),Integer)
            End Get
            Set
                Me(Me.tableSettori.Id_SZFColumn) = value
            End Set
        End Property
        
        Public Property Id_ZonaSettoreUnico As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSettori.Id_ZonaSettoreUnicoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSettori.Id_ZonaSettoreUnicoColumn) = value
            End Set
        End Property
        
        Public Property Desc_Settore As String
            Get
                Try 
                    Return CType(Me(Me.tableSettori.Desc_SettoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSettori.Desc_SettoreColumn) = value
            End Set
        End Property
        
        Public Property Desc_Dettaglio_Settore As String
            Get
                Try 
                    Return CType(Me(Me.tableSettori.Desc_Dettaglio_SettoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSettori.Desc_Dettaglio_SettoreColumn) = value
            End Set
        End Property
        
        Public Function IsId_ZonaSettoreUnicoNull() As Boolean
            Return Me.IsNull(Me.tableSettori.Id_ZonaSettoreUnicoColumn)
        End Function
        
        Public Sub SetId_ZonaSettoreUnicoNull()
            Me(Me.tableSettori.Id_ZonaSettoreUnicoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesc_SettoreNull() As Boolean
            Return Me.IsNull(Me.tableSettori.Desc_SettoreColumn)
        End Function
        
        Public Sub SetDesc_SettoreNull()
            Me(Me.tableSettori.Desc_SettoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesc_Dettaglio_SettoreNull() As Boolean
            Return Me.IsNull(Me.tableSettori.Desc_Dettaglio_SettoreColumn)
        End Function
        
        Public Sub SetDesc_Dettaglio_SettoreNull()
            Me(Me.tableSettori.Desc_Dettaglio_SettoreColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SettoriRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SettoriRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SettoriRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SettoriRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StradarioBolognaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_prov As DataColumn
        
        Private columncod_comune As DataColumn
        
        Private columnCodice As DataColumn
        
        Private columnNome As DataColumn
        
        Private columnSettoreZona As DataColumn
        
        Private columnGuid As DataColumn
        
        Friend Sub New()
            MyBase.New("StradarioBologna")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_provColumn As DataColumn
            Get
                Return Me.columncod_prov
            End Get
        End Property
        
        Friend ReadOnly Property cod_comuneColumn As DataColumn
            Get
                Return Me.columncod_comune
            End Get
        End Property
        
        Friend ReadOnly Property CodiceColumn As DataColumn
            Get
                Return Me.columnCodice
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property SettoreZonaColumn As DataColumn
            Get
                Return Me.columnSettoreZona
            End Get
        End Property
        
        Friend ReadOnly Property GuidColumn As DataColumn
            Get
                Return Me.columnGuid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As StradarioBolognaRow
            Get
                Return CType(Me.Rows(index),StradarioBolognaRow)
            End Get
        End Property
        
        Public Event StradarioBolognaRowChanged As StradarioBolognaRowChangeEventHandler
        
        Public Event StradarioBolognaRowChanging As StradarioBolognaRowChangeEventHandler
        
        Public Event StradarioBolognaRowDeleted As StradarioBolognaRowChangeEventHandler
        
        Public Event StradarioBolognaRowDeleting As StradarioBolognaRowChangeEventHandler
        
        Public Overloads Sub AddStradarioBolognaRow(ByVal row As StradarioBolognaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStradarioBolognaRow(ByVal cod_prov As Integer, ByVal cod_comune As Integer, ByVal Codice As Integer, ByVal Nome As String, ByVal SettoreZona As Short, ByVal Guid As System.Guid) As StradarioBolognaRow
            Dim rowStradarioBolognaRow As StradarioBolognaRow = CType(Me.NewRow,StradarioBolognaRow)
            rowStradarioBolognaRow.ItemArray = New Object() {cod_prov, cod_comune, Codice, Nome, SettoreZona, Guid}
            Me.Rows.Add(rowStradarioBolognaRow)
            Return rowStradarioBolognaRow
        End Function
        
        Public Function FindBycod_provcod_comuneCodice(ByVal cod_prov As Integer, ByVal cod_comune As Integer, ByVal Codice As Integer) As StradarioBolognaRow
            Return CType(Me.Rows.Find(New Object() {cod_prov, cod_comune, Codice}),StradarioBolognaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As StradarioBolognaDataTable = CType(MyBase.Clone,StradarioBolognaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New StradarioBolognaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_prov = Me.Columns("cod_prov")
            Me.columncod_comune = Me.Columns("cod_comune")
            Me.columnCodice = Me.Columns("Codice")
            Me.columnNome = Me.Columns("Nome")
            Me.columnSettoreZona = Me.Columns("SettoreZona")
            Me.columnGuid = Me.Columns("Guid")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_prov = New DataColumn("cod_prov", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_prov)
            Me.columncod_comune = New DataColumn("cod_comune", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_comune)
            Me.columnCodice = New DataColumn("Codice", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodice)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnSettoreZona = New DataColumn("SettoreZona", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSettoreZona)
            Me.columnGuid = New DataColumn("Guid", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGuid)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_prov, Me.columncod_comune, Me.columnCodice}, true))
            Me.columncod_prov.AllowDBNull = false
            Me.columncod_comune.AllowDBNull = false
            Me.columnCodice.AllowDBNull = false
            Me.columnGuid.AllowDBNull = false
        End Sub
        
        Public Function NewStradarioBolognaRow() As StradarioBolognaRow
            Return CType(Me.NewRow,StradarioBolognaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New StradarioBolognaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(StradarioBolognaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StradarioBolognaRowChangedEvent) Is Nothing) Then
                RaiseEvent StradarioBolognaRowChanged(Me, New StradarioBolognaRowChangeEvent(CType(e.Row,StradarioBolognaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StradarioBolognaRowChangingEvent) Is Nothing) Then
                RaiseEvent StradarioBolognaRowChanging(Me, New StradarioBolognaRowChangeEvent(CType(e.Row,StradarioBolognaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StradarioBolognaRowDeletedEvent) Is Nothing) Then
                RaiseEvent StradarioBolognaRowDeleted(Me, New StradarioBolognaRowChangeEvent(CType(e.Row,StradarioBolognaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StradarioBolognaRowDeletingEvent) Is Nothing) Then
                RaiseEvent StradarioBolognaRowDeleting(Me, New StradarioBolognaRowChangeEvent(CType(e.Row,StradarioBolognaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStradarioBolognaRow(ByVal row As StradarioBolognaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StradarioBolognaRow
        Inherits DataRow
        
        Private tableStradarioBologna As StradarioBolognaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStradarioBologna = CType(Me.Table,StradarioBolognaDataTable)
        End Sub
        
        Public Property cod_prov As Integer
            Get
                Return CType(Me(Me.tableStradarioBologna.cod_provColumn),Integer)
            End Get
            Set
                Me(Me.tableStradarioBologna.cod_provColumn) = value
            End Set
        End Property
        
        Public Property cod_comune As Integer
            Get
                Return CType(Me(Me.tableStradarioBologna.cod_comuneColumn),Integer)
            End Get
            Set
                Me(Me.tableStradarioBologna.cod_comuneColumn) = value
            End Set
        End Property
        
        Public Property Codice As Integer
            Get
                Return CType(Me(Me.tableStradarioBologna.CodiceColumn),Integer)
            End Get
            Set
                Me(Me.tableStradarioBologna.CodiceColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableStradarioBologna.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStradarioBologna.NomeColumn) = value
            End Set
        End Property
        
        Public Property SettoreZona As Short
            Get
                Try 
                    Return CType(Me(Me.tableStradarioBologna.SettoreZonaColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStradarioBologna.SettoreZonaColumn) = value
            End Set
        End Property
        
        Public Property Guid As System.Guid
            Get
                Return CType(Me(Me.tableStradarioBologna.GuidColumn),System.Guid)
            End Get
            Set
                Me(Me.tableStradarioBologna.GuidColumn) = value
            End Set
        End Property
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableStradarioBologna.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableStradarioBologna.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSettoreZonaNull() As Boolean
            Return Me.IsNull(Me.tableStradarioBologna.SettoreZonaColumn)
        End Function
        
        Public Sub SetSettoreZonaNull()
            Me(Me.tableStradarioBologna.SettoreZonaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StradarioBolognaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As StradarioBolognaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As StradarioBolognaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As StradarioBolognaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StalliNoteStDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnNota As DataColumn
        
        Private columnData As DataColumn
        
        Friend Sub New()
            MyBase.New("StalliNoteSt")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property NotaColumn As DataColumn
            Get
                Return Me.columnNota
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As StalliNoteStRow
            Get
                Return CType(Me.Rows(index),StalliNoteStRow)
            End Get
        End Property
        
        Public Event StalliNoteStRowChanged As StalliNoteStRowChangeEventHandler
        
        Public Event StalliNoteStRowChanging As StalliNoteStRowChangeEventHandler
        
        Public Event StalliNoteStRowDeleted As StalliNoteStRowChangeEventHandler
        
        Public Event StalliNoteStRowDeleting As StalliNoteStRowChangeEventHandler
        
        Public Overloads Sub AddStalliNoteStRow(ByVal row As StalliNoteStRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStalliNoteStRow(ByVal Id As System.Guid, ByVal Nota As String, ByVal Data As Date) As StalliNoteStRow
            Dim rowStalliNoteStRow As StalliNoteStRow = CType(Me.NewRow,StalliNoteStRow)
            rowStalliNoteStRow.ItemArray = New Object() {Id, Nota, Data}
            Me.Rows.Add(rowStalliNoteStRow)
            Return rowStalliNoteStRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As StalliNoteStRow
            Return CType(Me.Rows.Find(New Object() {Id}),StalliNoteStRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As StalliNoteStDataTable = CType(MyBase.Clone,StalliNoteStDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New StalliNoteStDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnNota = Me.Columns("Nota")
            Me.columnData = Me.Columns("Data")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnNota = New DataColumn("Nota", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNota)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewStalliNoteStRow() As StalliNoteStRow
            Return CType(Me.NewRow,StalliNoteStRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New StalliNoteStRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(StalliNoteStRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StalliNoteStRowChangedEvent) Is Nothing) Then
                RaiseEvent StalliNoteStRowChanged(Me, New StalliNoteStRowChangeEvent(CType(e.Row,StalliNoteStRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StalliNoteStRowChangingEvent) Is Nothing) Then
                RaiseEvent StalliNoteStRowChanging(Me, New StalliNoteStRowChangeEvent(CType(e.Row,StalliNoteStRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StalliNoteStRowDeletedEvent) Is Nothing) Then
                RaiseEvent StalliNoteStRowDeleted(Me, New StalliNoteStRowChangeEvent(CType(e.Row,StalliNoteStRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StalliNoteStRowDeletingEvent) Is Nothing) Then
                RaiseEvent StalliNoteStRowDeleting(Me, New StalliNoteStRowChangeEvent(CType(e.Row,StalliNoteStRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStalliNoteStRow(ByVal row As StalliNoteStRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StalliNoteStRow
        Inherits DataRow
        
        Private tableStalliNoteSt As StalliNoteStDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStalliNoteSt = CType(Me.Table,StalliNoteStDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tableStalliNoteSt.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableStalliNoteSt.IdColumn) = value
            End Set
        End Property
        
        Public Property Nota As String
            Get
                Try 
                    Return CType(Me(Me.tableStalliNoteSt.NotaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalliNoteSt.NotaColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableStalliNoteSt.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalliNoteSt.DataColumn) = value
            End Set
        End Property
        
        Public Function IsNotaNull() As Boolean
            Return Me.IsNull(Me.tableStalliNoteSt.NotaColumn)
        End Function
        
        Public Sub SetNotaNull()
            Me(Me.tableStalliNoteSt.NotaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableStalliNoteSt.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableStalliNoteSt.DataColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StalliNoteStRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As StalliNoteStRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As StalliNoteStRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As StalliNoteStRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StalliDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCivKey As DataColumn
        
        Private columnVia As DataColumn
        
        Private columnNote As DataColumn
        
        Private columnBlu As DataColumn
        
        Private columnVerde As DataColumn
        
        Private columnHandi As DataColumn
        
        Private columnResidenti As DataColumn
        
        Private columnRiservatoGenerico As DataColumn
        
        Private columnid As DataColumn
        
        Private columnCaricoScarico As DataColumn
        
        Private columnMoto As DataColumn
        
        Private columndiscoorario As DataColumn
        
        Private columnsospesi As DataColumn
        
        Private columnSettore As DataColumn
        
        Private columnlibera As DataColumn
        
        Private columnID_SZF As DataColumn
        
        Private columnNome As DataColumn
        
        Private columnDesc_Settore As DataColumn
        
        Private columnDesc_Dettaglio_Settore As DataColumn
        
        Private columnCarsharing As DataColumn
        
        Friend Sub New()
            MyBase.New("Stalli")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CivKeyColumn As DataColumn
            Get
                Return Me.columnCivKey
            End Get
        End Property
        
        Friend ReadOnly Property ViaColumn As DataColumn
            Get
                Return Me.columnVia
            End Get
        End Property
        
        Friend ReadOnly Property NoteColumn As DataColumn
            Get
                Return Me.columnNote
            End Get
        End Property
        
        Friend ReadOnly Property BluColumn As DataColumn
            Get
                Return Me.columnBlu
            End Get
        End Property
        
        Friend ReadOnly Property VerdeColumn As DataColumn
            Get
                Return Me.columnVerde
            End Get
        End Property
        
        Friend ReadOnly Property HandiColumn As DataColumn
            Get
                Return Me.columnHandi
            End Get
        End Property
        
        Friend ReadOnly Property ResidentiColumn As DataColumn
            Get
                Return Me.columnResidenti
            End Get
        End Property
        
        Friend ReadOnly Property RiservatoGenericoColumn As DataColumn
            Get
                Return Me.columnRiservatoGenerico
            End Get
        End Property
        
        Friend ReadOnly Property idColumn As DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        Friend ReadOnly Property CaricoScaricoColumn As DataColumn
            Get
                Return Me.columnCaricoScarico
            End Get
        End Property
        
        Friend ReadOnly Property MotoColumn As DataColumn
            Get
                Return Me.columnMoto
            End Get
        End Property
        
        Friend ReadOnly Property discoorarioColumn As DataColumn
            Get
                Return Me.columndiscoorario
            End Get
        End Property
        
        Friend ReadOnly Property sospesiColumn As DataColumn
            Get
                Return Me.columnsospesi
            End Get
        End Property
        
        Friend ReadOnly Property SettoreColumn As DataColumn
            Get
                Return Me.columnSettore
            End Get
        End Property
        
        Friend ReadOnly Property liberaColumn As DataColumn
            Get
                Return Me.columnlibera
            End Get
        End Property
        
        Friend ReadOnly Property ID_SZFColumn As DataColumn
            Get
                Return Me.columnID_SZF
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property Desc_SettoreColumn As DataColumn
            Get
                Return Me.columnDesc_Settore
            End Get
        End Property
        
        Friend ReadOnly Property Desc_Dettaglio_SettoreColumn As DataColumn
            Get
                Return Me.columnDesc_Dettaglio_Settore
            End Get
        End Property
        
        Friend ReadOnly Property CarsharingColumn As DataColumn
            Get
                Return Me.columnCarsharing
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As StalliRow
            Get
                Return CType(Me.Rows(index),StalliRow)
            End Get
        End Property
        
        Public Event StalliRowChanged As StalliRowChangeEventHandler
        
        Public Event StalliRowChanging As StalliRowChangeEventHandler
        
        Public Event StalliRowDeleted As StalliRowChangeEventHandler
        
        Public Event StalliRowDeleting As StalliRowChangeEventHandler
        
        Public Overloads Sub AddStalliRow(ByVal row As StalliRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStalliRow( _
                    ByVal CivKey As Integer,  _
                    ByVal Via As String,  _
                    ByVal Note As String,  _
                    ByVal Blu As Integer,  _
                    ByVal Verde As Integer,  _
                    ByVal Handi As Integer,  _
                    ByVal Residenti As Integer,  _
                    ByVal RiservatoGenerico As Integer,  _
                    ByVal CaricoScarico As Integer,  _
                    ByVal Moto As Integer,  _
                    ByVal discoorario As Integer,  _
                    ByVal sospesi As Integer,  _
                    ByVal Settore As String,  _
                    ByVal libera As Integer,  _
                    ByVal ID_SZF As Integer,  _
                    ByVal Nome As String,  _
                    ByVal Desc_Settore As String,  _
                    ByVal Desc_Dettaglio_Settore As String,  _
                    ByVal Carsharing As Integer) As StalliRow
            Dim rowStalliRow As StalliRow = CType(Me.NewRow,StalliRow)
            rowStalliRow.ItemArray = New Object() {CivKey, Via, Note, Blu, Verde, Handi, Residenti, RiservatoGenerico, Nothing, CaricoScarico, Moto, discoorario, sospesi, Settore, libera, ID_SZF, Nome, Desc_Settore, Desc_Dettaglio_Settore, Carsharing}
            Me.Rows.Add(rowStalliRow)
            Return rowStalliRow
        End Function
        
        Public Function FindByid(ByVal id As Integer) As StalliRow
            Return CType(Me.Rows.Find(New Object() {id}),StalliRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As StalliDataTable = CType(MyBase.Clone,StalliDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New StalliDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCivKey = Me.Columns("CivKey")
            Me.columnVia = Me.Columns("Via")
            Me.columnNote = Me.Columns("Note")
            Me.columnBlu = Me.Columns("Blu")
            Me.columnVerde = Me.Columns("Verde")
            Me.columnHandi = Me.Columns("Handi")
            Me.columnResidenti = Me.Columns("Residenti")
            Me.columnRiservatoGenerico = Me.Columns("RiservatoGenerico")
            Me.columnid = Me.Columns("id")
            Me.columnCaricoScarico = Me.Columns("CaricoScarico")
            Me.columnMoto = Me.Columns("Moto")
            Me.columndiscoorario = Me.Columns("discoorario")
            Me.columnsospesi = Me.Columns("sospesi")
            Me.columnSettore = Me.Columns("Settore")
            Me.columnlibera = Me.Columns("libera")
            Me.columnID_SZF = Me.Columns("ID_SZF")
            Me.columnNome = Me.Columns("Nome")
            Me.columnDesc_Settore = Me.Columns("Desc_Settore")
            Me.columnDesc_Dettaglio_Settore = Me.Columns("Desc_Dettaglio_Settore")
            Me.columnCarsharing = Me.Columns("Carsharing")
        End Sub
        
        Private Sub InitClass()
            Me.columnCivKey = New DataColumn("CivKey", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCivKey)
            Me.columnVia = New DataColumn("Via", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVia)
            Me.columnNote = New DataColumn("Note", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNote)
            Me.columnBlu = New DataColumn("Blu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBlu)
            Me.columnVerde = New DataColumn("Verde", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVerde)
            Me.columnHandi = New DataColumn("Handi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHandi)
            Me.columnResidenti = New DataColumn("Residenti", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResidenti)
            Me.columnRiservatoGenerico = New DataColumn("RiservatoGenerico", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRiservatoGenerico)
            Me.columnid = New DataColumn("id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid)
            Me.columnCaricoScarico = New DataColumn("CaricoScarico", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCaricoScarico)
            Me.columnMoto = New DataColumn("Moto", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMoto)
            Me.columndiscoorario = New DataColumn("discoorario", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscoorario)
            Me.columnsospesi = New DataColumn("sospesi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsospesi)
            Me.columnSettore = New DataColumn("Settore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSettore)
            Me.columnlibera = New DataColumn("libera", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlibera)
            Me.columnID_SZF = New DataColumn("ID_SZF", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_SZF)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnDesc_Settore = New DataColumn("Desc_Settore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesc_Settore)
            Me.columnDesc_Dettaglio_Settore = New DataColumn("Desc_Dettaglio_Settore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesc_Dettaglio_Settore)
            Me.columnCarsharing = New DataColumn("Carsharing", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCarsharing)
            Me.Constraints.Add(New UniqueConstraint("DsStalliKey1", New DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AllowDBNull = false
            Me.columnid.ReadOnly = true
            Me.columnid.Unique = true
        End Sub
        
        Public Function NewStalliRow() As StalliRow
            Return CType(Me.NewRow,StalliRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New StalliRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(StalliRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StalliRowChangedEvent) Is Nothing) Then
                RaiseEvent StalliRowChanged(Me, New StalliRowChangeEvent(CType(e.Row,StalliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StalliRowChangingEvent) Is Nothing) Then
                RaiseEvent StalliRowChanging(Me, New StalliRowChangeEvent(CType(e.Row,StalliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StalliRowDeletedEvent) Is Nothing) Then
                RaiseEvent StalliRowDeleted(Me, New StalliRowChangeEvent(CType(e.Row,StalliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StalliRowDeletingEvent) Is Nothing) Then
                RaiseEvent StalliRowDeleting(Me, New StalliRowChangeEvent(CType(e.Row,StalliRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStalliRow(ByVal row As StalliRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StalliRow
        Inherits DataRow
        
        Private tableStalli As StalliDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStalli = CType(Me.Table,StalliDataTable)
        End Sub
        
        Public Property CivKey As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStalli.CivKeyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.CivKeyColumn) = value
            End Set
        End Property
        
        Public Property Via As String
            Get
                Try 
                    Return CType(Me(Me.tableStalli.ViaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.ViaColumn) = value
            End Set
        End Property
        
        Public Property Note As String
            Get
                Try 
                    Return CType(Me(Me.tableStalli.NoteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.NoteColumn) = value
            End Set
        End Property
        
        Public Property Blu As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStalli.BluColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.BluColumn) = value
            End Set
        End Property
        
        Public Property Verde As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStalli.VerdeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.VerdeColumn) = value
            End Set
        End Property
        
        Public Property Handi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStalli.HandiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.HandiColumn) = value
            End Set
        End Property
        
        Public Property Residenti As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStalli.ResidentiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.ResidentiColumn) = value
            End Set
        End Property
        
        Public Property RiservatoGenerico As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStalli.RiservatoGenericoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.RiservatoGenericoColumn) = value
            End Set
        End Property
        
        Public Property id As Integer
            Get
                Return CType(Me(Me.tableStalli.idColumn),Integer)
            End Get
            Set
                Me(Me.tableStalli.idColumn) = value
            End Set
        End Property
        
        Public Property CaricoScarico As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStalli.CaricoScaricoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.CaricoScaricoColumn) = value
            End Set
        End Property
        
        Public Property Moto As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStalli.MotoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.MotoColumn) = value
            End Set
        End Property
        
        Public Property discoorario As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStalli.discoorarioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.discoorarioColumn) = value
            End Set
        End Property
        
        Public Property sospesi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStalli.sospesiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.sospesiColumn) = value
            End Set
        End Property
        
        Public Property Settore As String
            Get
                Try 
                    Return CType(Me(Me.tableStalli.SettoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.SettoreColumn) = value
            End Set
        End Property
        
        Public Property libera As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStalli.liberaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.liberaColumn) = value
            End Set
        End Property
        
        Public Property ID_SZF As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStalli.ID_SZFColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.ID_SZFColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableStalli.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.NomeColumn) = value
            End Set
        End Property
        
        Public Property Desc_Settore As String
            Get
                Try 
                    Return CType(Me(Me.tableStalli.Desc_SettoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.Desc_SettoreColumn) = value
            End Set
        End Property
        
        Public Property Desc_Dettaglio_Settore As String
            Get
                Try 
                    Return CType(Me(Me.tableStalli.Desc_Dettaglio_SettoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.Desc_Dettaglio_SettoreColumn) = value
            End Set
        End Property
        
        Public Property Carsharing As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStalli.CarsharingColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStalli.CarsharingColumn) = value
            End Set
        End Property
        
        Public Function IsCivKeyNull() As Boolean
            Return Me.IsNull(Me.tableStalli.CivKeyColumn)
        End Function
        
        Public Sub SetCivKeyNull()
            Me(Me.tableStalli.CivKeyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsViaNull() As Boolean
            Return Me.IsNull(Me.tableStalli.ViaColumn)
        End Function
        
        Public Sub SetViaNull()
            Me(Me.tableStalli.ViaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoteNull() As Boolean
            Return Me.IsNull(Me.tableStalli.NoteColumn)
        End Function
        
        Public Sub SetNoteNull()
            Me(Me.tableStalli.NoteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBluNull() As Boolean
            Return Me.IsNull(Me.tableStalli.BluColumn)
        End Function
        
        Public Sub SetBluNull()
            Me(Me.tableStalli.BluColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVerdeNull() As Boolean
            Return Me.IsNull(Me.tableStalli.VerdeColumn)
        End Function
        
        Public Sub SetVerdeNull()
            Me(Me.tableStalli.VerdeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHandiNull() As Boolean
            Return Me.IsNull(Me.tableStalli.HandiColumn)
        End Function
        
        Public Sub SetHandiNull()
            Me(Me.tableStalli.HandiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResidentiNull() As Boolean
            Return Me.IsNull(Me.tableStalli.ResidentiColumn)
        End Function
        
        Public Sub SetResidentiNull()
            Me(Me.tableStalli.ResidentiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRiservatoGenericoNull() As Boolean
            Return Me.IsNull(Me.tableStalli.RiservatoGenericoColumn)
        End Function
        
        Public Sub SetRiservatoGenericoNull()
            Me(Me.tableStalli.RiservatoGenericoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCaricoScaricoNull() As Boolean
            Return Me.IsNull(Me.tableStalli.CaricoScaricoColumn)
        End Function
        
        Public Sub SetCaricoScaricoNull()
            Me(Me.tableStalli.CaricoScaricoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMotoNull() As Boolean
            Return Me.IsNull(Me.tableStalli.MotoColumn)
        End Function
        
        Public Sub SetMotoNull()
            Me(Me.tableStalli.MotoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscoorarioNull() As Boolean
            Return Me.IsNull(Me.tableStalli.discoorarioColumn)
        End Function
        
        Public Sub SetdiscoorarioNull()
            Me(Me.tableStalli.discoorarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssospesiNull() As Boolean
            Return Me.IsNull(Me.tableStalli.sospesiColumn)
        End Function
        
        Public Sub SetsospesiNull()
            Me(Me.tableStalli.sospesiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSettoreNull() As Boolean
            Return Me.IsNull(Me.tableStalli.SettoreColumn)
        End Function
        
        Public Sub SetSettoreNull()
            Me(Me.tableStalli.SettoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsliberaNull() As Boolean
            Return Me.IsNull(Me.tableStalli.liberaColumn)
        End Function
        
        Public Sub SetliberaNull()
            Me(Me.tableStalli.liberaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsID_SZFNull() As Boolean
            Return Me.IsNull(Me.tableStalli.ID_SZFColumn)
        End Function
        
        Public Sub SetID_SZFNull()
            Me(Me.tableStalli.ID_SZFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableStalli.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableStalli.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesc_SettoreNull() As Boolean
            Return Me.IsNull(Me.tableStalli.Desc_SettoreColumn)
        End Function
        
        Public Sub SetDesc_SettoreNull()
            Me(Me.tableStalli.Desc_SettoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesc_Dettaglio_SettoreNull() As Boolean
            Return Me.IsNull(Me.tableStalli.Desc_Dettaglio_SettoreColumn)
        End Function
        
        Public Sub SetDesc_Dettaglio_SettoreNull()
            Me(Me.tableStalli.Desc_Dettaglio_SettoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCarsharingNull() As Boolean
            Return Me.IsNull(Me.tableStalli.CarsharingColumn)
        End Function
        
        Public Sub SetCarsharingNull()
            Me(Me.tableStalli.CarsharingColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StalliRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As StalliRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As StalliRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As StalliRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
