'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2503
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsAccertatoriASGiornaliero
    Inherits DataSet
    
    Private tableSP_ListaCambiGiornalieriStessoTipo As SP_ListaCambiGiornalieriStessoTipoDataTable
    
    Private tableRichiesteCongediGarantiti As RichiesteCongediGarantitiDataTable
    
    Private tableAccertatori_GiustificativoRichiesta As Accertatori_GiustificativoRichiestaDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SP_ListaCambiGiornalieriStessoTipo")) Is Nothing) Then
                Me.Tables.Add(New SP_ListaCambiGiornalieriStessoTipoDataTable(ds.Tables("SP_ListaCambiGiornalieriStessoTipo")))
            End If
            If (Not (ds.Tables("RichiesteCongediGarantiti")) Is Nothing) Then
                Me.Tables.Add(New RichiesteCongediGarantitiDataTable(ds.Tables("RichiesteCongediGarantiti")))
            End If
            If (Not (ds.Tables("Accertatori_GiustificativoRichiesta")) Is Nothing) Then
                Me.Tables.Add(New Accertatori_GiustificativoRichiestaDataTable(ds.Tables("Accertatori_GiustificativoRichiesta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_ListaCambiGiornalieriStessoTipo As SP_ListaCambiGiornalieriStessoTipoDataTable
        Get
            Return Me.tableSP_ListaCambiGiornalieriStessoTipo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RichiesteCongediGarantiti As RichiesteCongediGarantitiDataTable
        Get
            Return Me.tableRichiesteCongediGarantiti
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accertatori_GiustificativoRichiesta As Accertatori_GiustificativoRichiestaDataTable
        Get
            Return Me.tableAccertatori_GiustificativoRichiesta
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsAccertatoriASGiornaliero = CType(MyBase.Clone,dsAccertatoriASGiornaliero)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("SP_ListaCambiGiornalieriStessoTipo")) Is Nothing) Then
            Me.Tables.Add(New SP_ListaCambiGiornalieriStessoTipoDataTable(ds.Tables("SP_ListaCambiGiornalieriStessoTipo")))
        End If
        If (Not (ds.Tables("RichiesteCongediGarantiti")) Is Nothing) Then
            Me.Tables.Add(New RichiesteCongediGarantitiDataTable(ds.Tables("RichiesteCongediGarantiti")))
        End If
        If (Not (ds.Tables("Accertatori_GiustificativoRichiesta")) Is Nothing) Then
            Me.Tables.Add(New Accertatori_GiustificativoRichiestaDataTable(ds.Tables("Accertatori_GiustificativoRichiesta")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableSP_ListaCambiGiornalieriStessoTipo = CType(Me.Tables("SP_ListaCambiGiornalieriStessoTipo"),SP_ListaCambiGiornalieriStessoTipoDataTable)
        If (Not (Me.tableSP_ListaCambiGiornalieriStessoTipo) Is Nothing) Then
            Me.tableSP_ListaCambiGiornalieriStessoTipo.InitVars
        End If
        Me.tableRichiesteCongediGarantiti = CType(Me.Tables("RichiesteCongediGarantiti"),RichiesteCongediGarantitiDataTable)
        If (Not (Me.tableRichiesteCongediGarantiti) Is Nothing) Then
            Me.tableRichiesteCongediGarantiti.InitVars
        End If
        Me.tableAccertatori_GiustificativoRichiesta = CType(Me.Tables("Accertatori_GiustificativoRichiesta"),Accertatori_GiustificativoRichiestaDataTable)
        If (Not (Me.tableAccertatori_GiustificativoRichiesta) Is Nothing) Then
            Me.tableAccertatori_GiustificativoRichiesta.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsAccertatoriASGiornaliero"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsAccertatoriASGiornaliero.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableSP_ListaCambiGiornalieriStessoTipo = New SP_ListaCambiGiornalieriStessoTipoDataTable
        Me.Tables.Add(Me.tableSP_ListaCambiGiornalieriStessoTipo)
        Me.tableRichiesteCongediGarantiti = New RichiesteCongediGarantitiDataTable
        Me.Tables.Add(Me.tableRichiesteCongediGarantiti)
        Me.tableAccertatori_GiustificativoRichiesta = New Accertatori_GiustificativoRichiestaDataTable
        Me.Tables.Add(Me.tableAccertatori_GiustificativoRichiesta)
    End Sub
    
    Private Function ShouldSerializeSP_ListaCambiGiornalieriStessoTipo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRichiesteCongediGarantiti() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccertatori_GiustificativoRichiesta() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub SP_ListaCambiGiornalieriStessoTipoRowChangeEventHandler(ByVal sender As Object, ByVal e As SP_ListaCambiGiornalieriStessoTipoRowChangeEvent)
    
    Public Delegate Sub RichiesteCongediGarantitiRowChangeEventHandler(ByVal sender As Object, ByVal e As RichiesteCongediGarantitiRowChangeEvent)
    
    Public Delegate Sub Accertatori_GiustificativoRichiestaRowChangeEventHandler(ByVal sender As Object, ByVal e As Accertatori_GiustificativoRichiestaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_ListaCambiGiornalieriStessoTipoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDESCR As DataColumn
        
        Private columntitipl As DataColumn
        
        Private columntigrua As DataColumn
        
        Private columntisass As DataColumn
        
        Private columntisrsq As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_ListaCambiGiornalieriStessoTipo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DESCRColumn As DataColumn
            Get
                Return Me.columnDESCR
            End Get
        End Property
        
        Friend ReadOnly Property titiplColumn As DataColumn
            Get
                Return Me.columntitipl
            End Get
        End Property
        
        Friend ReadOnly Property tigruaColumn As DataColumn
            Get
                Return Me.columntigrua
            End Get
        End Property
        
        Friend ReadOnly Property tisassColumn As DataColumn
            Get
                Return Me.columntisass
            End Get
        End Property
        
        Friend ReadOnly Property tisrsqColumn As DataColumn
            Get
                Return Me.columntisrsq
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_ListaCambiGiornalieriStessoTipoRow
            Get
                Return CType(Me.Rows(index),SP_ListaCambiGiornalieriStessoTipoRow)
            End Get
        End Property
        
        Public Event SP_ListaCambiGiornalieriStessoTipoRowChanged As SP_ListaCambiGiornalieriStessoTipoRowChangeEventHandler
        
        Public Event SP_ListaCambiGiornalieriStessoTipoRowChanging As SP_ListaCambiGiornalieriStessoTipoRowChangeEventHandler
        
        Public Event SP_ListaCambiGiornalieriStessoTipoRowDeleted As SP_ListaCambiGiornalieriStessoTipoRowChangeEventHandler
        
        Public Event SP_ListaCambiGiornalieriStessoTipoRowDeleting As SP_ListaCambiGiornalieriStessoTipoRowChangeEventHandler
        
        Public Overloads Sub AddSP_ListaCambiGiornalieriStessoTipoRow(ByVal row As SP_ListaCambiGiornalieriStessoTipoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_ListaCambiGiornalieriStessoTipoRow(ByVal DESCR As String, ByVal titipl As String, ByVal tigrua As String, ByVal tisass As Decimal, ByVal tisrsq As Decimal) As SP_ListaCambiGiornalieriStessoTipoRow
            Dim rowSP_ListaCambiGiornalieriStessoTipoRow As SP_ListaCambiGiornalieriStessoTipoRow = CType(Me.NewRow,SP_ListaCambiGiornalieriStessoTipoRow)
            rowSP_ListaCambiGiornalieriStessoTipoRow.ItemArray = New Object() {DESCR, titipl, tigrua, tisass, tisrsq}
            Me.Rows.Add(rowSP_ListaCambiGiornalieriStessoTipoRow)
            Return rowSP_ListaCambiGiornalieriStessoTipoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_ListaCambiGiornalieriStessoTipoDataTable = CType(MyBase.Clone,SP_ListaCambiGiornalieriStessoTipoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_ListaCambiGiornalieriStessoTipoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDESCR = Me.Columns("DESCR")
            Me.columntitipl = Me.Columns("titipl")
            Me.columntigrua = Me.Columns("tigrua")
            Me.columntisass = Me.Columns("tisass")
            Me.columntisrsq = Me.Columns("tisrsq")
        End Sub
        
        Private Sub InitClass()
            Me.columnDESCR = New DataColumn("DESCR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCR)
            Me.columntitipl = New DataColumn("titipl", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntitipl)
            Me.columntigrua = New DataColumn("tigrua", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntigrua)
            Me.columntisass = New DataColumn("tisass", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntisass)
            Me.columntisrsq = New DataColumn("tisrsq", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntisrsq)
            Me.columnDESCR.ReadOnly = true
            Me.columntitipl.AllowDBNull = false
            Me.columntigrua.AllowDBNull = false
            Me.columntisass.AllowDBNull = false
            Me.columntisrsq.AllowDBNull = false
        End Sub
        
        Public Function NewSP_ListaCambiGiornalieriStessoTipoRow() As SP_ListaCambiGiornalieriStessoTipoRow
            Return CType(Me.NewRow,SP_ListaCambiGiornalieriStessoTipoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_ListaCambiGiornalieriStessoTipoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_ListaCambiGiornalieriStessoTipoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_ListaCambiGiornalieriStessoTipoRowChangedEvent) Is Nothing) Then
                RaiseEvent SP_ListaCambiGiornalieriStessoTipoRowChanged(Me, New SP_ListaCambiGiornalieriStessoTipoRowChangeEvent(CType(e.Row,SP_ListaCambiGiornalieriStessoTipoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_ListaCambiGiornalieriStessoTipoRowChangingEvent) Is Nothing) Then
                RaiseEvent SP_ListaCambiGiornalieriStessoTipoRowChanging(Me, New SP_ListaCambiGiornalieriStessoTipoRowChangeEvent(CType(e.Row,SP_ListaCambiGiornalieriStessoTipoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_ListaCambiGiornalieriStessoTipoRowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_ListaCambiGiornalieriStessoTipoRowDeleted(Me, New SP_ListaCambiGiornalieriStessoTipoRowChangeEvent(CType(e.Row,SP_ListaCambiGiornalieriStessoTipoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_ListaCambiGiornalieriStessoTipoRowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_ListaCambiGiornalieriStessoTipoRowDeleting(Me, New SP_ListaCambiGiornalieriStessoTipoRowChangeEvent(CType(e.Row,SP_ListaCambiGiornalieriStessoTipoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_ListaCambiGiornalieriStessoTipoRow(ByVal row As SP_ListaCambiGiornalieriStessoTipoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_ListaCambiGiornalieriStessoTipoRow
        Inherits DataRow
        
        Private tableSP_ListaCambiGiornalieriStessoTipo As SP_ListaCambiGiornalieriStessoTipoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_ListaCambiGiornalieriStessoTipo = CType(Me.Table,SP_ListaCambiGiornalieriStessoTipoDataTable)
        End Sub
        
        Public Property DESCR As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_ListaCambiGiornalieriStessoTipo.DESCRColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_ListaCambiGiornalieriStessoTipo.DESCRColumn) = value
            End Set
        End Property
        
        Public Property titipl As String
            Get
                Return CType(Me(Me.tableSP_ListaCambiGiornalieriStessoTipo.titiplColumn),String)
            End Get
            Set
                Me(Me.tableSP_ListaCambiGiornalieriStessoTipo.titiplColumn) = value
            End Set
        End Property
        
        Public Property tigrua As String
            Get
                Return CType(Me(Me.tableSP_ListaCambiGiornalieriStessoTipo.tigruaColumn),String)
            End Get
            Set
                Me(Me.tableSP_ListaCambiGiornalieriStessoTipo.tigruaColumn) = value
            End Set
        End Property
        
        Public Property tisass As Decimal
            Get
                Return CType(Me(Me.tableSP_ListaCambiGiornalieriStessoTipo.tisassColumn),Decimal)
            End Get
            Set
                Me(Me.tableSP_ListaCambiGiornalieriStessoTipo.tisassColumn) = value
            End Set
        End Property
        
        Public Property tisrsq As Decimal
            Get
                Return CType(Me(Me.tableSP_ListaCambiGiornalieriStessoTipo.tisrsqColumn),Decimal)
            End Get
            Set
                Me(Me.tableSP_ListaCambiGiornalieriStessoTipo.tisrsqColumn) = value
            End Set
        End Property
        
        Public Function IsDESCRNull() As Boolean
            Return Me.IsNull(Me.tableSP_ListaCambiGiornalieriStessoTipo.DESCRColumn)
        End Function
        
        Public Sub SetDESCRNull()
            Me(Me.tableSP_ListaCambiGiornalieriStessoTipo.DESCRColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_ListaCambiGiornalieriStessoTipoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_ListaCambiGiornalieriStessoTipoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_ListaCambiGiornalieriStessoTipoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_ListaCambiGiornalieriStessoTipoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCongediGarantitiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdRichiesta As DataColumn
        
        Private columnIdAccertatore As DataColumn
        
        Private columnDalGiorno As DataColumn
        
        Private columnAlGiorno As DataColumn
        
        Private columnOrdine As DataColumn
        
        Private columnStatoRichiesta As DataColumn
        
        Private columnts As DataColumn
        
        Friend Sub New()
            MyBase.New("RichiesteCongediGarantiti")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdRichiestaColumn As DataColumn
            Get
                Return Me.columnIdRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreColumn As DataColumn
            Get
                Return Me.columnIdAccertatore
            End Get
        End Property
        
        Friend ReadOnly Property DalGiornoColumn As DataColumn
            Get
                Return Me.columnDalGiorno
            End Get
        End Property
        
        Friend ReadOnly Property AlGiornoColumn As DataColumn
            Get
                Return Me.columnAlGiorno
            End Get
        End Property
        
        Friend ReadOnly Property OrdineColumn As DataColumn
            Get
                Return Me.columnOrdine
            End Get
        End Property
        
        Friend ReadOnly Property StatoRichiestaColumn As DataColumn
            Get
                Return Me.columnStatoRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property tsColumn As DataColumn
            Get
                Return Me.columnts
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RichiesteCongediGarantitiRow
            Get
                Return CType(Me.Rows(index),RichiesteCongediGarantitiRow)
            End Get
        End Property
        
        Public Event RichiesteCongediGarantitiRowChanged As RichiesteCongediGarantitiRowChangeEventHandler
        
        Public Event RichiesteCongediGarantitiRowChanging As RichiesteCongediGarantitiRowChangeEventHandler
        
        Public Event RichiesteCongediGarantitiRowDeleted As RichiesteCongediGarantitiRowChangeEventHandler
        
        Public Event RichiesteCongediGarantitiRowDeleting As RichiesteCongediGarantitiRowChangeEventHandler
        
        Public Overloads Sub AddRichiesteCongediGarantitiRow(ByVal row As RichiesteCongediGarantitiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRichiesteCongediGarantitiRow(ByVal IdRichiesta As System.Guid, ByVal IdAccertatore As Integer, ByVal DalGiorno As Date, ByVal AlGiorno As Date, ByVal Ordine As Integer, ByVal StatoRichiesta As String, ByVal ts As Date) As RichiesteCongediGarantitiRow
            Dim rowRichiesteCongediGarantitiRow As RichiesteCongediGarantitiRow = CType(Me.NewRow,RichiesteCongediGarantitiRow)
            rowRichiesteCongediGarantitiRow.ItemArray = New Object() {IdRichiesta, IdAccertatore, DalGiorno, AlGiorno, Ordine, StatoRichiesta, ts}
            Me.Rows.Add(rowRichiesteCongediGarantitiRow)
            Return rowRichiesteCongediGarantitiRow
        End Function
        
        Public Function FindByIdRichiesta(ByVal IdRichiesta As System.Guid) As RichiesteCongediGarantitiRow
            Return CType(Me.Rows.Find(New Object() {IdRichiesta}),RichiesteCongediGarantitiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RichiesteCongediGarantitiDataTable = CType(MyBase.Clone,RichiesteCongediGarantitiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RichiesteCongediGarantitiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdRichiesta = Me.Columns("IdRichiesta")
            Me.columnIdAccertatore = Me.Columns("IdAccertatore")
            Me.columnDalGiorno = Me.Columns("DalGiorno")
            Me.columnAlGiorno = Me.Columns("AlGiorno")
            Me.columnOrdine = Me.Columns("Ordine")
            Me.columnStatoRichiesta = Me.Columns("StatoRichiesta")
            Me.columnts = Me.Columns("ts")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdRichiesta = New DataColumn("IdRichiesta", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdRichiesta)
            Me.columnIdAccertatore = New DataColumn("IdAccertatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatore)
            Me.columnDalGiorno = New DataColumn("DalGiorno", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalGiorno)
            Me.columnAlGiorno = New DataColumn("AlGiorno", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlGiorno)
            Me.columnOrdine = New DataColumn("Ordine", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdine)
            Me.columnStatoRichiesta = New DataColumn("StatoRichiesta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoRichiesta)
            Me.columnts = New DataColumn("ts", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnts)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdRichiesta}, true))
            Me.columnIdRichiesta.AllowDBNull = false
            Me.columnIdRichiesta.Unique = true
            Me.columnOrdine.ReadOnly = true
            Me.columnStatoRichiesta.ReadOnly = true
        End Sub
        
        Public Function NewRichiesteCongediGarantitiRow() As RichiesteCongediGarantitiRow
            Return CType(Me.NewRow,RichiesteCongediGarantitiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RichiesteCongediGarantitiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RichiesteCongediGarantitiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RichiesteCongediGarantitiRowChangedEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediGarantitiRowChanged(Me, New RichiesteCongediGarantitiRowChangeEvent(CType(e.Row,RichiesteCongediGarantitiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RichiesteCongediGarantitiRowChangingEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediGarantitiRowChanging(Me, New RichiesteCongediGarantitiRowChangeEvent(CType(e.Row,RichiesteCongediGarantitiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RichiesteCongediGarantitiRowDeletedEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediGarantitiRowDeleted(Me, New RichiesteCongediGarantitiRowChangeEvent(CType(e.Row,RichiesteCongediGarantitiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RichiesteCongediGarantitiRowDeletingEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediGarantitiRowDeleting(Me, New RichiesteCongediGarantitiRowChangeEvent(CType(e.Row,RichiesteCongediGarantitiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRichiesteCongediGarantitiRow(ByVal row As RichiesteCongediGarantitiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCongediGarantitiRow
        Inherits DataRow
        
        Private tableRichiesteCongediGarantiti As RichiesteCongediGarantitiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRichiesteCongediGarantiti = CType(Me.Table,RichiesteCongediGarantitiDataTable)
        End Sub
        
        Public Property IdRichiesta As System.Guid
            Get
                Return CType(Me(Me.tableRichiesteCongediGarantiti.IdRichiestaColumn),System.Guid)
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.IdRichiestaColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.IdAccertatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.IdAccertatoreColumn) = value
            End Set
        End Property
        
        Public Property DalGiorno As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.DalGiornoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.DalGiornoColumn) = value
            End Set
        End Property
        
        Public Property AlGiorno As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.AlGiornoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.AlGiornoColumn) = value
            End Set
        End Property
        
        Public Property Ordine As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.OrdineColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.OrdineColumn) = value
            End Set
        End Property
        
        Public Property StatoRichiesta As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.StatoRichiestaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.StatoRichiestaColumn) = value
            End Set
        End Property
        
        Public Property ts As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.tsColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.tsColumn) = value
            End Set
        End Property
        
        Public Function IsIdAccertatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.IdAccertatoreColumn)
        End Function
        
        Public Sub SetIdAccertatoreNull()
            Me(Me.tableRichiesteCongediGarantiti.IdAccertatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalGiornoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.DalGiornoColumn)
        End Function
        
        Public Sub SetDalGiornoNull()
            Me(Me.tableRichiesteCongediGarantiti.DalGiornoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlGiornoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.AlGiornoColumn)
        End Function
        
        Public Sub SetAlGiornoNull()
            Me(Me.tableRichiesteCongediGarantiti.AlGiornoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdineNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.OrdineColumn)
        End Function
        
        Public Sub SetOrdineNull()
            Me(Me.tableRichiesteCongediGarantiti.OrdineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoRichiestaNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.StatoRichiestaColumn)
        End Function
        
        Public Sub SetStatoRichiestaNull()
            Me(Me.tableRichiesteCongediGarantiti.StatoRichiestaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstsNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.tsColumn)
        End Function
        
        Public Sub SettsNull()
            Me(Me.tableRichiesteCongediGarantiti.tsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCongediGarantitiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RichiesteCongediGarantitiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RichiesteCongediGarantitiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RichiesteCongediGarantitiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_GiustificativoRichiestaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApprovatore As DataColumn
        
        Private columnCognomeNome As DataColumn
        
        Private columnID As DataColumn
        
        Private columnAccertatoreId As DataColumn
        
        Private columnORDINE As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnAccertatori_GiustificativoCausaleId As DataColumn
        
        Private columnDataDa As DataColumn
        
        Private columnDataA As DataColumn
        
        Private columnOraDa As DataColumn
        
        Private columnOraA As DataColumn
        
        Private columnStatoGiustificativo As DataColumn
        
        Private columnDataRichiesta As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnApprovatoDa As DataColumn
        
        Private columnCreatedOn As DataColumn
        
        Private columnModifiedOn As DataColumn
        
        Private columnCreatedBy As DataColumn
        
        Private columnModifiedBy As DataColumn
        
        Private columnFrazionato As DataColumn
        
        Private columnDefaultApprovato As DataColumn
        
        Private columnPreavvisoGG As DataColumn
        
        Private columnNrMaxGG As DataColumn
        
        Private columnCausale As DataColumn
        
        Friend Sub New()
            MyBase.New("Accertatori_GiustificativoRichiesta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoreColumn As DataColumn
            Get
                Return Me.columnApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeColumn As DataColumn
            Get
                Return Me.columnCognomeNome
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property AccertatoreIdColumn As DataColumn
            Get
                Return Me.columnAccertatoreId
            End Get
        End Property
        
        Friend ReadOnly Property ORDINEColumn As DataColumn
            Get
                Return Me.columnORDINE
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property Accertatori_GiustificativoCausaleIdColumn As DataColumn
            Get
                Return Me.columnAccertatori_GiustificativoCausaleId
            End Get
        End Property
        
        Friend ReadOnly Property DataDaColumn As DataColumn
            Get
                Return Me.columnDataDa
            End Get
        End Property
        
        Friend ReadOnly Property DataAColumn As DataColumn
            Get
                Return Me.columnDataA
            End Get
        End Property
        
        Friend ReadOnly Property OraDaColumn As DataColumn
            Get
                Return Me.columnOraDa
            End Get
        End Property
        
        Friend ReadOnly Property OraAColumn As DataColumn
            Get
                Return Me.columnOraA
            End Get
        End Property
        
        Friend ReadOnly Property StatoGiustificativoColumn As DataColumn
            Get
                Return Me.columnStatoGiustificativo
            End Get
        End Property
        
        Friend ReadOnly Property DataRichiestaColumn As DataColumn
            Get
                Return Me.columnDataRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoDaColumn As DataColumn
            Get
                Return Me.columnApprovatoDa
            End Get
        End Property
        
        Friend ReadOnly Property CreatedOnColumn As DataColumn
            Get
                Return Me.columnCreatedOn
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedOnColumn As DataColumn
            Get
                Return Me.columnModifiedOn
            End Get
        End Property
        
        Friend ReadOnly Property CreatedByColumn As DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedByColumn As DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        Friend ReadOnly Property FrazionatoColumn As DataColumn
            Get
                Return Me.columnFrazionato
            End Get
        End Property
        
        Friend ReadOnly Property DefaultApprovatoColumn As DataColumn
            Get
                Return Me.columnDefaultApprovato
            End Get
        End Property
        
        Friend ReadOnly Property PreavvisoGGColumn As DataColumn
            Get
                Return Me.columnPreavvisoGG
            End Get
        End Property
        
        Friend ReadOnly Property NrMaxGGColumn As DataColumn
            Get
                Return Me.columnNrMaxGG
            End Get
        End Property
        
        Friend ReadOnly Property CausaleColumn As DataColumn
            Get
                Return Me.columnCausale
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Accertatori_GiustificativoRichiestaRow
            Get
                Return CType(Me.Rows(index),Accertatori_GiustificativoRichiestaRow)
            End Get
        End Property
        
        Public Event Accertatori_GiustificativoRichiestaRowChanged As Accertatori_GiustificativoRichiestaRowChangeEventHandler
        
        Public Event Accertatori_GiustificativoRichiestaRowChanging As Accertatori_GiustificativoRichiestaRowChangeEventHandler
        
        Public Event Accertatori_GiustificativoRichiestaRowDeleted As Accertatori_GiustificativoRichiestaRowChangeEventHandler
        
        Public Event Accertatori_GiustificativoRichiestaRowDeleting As Accertatori_GiustificativoRichiestaRowChangeEventHandler
        
        Public Overloads Sub AddAccertatori_GiustificativoRichiestaRow(ByVal row As Accertatori_GiustificativoRichiestaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatori_GiustificativoRichiestaRow( _
                    ByVal Approvatore As String,  _
                    ByVal CognomeNome As String,  _
                    ByVal ID As System.Guid,  _
                    ByVal AccertatoreId As Integer,  _
                    ByVal ORDINE As String,  _
                    ByVal StatoApprovazione As String,  _
                    ByVal Accertatori_GiustificativoCausaleId As System.Guid,  _
                    ByVal DataDa As Date,  _
                    ByVal DataA As Date,  _
                    ByVal OraDa As Date,  _
                    ByVal OraA As Date,  _
                    ByVal StatoGiustificativo As Integer,  _
                    ByVal DataRichiesta As Date,  _
                    ByVal DataApprovazione As Date,  _
                    ByVal ApprovatoDa As Boolean,  _
                    ByVal CreatedOn As Date,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal CreatedBy As String,  _
                    ByVal ModifiedBy As String,  _
                    ByVal Frazionato As Boolean,  _
                    ByVal DefaultApprovato As Boolean,  _
                    ByVal PreavvisoGG As Integer,  _
                    ByVal NrMaxGG As Integer,  _
                    ByVal Causale As String) As Accertatori_GiustificativoRichiestaRow
            Dim rowAccertatori_GiustificativoRichiestaRow As Accertatori_GiustificativoRichiestaRow = CType(Me.NewRow,Accertatori_GiustificativoRichiestaRow)
            rowAccertatori_GiustificativoRichiestaRow.ItemArray = New Object() {Approvatore, CognomeNome, ID, AccertatoreId, ORDINE, StatoApprovazione, Accertatori_GiustificativoCausaleId, DataDa, DataA, OraDa, OraA, StatoGiustificativo, DataRichiesta, DataApprovazione, ApprovatoDa, CreatedOn, ModifiedOn, CreatedBy, ModifiedBy, Frazionato, DefaultApprovato, PreavvisoGG, NrMaxGG, Causale}
            Me.Rows.Add(rowAccertatori_GiustificativoRichiestaRow)
            Return rowAccertatori_GiustificativoRichiestaRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Accertatori_GiustificativoRichiestaDataTable = CType(MyBase.Clone,Accertatori_GiustificativoRichiestaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Accertatori_GiustificativoRichiestaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApprovatore = Me.Columns("Approvatore")
            Me.columnCognomeNome = Me.Columns("CognomeNome")
            Me.columnID = Me.Columns("ID")
            Me.columnAccertatoreId = Me.Columns("AccertatoreId")
            Me.columnORDINE = Me.Columns("ORDINE")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnAccertatori_GiustificativoCausaleId = Me.Columns("Accertatori_GiustificativoCausaleId")
            Me.columnDataDa = Me.Columns("DataDa")
            Me.columnDataA = Me.Columns("DataA")
            Me.columnOraDa = Me.Columns("OraDa")
            Me.columnOraA = Me.Columns("OraA")
            Me.columnStatoGiustificativo = Me.Columns("StatoGiustificativo")
            Me.columnDataRichiesta = Me.Columns("DataRichiesta")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnApprovatoDa = Me.Columns("ApprovatoDa")
            Me.columnCreatedOn = Me.Columns("CreatedOn")
            Me.columnModifiedOn = Me.Columns("ModifiedOn")
            Me.columnCreatedBy = Me.Columns("CreatedBy")
            Me.columnModifiedBy = Me.Columns("ModifiedBy")
            Me.columnFrazionato = Me.Columns("Frazionato")
            Me.columnDefaultApprovato = Me.Columns("DefaultApprovato")
            Me.columnPreavvisoGG = Me.Columns("PreavvisoGG")
            Me.columnNrMaxGG = Me.Columns("NrMaxGG")
            Me.columnCausale = Me.Columns("Causale")
        End Sub
        
        Private Sub InitClass()
            Me.columnApprovatore = New DataColumn("Approvatore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatore)
            Me.columnCognomeNome = New DataColumn("CognomeNome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNome)
            Me.columnID = New DataColumn("ID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnAccertatoreId = New DataColumn("AccertatoreId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccertatoreId)
            Me.columnORDINE = New DataColumn("ORDINE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnORDINE)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnAccertatori_GiustificativoCausaleId = New DataColumn("Accertatori_GiustificativoCausaleId", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccertatori_GiustificativoCausaleId)
            Me.columnDataDa = New DataColumn("DataDa", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataDa)
            Me.columnDataA = New DataColumn("DataA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataA)
            Me.columnOraDa = New DataColumn("OraDa", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraDa)
            Me.columnOraA = New DataColumn("OraA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraA)
            Me.columnStatoGiustificativo = New DataColumn("StatoGiustificativo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoGiustificativo)
            Me.columnDataRichiesta = New DataColumn("DataRichiesta", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataRichiesta)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnApprovatoDa = New DataColumn("ApprovatoDa", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatoDa)
            Me.columnCreatedOn = New DataColumn("CreatedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedOn)
            Me.columnModifiedOn = New DataColumn("ModifiedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedOn)
            Me.columnCreatedBy = New DataColumn("CreatedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedBy)
            Me.columnModifiedBy = New DataColumn("ModifiedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedBy)
            Me.columnFrazionato = New DataColumn("Frazionato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrazionato)
            Me.columnDefaultApprovato = New DataColumn("DefaultApprovato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDefaultApprovato)
            Me.columnPreavvisoGG = New DataColumn("PreavvisoGG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreavvisoGG)
            Me.columnNrMaxGG = New DataColumn("NrMaxGG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNrMaxGG)
            Me.columnCausale = New DataColumn("Causale", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCausale)
            Me.columnApprovatore.ReadOnly = true
            Me.columnCognomeNome.ReadOnly = true
            Me.columnID.AllowDBNull = false
            Me.columnAccertatoreId.AllowDBNull = false
            Me.columnORDINE.ReadOnly = true
            Me.columnStatoApprovazione.ReadOnly = true
        End Sub
        
        Public Function NewAccertatori_GiustificativoRichiestaRow() As Accertatori_GiustificativoRichiestaRow
            Return CType(Me.NewRow,Accertatori_GiustificativoRichiestaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Accertatori_GiustificativoRichiestaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Accertatori_GiustificativoRichiestaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Accertatori_GiustificativoRichiestaRowChangedEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoRichiestaRowChanged(Me, New Accertatori_GiustificativoRichiestaRowChangeEvent(CType(e.Row,Accertatori_GiustificativoRichiestaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Accertatori_GiustificativoRichiestaRowChangingEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoRichiestaRowChanging(Me, New Accertatori_GiustificativoRichiestaRowChangeEvent(CType(e.Row,Accertatori_GiustificativoRichiestaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Accertatori_GiustificativoRichiestaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoRichiestaRowDeleted(Me, New Accertatori_GiustificativoRichiestaRowChangeEvent(CType(e.Row,Accertatori_GiustificativoRichiestaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Accertatori_GiustificativoRichiestaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoRichiestaRowDeleting(Me, New Accertatori_GiustificativoRichiestaRowChangeEvent(CType(e.Row,Accertatori_GiustificativoRichiestaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatori_GiustificativoRichiestaRow(ByVal row As Accertatori_GiustificativoRichiestaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_GiustificativoRichiestaRow
        Inherits DataRow
        
        Private tableAccertatori_GiustificativoRichiesta As Accertatori_GiustificativoRichiestaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatori_GiustificativoRichiesta = CType(Me.Table,Accertatori_GiustificativoRichiestaDataTable)
        End Sub
        
        Public Property Approvatore As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property CognomeNome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.CognomeNomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.CognomeNomeColumn) = value
            End Set
        End Property
        
        Public Property ID As System.Guid
            Get
                Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.IDColumn),System.Guid)
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.IDColumn) = value
            End Set
        End Property
        
        Public Property AccertatoreId As Integer
            Get
                Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.AccertatoreIdColumn),Integer)
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.AccertatoreIdColumn) = value
            End Set
        End Property
        
        Public Property ORDINE As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ORDINEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ORDINEColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.StatoApprovazioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property Accertatori_GiustificativoCausaleId As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.Accertatori_GiustificativoCausaleIdColumn),System.Guid)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.Accertatori_GiustificativoCausaleIdColumn) = value
            End Set
        End Property
        
        Public Property DataDa As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DataDaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DataDaColumn) = value
            End Set
        End Property
        
        Public Property DataA As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DataAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DataAColumn) = value
            End Set
        End Property
        
        Public Property OraDa As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.OraDaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.OraDaColumn) = value
            End Set
        End Property
        
        Public Property OraA As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.OraAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.OraAColumn) = value
            End Set
        End Property
        
        Public Property StatoGiustificativo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.StatoGiustificativoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.StatoGiustificativoColumn) = value
            End Set
        End Property
        
        Public Property DataRichiesta As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DataRichiestaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DataRichiestaColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property ApprovatoDa As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoDaColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoDaColumn) = value
            End Set
        End Property
        
        Public Property CreatedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedOnColumn) = value
            End Set
        End Property
        
        Public Property ModifiedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedOnColumn) = value
            End Set
        End Property
        
        Public Property CreatedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedByColumn) = value
            End Set
        End Property
        
        Public Property ModifiedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedByColumn) = value
            End Set
        End Property
        
        Public Property Frazionato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.FrazionatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.FrazionatoColumn) = value
            End Set
        End Property
        
        Public Property DefaultApprovato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DefaultApprovatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DefaultApprovatoColumn) = value
            End Set
        End Property
        
        Public Property PreavvisoGG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.PreavvisoGGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.PreavvisoGGColumn) = value
            End Set
        End Property
        
        Public Property NrMaxGG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.NrMaxGGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.NrMaxGGColumn) = value
            End Set
        End Property
        
        Public Property Causale As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.CausaleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.CausaleColumn) = value
            End Set
        End Property
        
        Public Function IsApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoreColumn)
        End Function
        
        Public Sub SetApprovatoreNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.CognomeNomeColumn)
        End Function
        
        Public Sub SetCognomeNomeNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.CognomeNomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsORDINENull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ORDINEColumn)
        End Function
        
        Public Sub SetORDINENull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ORDINEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAccertatori_GiustificativoCausaleIdNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.Accertatori_GiustificativoCausaleIdColumn)
        End Function
        
        Public Sub SetAccertatori_GiustificativoCausaleIdNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.Accertatori_GiustificativoCausaleIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DataDaColumn)
        End Function
        
        Public Sub SetDataDaNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DataDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataANull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DataAColumn)
        End Function
        
        Public Sub SetDataANull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DataAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.OraDaColumn)
        End Function
        
        Public Sub SetOraDaNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.OraDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraANull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.OraAColumn)
        End Function
        
        Public Sub SetOraANull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.OraAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoGiustificativoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.StatoGiustificativoColumn)
        End Function
        
        Public Sub SetStatoGiustificativoNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.StatoGiustificativoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataRichiestaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DataRichiestaColumn)
        End Function
        
        Public Sub SetDataRichiestaNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DataRichiestaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApprovatoDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoDaColumn)
        End Function
        
        Public Sub SetApprovatoDaNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.CreatedOnColumn)
        End Function
        
        Public Sub SetCreatedOnNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ModifiedOnColumn)
        End Function
        
        Public Sub SetModifiedOnNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.CreatedByColumn)
        End Function
        
        Public Sub SetCreatedByNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ModifiedByColumn)
        End Function
        
        Public Sub SetModifiedByNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFrazionatoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.FrazionatoColumn)
        End Function
        
        Public Sub SetFrazionatoNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.FrazionatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDefaultApprovatoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DefaultApprovatoColumn)
        End Function
        
        Public Sub SetDefaultApprovatoNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DefaultApprovatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreavvisoGGNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.PreavvisoGGColumn)
        End Function
        
        Public Sub SetPreavvisoGGNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.PreavvisoGGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNrMaxGGNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.NrMaxGGColumn)
        End Function
        
        Public Sub SetNrMaxGGNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.NrMaxGGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCausaleNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.CausaleColumn)
        End Function
        
        Public Sub SetCausaleNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.CausaleColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_GiustificativoRichiestaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Accertatori_GiustificativoRichiestaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Accertatori_GiustificativoRichiestaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Accertatori_GiustificativoRichiestaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
