'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsPSostaGSpeciali
    Inherits DataSet
    
    Private tablePSostaEventoGG As PSostaEventoGGDataTable
    
    Private tablePSostaGiorni As PSostaGiorniDataTable
    
    Private tablePSostaGSpeciali As PSostaGSpecialiDataTable
    
    Private tablePSostaProvvGG As PSostaProvvGGDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PSostaEventoGG")) Is Nothing) Then
                Me.Tables.Add(New PSostaEventoGGDataTable(ds.Tables("PSostaEventoGG")))
            End If
            If (Not (ds.Tables("PSostaGiorni")) Is Nothing) Then
                Me.Tables.Add(New PSostaGiorniDataTable(ds.Tables("PSostaGiorni")))
            End If
            If (Not (ds.Tables("PSostaGSpeciali")) Is Nothing) Then
                Me.Tables.Add(New PSostaGSpecialiDataTable(ds.Tables("PSostaGSpeciali")))
            End If
            If (Not (ds.Tables("PSostaProvvGG")) Is Nothing) Then
                Me.Tables.Add(New PSostaProvvGGDataTable(ds.Tables("PSostaProvvGG")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PSostaEventoGG As PSostaEventoGGDataTable
        Get
            Return Me.tablePSostaEventoGG
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PSostaGiorni As PSostaGiorniDataTable
        Get
            Return Me.tablePSostaGiorni
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PSostaGSpeciali As PSostaGSpecialiDataTable
        Get
            Return Me.tablePSostaGSpeciali
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PSostaProvvGG As PSostaProvvGGDataTable
        Get
            Return Me.tablePSostaProvvGG
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsPSostaGSpeciali = CType(MyBase.Clone,DsPSostaGSpeciali)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("PSostaEventoGG")) Is Nothing) Then
            Me.Tables.Add(New PSostaEventoGGDataTable(ds.Tables("PSostaEventoGG")))
        End If
        If (Not (ds.Tables("PSostaGiorni")) Is Nothing) Then
            Me.Tables.Add(New PSostaGiorniDataTable(ds.Tables("PSostaGiorni")))
        End If
        If (Not (ds.Tables("PSostaGSpeciali")) Is Nothing) Then
            Me.Tables.Add(New PSostaGSpecialiDataTable(ds.Tables("PSostaGSpeciali")))
        End If
        If (Not (ds.Tables("PSostaProvvGG")) Is Nothing) Then
            Me.Tables.Add(New PSostaProvvGGDataTable(ds.Tables("PSostaProvvGG")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePSostaEventoGG = CType(Me.Tables("PSostaEventoGG"),PSostaEventoGGDataTable)
        If (Not (Me.tablePSostaEventoGG) Is Nothing) Then
            Me.tablePSostaEventoGG.InitVars
        End If
        Me.tablePSostaGiorni = CType(Me.Tables("PSostaGiorni"),PSostaGiorniDataTable)
        If (Not (Me.tablePSostaGiorni) Is Nothing) Then
            Me.tablePSostaGiorni.InitVars
        End If
        Me.tablePSostaGSpeciali = CType(Me.Tables("PSostaGSpeciali"),PSostaGSpecialiDataTable)
        If (Not (Me.tablePSostaGSpeciali) Is Nothing) Then
            Me.tablePSostaGSpeciali.InitVars
        End If
        Me.tablePSostaProvvGG = CType(Me.Tables("PSostaProvvGG"),PSostaProvvGGDataTable)
        If (Not (Me.tablePSostaProvvGG) Is Nothing) Then
            Me.tablePSostaProvvGG.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsPSostaGSpeciali"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsPSostaGSpeciali.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePSostaEventoGG = New PSostaEventoGGDataTable
        Me.Tables.Add(Me.tablePSostaEventoGG)
        Me.tablePSostaGiorni = New PSostaGiorniDataTable
        Me.Tables.Add(Me.tablePSostaGiorni)
        Me.tablePSostaGSpeciali = New PSostaGSpecialiDataTable
        Me.Tables.Add(Me.tablePSostaGSpeciali)
        Me.tablePSostaProvvGG = New PSostaProvvGGDataTable
        Me.Tables.Add(Me.tablePSostaProvvGG)
    End Sub
    
    Private Function ShouldSerializePSostaEventoGG() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePSostaGiorni() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePSostaGSpeciali() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePSostaProvvGG() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PSostaEventoGGRowChangeEventHandler(ByVal sender As Object, ByVal e As PSostaEventoGGRowChangeEvent)
    
    Public Delegate Sub PSostaGiorniRowChangeEventHandler(ByVal sender As Object, ByVal e As PSostaGiorniRowChangeEvent)
    
    Public Delegate Sub PSostaGSpecialiRowChangeEventHandler(ByVal sender As Object, ByVal e As PSostaGSpecialiRowChangeEvent)
    
    Public Delegate Sub PSostaProvvGGRowChangeEventHandler(ByVal sender As Object, ByVal e As PSostaProvvGGRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PSostaEventoGGDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnDescrizione As DataColumn
        
        Friend Sub New()
            MyBase.New("PSostaEventoGG")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneColumn As DataColumn
            Get
                Return Me.columnDescrizione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PSostaEventoGGRow
            Get
                Return CType(Me.Rows(index),PSostaEventoGGRow)
            End Get
        End Property
        
        Public Event PSostaEventoGGRowChanged As PSostaEventoGGRowChangeEventHandler
        
        Public Event PSostaEventoGGRowChanging As PSostaEventoGGRowChangeEventHandler
        
        Public Event PSostaEventoGGRowDeleted As PSostaEventoGGRowChangeEventHandler
        
        Public Event PSostaEventoGGRowDeleting As PSostaEventoGGRowChangeEventHandler
        
        Public Overloads Sub AddPSostaEventoGGRow(ByVal row As PSostaEventoGGRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPSostaEventoGGRow(ByVal Id As Integer, ByVal Descrizione As String) As PSostaEventoGGRow
            Dim rowPSostaEventoGGRow As PSostaEventoGGRow = CType(Me.NewRow,PSostaEventoGGRow)
            rowPSostaEventoGGRow.ItemArray = New Object() {Id, Descrizione}
            Me.Rows.Add(rowPSostaEventoGGRow)
            Return rowPSostaEventoGGRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As PSostaEventoGGRow
            Return CType(Me.Rows.Find(New Object() {Id}),PSostaEventoGGRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PSostaEventoGGDataTable = CType(MyBase.Clone,PSostaEventoGGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PSostaEventoGGDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnDescrizione = Me.Columns("Descrizione")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnDescrizione = New DataColumn("Descrizione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewPSostaEventoGGRow() As PSostaEventoGGRow
            Return CType(Me.NewRow,PSostaEventoGGRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PSostaEventoGGRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PSostaEventoGGRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PSostaEventoGGRowChangedEvent) Is Nothing) Then
                RaiseEvent PSostaEventoGGRowChanged(Me, New PSostaEventoGGRowChangeEvent(CType(e.Row,PSostaEventoGGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PSostaEventoGGRowChangingEvent) Is Nothing) Then
                RaiseEvent PSostaEventoGGRowChanging(Me, New PSostaEventoGGRowChangeEvent(CType(e.Row,PSostaEventoGGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PSostaEventoGGRowDeletedEvent) Is Nothing) Then
                RaiseEvent PSostaEventoGGRowDeleted(Me, New PSostaEventoGGRowChangeEvent(CType(e.Row,PSostaEventoGGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PSostaEventoGGRowDeletingEvent) Is Nothing) Then
                RaiseEvent PSostaEventoGGRowDeleting(Me, New PSostaEventoGGRowChangeEvent(CType(e.Row,PSostaEventoGGRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePSostaEventoGGRow(ByVal row As PSostaEventoGGRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PSostaEventoGGRow
        Inherits DataRow
        
        Private tablePSostaEventoGG As PSostaEventoGGDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePSostaEventoGG = CType(Me.Table,PSostaEventoGGDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tablePSostaEventoGG.IdColumn),Integer)
            End Get
            Set
                Me(Me.tablePSostaEventoGG.IdColumn) = value
            End Set
        End Property
        
        Public Property Descrizione As String
            Get
                Try 
                    Return CType(Me(Me.tablePSostaEventoGG.DescrizioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePSostaEventoGG.DescrizioneColumn) = value
            End Set
        End Property
        
        Public Function IsDescrizioneNull() As Boolean
            Return Me.IsNull(Me.tablePSostaEventoGG.DescrizioneColumn)
        End Function
        
        Public Sub SetDescrizioneNull()
            Me(Me.tablePSostaEventoGG.DescrizioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PSostaEventoGGRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PSostaEventoGGRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PSostaEventoGGRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PSostaEventoGGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PSostaGiorniDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnData As DataColumn
        
        Private columnIdTipoEvento As DataColumn
        
        Private columnIdTipoProvv As DataColumn
        
        Private columnIdEvento As DataColumn
        
        Private columnDescrEvento As DataColumn
        
        Private columnIdProvv As DataColumn
        
        Private columnDescrProvv As DataColumn
        
        Friend Sub New()
            MyBase.New("PSostaGiorni")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property IdTipoEventoColumn As DataColumn
            Get
                Return Me.columnIdTipoEvento
            End Get
        End Property
        
        Friend ReadOnly Property IdTipoProvvColumn As DataColumn
            Get
                Return Me.columnIdTipoProvv
            End Get
        End Property
        
        Friend ReadOnly Property IdEventoColumn As DataColumn
            Get
                Return Me.columnIdEvento
            End Get
        End Property
        
        Friend ReadOnly Property DescrEventoColumn As DataColumn
            Get
                Return Me.columnDescrEvento
            End Get
        End Property
        
        Friend ReadOnly Property IdProvvColumn As DataColumn
            Get
                Return Me.columnIdProvv
            End Get
        End Property
        
        Friend ReadOnly Property DescrProvvColumn As DataColumn
            Get
                Return Me.columnDescrProvv
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PSostaGiorniRow
            Get
                Return CType(Me.Rows(index),PSostaGiorniRow)
            End Get
        End Property
        
        Public Event PSostaGiorniRowChanged As PSostaGiorniRowChangeEventHandler
        
        Public Event PSostaGiorniRowChanging As PSostaGiorniRowChangeEventHandler
        
        Public Event PSostaGiorniRowDeleted As PSostaGiorniRowChangeEventHandler
        
        Public Event PSostaGiorniRowDeleting As PSostaGiorniRowChangeEventHandler
        
        Public Overloads Sub AddPSostaGiorniRow(ByVal row As PSostaGiorniRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPSostaGiorniRow(ByVal Id As System.Guid, ByVal Data As Date, ByVal IdTipoEvento As Integer, ByVal IdTipoProvv As Integer, ByVal IdEvento As Integer, ByVal DescrEvento As String, ByVal IdProvv As Integer, ByVal DescrProvv As String) As PSostaGiorniRow
            Dim rowPSostaGiorniRow As PSostaGiorniRow = CType(Me.NewRow,PSostaGiorniRow)
            rowPSostaGiorniRow.ItemArray = New Object() {Id, Data, IdTipoEvento, IdTipoProvv, IdEvento, DescrEvento, IdProvv, DescrProvv}
            Me.Rows.Add(rowPSostaGiorniRow)
            Return rowPSostaGiorniRow
        End Function
        
        Public Function FindByIdIdEventoIdProvv(ByVal Id As System.Guid, ByVal IdEvento As Integer, ByVal IdProvv As Integer) As PSostaGiorniRow
            Return CType(Me.Rows.Find(New Object() {Id, IdEvento, IdProvv}),PSostaGiorniRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PSostaGiorniDataTable = CType(MyBase.Clone,PSostaGiorniDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PSostaGiorniDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnData = Me.Columns("Data")
            Me.columnIdTipoEvento = Me.Columns("IdTipoEvento")
            Me.columnIdTipoProvv = Me.Columns("IdTipoProvv")
            Me.columnIdEvento = Me.Columns("IdEvento")
            Me.columnDescrEvento = Me.Columns("DescrEvento")
            Me.columnIdProvv = Me.Columns("IdProvv")
            Me.columnDescrProvv = Me.Columns("DescrProvv")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnIdTipoEvento = New DataColumn("IdTipoEvento", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdTipoEvento)
            Me.columnIdTipoProvv = New DataColumn("IdTipoProvv", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdTipoProvv)
            Me.columnIdEvento = New DataColumn("IdEvento", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdEvento)
            Me.columnDescrEvento = New DataColumn("DescrEvento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrEvento)
            Me.columnIdProvv = New DataColumn("IdProvv", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdProvv)
            Me.columnDescrProvv = New DataColumn("DescrProvv", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrProvv)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId, Me.columnIdEvento, Me.columnIdProvv}, true))
            Me.columnId.AllowDBNull = false
            Me.columnIdEvento.AllowDBNull = false
            Me.columnIdProvv.AllowDBNull = false
        End Sub
        
        Public Function NewPSostaGiorniRow() As PSostaGiorniRow
            Return CType(Me.NewRow,PSostaGiorniRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PSostaGiorniRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PSostaGiorniRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PSostaGiorniRowChangedEvent) Is Nothing) Then
                RaiseEvent PSostaGiorniRowChanged(Me, New PSostaGiorniRowChangeEvent(CType(e.Row,PSostaGiorniRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PSostaGiorniRowChangingEvent) Is Nothing) Then
                RaiseEvent PSostaGiorniRowChanging(Me, New PSostaGiorniRowChangeEvent(CType(e.Row,PSostaGiorniRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PSostaGiorniRowDeletedEvent) Is Nothing) Then
                RaiseEvent PSostaGiorniRowDeleted(Me, New PSostaGiorniRowChangeEvent(CType(e.Row,PSostaGiorniRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PSostaGiorniRowDeletingEvent) Is Nothing) Then
                RaiseEvent PSostaGiorniRowDeleting(Me, New PSostaGiorniRowChangeEvent(CType(e.Row,PSostaGiorniRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePSostaGiorniRow(ByVal row As PSostaGiorniRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PSostaGiorniRow
        Inherits DataRow
        
        Private tablePSostaGiorni As PSostaGiorniDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePSostaGiorni = CType(Me.Table,PSostaGiorniDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tablePSostaGiorni.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tablePSostaGiorni.IdColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tablePSostaGiorni.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePSostaGiorni.DataColumn) = value
            End Set
        End Property
        
        Public Property IdTipoEvento As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePSostaGiorni.IdTipoEventoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePSostaGiorni.IdTipoEventoColumn) = value
            End Set
        End Property
        
        Public Property IdTipoProvv As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePSostaGiorni.IdTipoProvvColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePSostaGiorni.IdTipoProvvColumn) = value
            End Set
        End Property
        
        Public Property IdEvento As Integer
            Get
                Return CType(Me(Me.tablePSostaGiorni.IdEventoColumn),Integer)
            End Get
            Set
                Me(Me.tablePSostaGiorni.IdEventoColumn) = value
            End Set
        End Property
        
        Public Property DescrEvento As String
            Get
                Try 
                    Return CType(Me(Me.tablePSostaGiorni.DescrEventoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePSostaGiorni.DescrEventoColumn) = value
            End Set
        End Property
        
        Public Property IdProvv As Integer
            Get
                Return CType(Me(Me.tablePSostaGiorni.IdProvvColumn),Integer)
            End Get
            Set
                Me(Me.tablePSostaGiorni.IdProvvColumn) = value
            End Set
        End Property
        
        Public Property DescrProvv As String
            Get
                Try 
                    Return CType(Me(Me.tablePSostaGiorni.DescrProvvColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePSostaGiorni.DescrProvvColumn) = value
            End Set
        End Property
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tablePSostaGiorni.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tablePSostaGiorni.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdTipoEventoNull() As Boolean
            Return Me.IsNull(Me.tablePSostaGiorni.IdTipoEventoColumn)
        End Function
        
        Public Sub SetIdTipoEventoNull()
            Me(Me.tablePSostaGiorni.IdTipoEventoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdTipoProvvNull() As Boolean
            Return Me.IsNull(Me.tablePSostaGiorni.IdTipoProvvColumn)
        End Function
        
        Public Sub SetIdTipoProvvNull()
            Me(Me.tablePSostaGiorni.IdTipoProvvColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescrEventoNull() As Boolean
            Return Me.IsNull(Me.tablePSostaGiorni.DescrEventoColumn)
        End Function
        
        Public Sub SetDescrEventoNull()
            Me(Me.tablePSostaGiorni.DescrEventoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescrProvvNull() As Boolean
            Return Me.IsNull(Me.tablePSostaGiorni.DescrProvvColumn)
        End Function
        
        Public Sub SetDescrProvvNull()
            Me(Me.tablePSostaGiorni.DescrProvvColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PSostaGiorniRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PSostaGiorniRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PSostaGiorniRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PSostaGiorniRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PSostaGSpecialiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnData As DataColumn
        
        Private columnIdTipoEvento As DataColumn
        
        Private columnIdTipoProvv As DataColumn
        
        Friend Sub New()
            MyBase.New("PSostaGSpeciali")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property IdTipoEventoColumn As DataColumn
            Get
                Return Me.columnIdTipoEvento
            End Get
        End Property
        
        Friend ReadOnly Property IdTipoProvvColumn As DataColumn
            Get
                Return Me.columnIdTipoProvv
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PSostaGSpecialiRow
            Get
                Return CType(Me.Rows(index),PSostaGSpecialiRow)
            End Get
        End Property
        
        Public Event PSostaGSpecialiRowChanged As PSostaGSpecialiRowChangeEventHandler
        
        Public Event PSostaGSpecialiRowChanging As PSostaGSpecialiRowChangeEventHandler
        
        Public Event PSostaGSpecialiRowDeleted As PSostaGSpecialiRowChangeEventHandler
        
        Public Event PSostaGSpecialiRowDeleting As PSostaGSpecialiRowChangeEventHandler
        
        Public Overloads Sub AddPSostaGSpecialiRow(ByVal row As PSostaGSpecialiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPSostaGSpecialiRow(ByVal Id As System.Guid, ByVal Data As Date, ByVal IdTipoEvento As Integer, ByVal IdTipoProvv As Integer) As PSostaGSpecialiRow
            Dim rowPSostaGSpecialiRow As PSostaGSpecialiRow = CType(Me.NewRow,PSostaGSpecialiRow)
            rowPSostaGSpecialiRow.ItemArray = New Object() {Id, Data, IdTipoEvento, IdTipoProvv}
            Me.Rows.Add(rowPSostaGSpecialiRow)
            Return rowPSostaGSpecialiRow
        End Function
        
        Public Function FindById(ByVal Id As System.Guid) As PSostaGSpecialiRow
            Return CType(Me.Rows.Find(New Object() {Id}),PSostaGSpecialiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PSostaGSpecialiDataTable = CType(MyBase.Clone,PSostaGSpecialiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PSostaGSpecialiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnData = Me.Columns("Data")
            Me.columnIdTipoEvento = Me.Columns("IdTipoEvento")
            Me.columnIdTipoProvv = Me.Columns("IdTipoProvv")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnIdTipoEvento = New DataColumn("IdTipoEvento", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdTipoEvento)
            Me.columnIdTipoProvv = New DataColumn("IdTipoProvv", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdTipoProvv)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewPSostaGSpecialiRow() As PSostaGSpecialiRow
            Return CType(Me.NewRow,PSostaGSpecialiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PSostaGSpecialiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PSostaGSpecialiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PSostaGSpecialiRowChangedEvent) Is Nothing) Then
                RaiseEvent PSostaGSpecialiRowChanged(Me, New PSostaGSpecialiRowChangeEvent(CType(e.Row,PSostaGSpecialiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PSostaGSpecialiRowChangingEvent) Is Nothing) Then
                RaiseEvent PSostaGSpecialiRowChanging(Me, New PSostaGSpecialiRowChangeEvent(CType(e.Row,PSostaGSpecialiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PSostaGSpecialiRowDeletedEvent) Is Nothing) Then
                RaiseEvent PSostaGSpecialiRowDeleted(Me, New PSostaGSpecialiRowChangeEvent(CType(e.Row,PSostaGSpecialiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PSostaGSpecialiRowDeletingEvent) Is Nothing) Then
                RaiseEvent PSostaGSpecialiRowDeleting(Me, New PSostaGSpecialiRowChangeEvent(CType(e.Row,PSostaGSpecialiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePSostaGSpecialiRow(ByVal row As PSostaGSpecialiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PSostaGSpecialiRow
        Inherits DataRow
        
        Private tablePSostaGSpeciali As PSostaGSpecialiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePSostaGSpeciali = CType(Me.Table,PSostaGSpecialiDataTable)
        End Sub
        
        Public Property Id As System.Guid
            Get
                Return CType(Me(Me.tablePSostaGSpeciali.IdColumn),System.Guid)
            End Get
            Set
                Me(Me.tablePSostaGSpeciali.IdColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tablePSostaGSpeciali.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePSostaGSpeciali.DataColumn) = value
            End Set
        End Property
        
        Public Property IdTipoEvento As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePSostaGSpeciali.IdTipoEventoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePSostaGSpeciali.IdTipoEventoColumn) = value
            End Set
        End Property
        
        Public Property IdTipoProvv As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePSostaGSpeciali.IdTipoProvvColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePSostaGSpeciali.IdTipoProvvColumn) = value
            End Set
        End Property
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tablePSostaGSpeciali.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tablePSostaGSpeciali.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdTipoEventoNull() As Boolean
            Return Me.IsNull(Me.tablePSostaGSpeciali.IdTipoEventoColumn)
        End Function
        
        Public Sub SetIdTipoEventoNull()
            Me(Me.tablePSostaGSpeciali.IdTipoEventoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdTipoProvvNull() As Boolean
            Return Me.IsNull(Me.tablePSostaGSpeciali.IdTipoProvvColumn)
        End Function
        
        Public Sub SetIdTipoProvvNull()
            Me(Me.tablePSostaGSpeciali.IdTipoProvvColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PSostaGSpecialiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PSostaGSpecialiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PSostaGSpecialiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PSostaGSpecialiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PSostaProvvGGDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnDescrizione As DataColumn
        
        Friend Sub New()
            MyBase.New("PSostaProvvGG")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DescrizioneColumn As DataColumn
            Get
                Return Me.columnDescrizione
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PSostaProvvGGRow
            Get
                Return CType(Me.Rows(index),PSostaProvvGGRow)
            End Get
        End Property
        
        Public Event PSostaProvvGGRowChanged As PSostaProvvGGRowChangeEventHandler
        
        Public Event PSostaProvvGGRowChanging As PSostaProvvGGRowChangeEventHandler
        
        Public Event PSostaProvvGGRowDeleted As PSostaProvvGGRowChangeEventHandler
        
        Public Event PSostaProvvGGRowDeleting As PSostaProvvGGRowChangeEventHandler
        
        Public Overloads Sub AddPSostaProvvGGRow(ByVal row As PSostaProvvGGRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPSostaProvvGGRow(ByVal Id As Integer, ByVal Descrizione As String) As PSostaProvvGGRow
            Dim rowPSostaProvvGGRow As PSostaProvvGGRow = CType(Me.NewRow,PSostaProvvGGRow)
            rowPSostaProvvGGRow.ItemArray = New Object() {Id, Descrizione}
            Me.Rows.Add(rowPSostaProvvGGRow)
            Return rowPSostaProvvGGRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As PSostaProvvGGRow
            Return CType(Me.Rows.Find(New Object() {Id}),PSostaProvvGGRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PSostaProvvGGDataTable = CType(MyBase.Clone,PSostaProvvGGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PSostaProvvGGDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnDescrizione = Me.Columns("Descrizione")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnDescrizione = New DataColumn("Descrizione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrizione)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewPSostaProvvGGRow() As PSostaProvvGGRow
            Return CType(Me.NewRow,PSostaProvvGGRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PSostaProvvGGRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PSostaProvvGGRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PSostaProvvGGRowChangedEvent) Is Nothing) Then
                RaiseEvent PSostaProvvGGRowChanged(Me, New PSostaProvvGGRowChangeEvent(CType(e.Row,PSostaProvvGGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PSostaProvvGGRowChangingEvent) Is Nothing) Then
                RaiseEvent PSostaProvvGGRowChanging(Me, New PSostaProvvGGRowChangeEvent(CType(e.Row,PSostaProvvGGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PSostaProvvGGRowDeletedEvent) Is Nothing) Then
                RaiseEvent PSostaProvvGGRowDeleted(Me, New PSostaProvvGGRowChangeEvent(CType(e.Row,PSostaProvvGGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PSostaProvvGGRowDeletingEvent) Is Nothing) Then
                RaiseEvent PSostaProvvGGRowDeleting(Me, New PSostaProvvGGRowChangeEvent(CType(e.Row,PSostaProvvGGRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePSostaProvvGGRow(ByVal row As PSostaProvvGGRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PSostaProvvGGRow
        Inherits DataRow
        
        Private tablePSostaProvvGG As PSostaProvvGGDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePSostaProvvGG = CType(Me.Table,PSostaProvvGGDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tablePSostaProvvGG.IdColumn),Integer)
            End Get
            Set
                Me(Me.tablePSostaProvvGG.IdColumn) = value
            End Set
        End Property
        
        Public Property Descrizione As String
            Get
                Try 
                    Return CType(Me(Me.tablePSostaProvvGG.DescrizioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePSostaProvvGG.DescrizioneColumn) = value
            End Set
        End Property
        
        Public Function IsDescrizioneNull() As Boolean
            Return Me.IsNull(Me.tablePSostaProvvGG.DescrizioneColumn)
        End Function
        
        Public Sub SetDescrizioneNull()
            Me(Me.tablePSostaProvvGG.DescrizioneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PSostaProvvGGRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PSostaProvvGGRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PSostaProvvGGRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PSostaProvvGGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
