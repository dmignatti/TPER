'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsConsuntivo
    Inherits DataSet
    
    Private tableConsuntivoSosta As ConsuntivoSostaDataTable
    
    Private tableTSanzioniSosta As TSanzioniSostaDataTable
    
    Private tableConsuntivoSostaProvv As ConsuntivoSostaProvvDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ConsuntivoSosta")) Is Nothing) Then
                Me.Tables.Add(New ConsuntivoSostaDataTable(ds.Tables("ConsuntivoSosta")))
            End If
            If (Not (ds.Tables("TSanzioniSosta")) Is Nothing) Then
                Me.Tables.Add(New TSanzioniSostaDataTable(ds.Tables("TSanzioniSosta")))
            End If
            If (Not (ds.Tables("ConsuntivoSostaProvv")) Is Nothing) Then
                Me.Tables.Add(New ConsuntivoSostaProvvDataTable(ds.Tables("ConsuntivoSostaProvv")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ConsuntivoSosta As ConsuntivoSostaDataTable
        Get
            Return Me.tableConsuntivoSosta
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TSanzioniSosta As TSanzioniSostaDataTable
        Get
            Return Me.tableTSanzioniSosta
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ConsuntivoSostaProvv As ConsuntivoSostaProvvDataTable
        Get
            Return Me.tableConsuntivoSostaProvv
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsConsuntivo = CType(MyBase.Clone,DsConsuntivo)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ConsuntivoSosta")) Is Nothing) Then
            Me.Tables.Add(New ConsuntivoSostaDataTable(ds.Tables("ConsuntivoSosta")))
        End If
        If (Not (ds.Tables("TSanzioniSosta")) Is Nothing) Then
            Me.Tables.Add(New TSanzioniSostaDataTable(ds.Tables("TSanzioniSosta")))
        End If
        If (Not (ds.Tables("ConsuntivoSostaProvv")) Is Nothing) Then
            Me.Tables.Add(New ConsuntivoSostaProvvDataTable(ds.Tables("ConsuntivoSostaProvv")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableConsuntivoSosta = CType(Me.Tables("ConsuntivoSosta"),ConsuntivoSostaDataTable)
        If (Not (Me.tableConsuntivoSosta) Is Nothing) Then
            Me.tableConsuntivoSosta.InitVars
        End If
        Me.tableTSanzioniSosta = CType(Me.Tables("TSanzioniSosta"),TSanzioniSostaDataTable)
        If (Not (Me.tableTSanzioniSosta) Is Nothing) Then
            Me.tableTSanzioniSosta.InitVars
        End If
        Me.tableConsuntivoSostaProvv = CType(Me.Tables("ConsuntivoSostaProvv"),ConsuntivoSostaProvvDataTable)
        If (Not (Me.tableConsuntivoSostaProvv) Is Nothing) Then
            Me.tableConsuntivoSostaProvv.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsConsuntivo"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsConsuntivo.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableConsuntivoSosta = New ConsuntivoSostaDataTable
        Me.Tables.Add(Me.tableConsuntivoSosta)
        Me.tableTSanzioniSosta = New TSanzioniSostaDataTable
        Me.Tables.Add(Me.tableTSanzioniSosta)
        Me.tableConsuntivoSostaProvv = New ConsuntivoSostaProvvDataTable
        Me.Tables.Add(Me.tableConsuntivoSostaProvv)
    End Sub
    
    Private Function ShouldSerializeConsuntivoSosta() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTSanzioniSosta() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeConsuntivoSostaProvv() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ConsuntivoSostaRowChangeEventHandler(ByVal sender As Object, ByVal e As ConsuntivoSostaRowChangeEvent)
    
    Public Delegate Sub TSanzioniSostaRowChangeEventHandler(ByVal sender As Object, ByVal e As TSanzioniSostaRowChangeEvent)
    
    Public Delegate Sub ConsuntivoSostaProvvRowChangeEventHandler(ByVal sender As Object, ByVal e As ConsuntivoSostaProvvRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsuntivoSostaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdC As DataColumn
        
        Private columnDataC As DataColumn
        
        Private columnConsuntivo As DataColumn
        
        Friend Sub New()
            MyBase.New("ConsuntivoSosta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdCColumn As DataColumn
            Get
                Return Me.columnIdC
            End Get
        End Property
        
        Friend ReadOnly Property DataCColumn As DataColumn
            Get
                Return Me.columnDataC
            End Get
        End Property
        
        Friend ReadOnly Property ConsuntivoColumn As DataColumn
            Get
                Return Me.columnConsuntivo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ConsuntivoSostaRow
            Get
                Return CType(Me.Rows(index),ConsuntivoSostaRow)
            End Get
        End Property
        
        Public Event ConsuntivoSostaRowChanged As ConsuntivoSostaRowChangeEventHandler
        
        Public Event ConsuntivoSostaRowChanging As ConsuntivoSostaRowChangeEventHandler
        
        Public Event ConsuntivoSostaRowDeleted As ConsuntivoSostaRowChangeEventHandler
        
        Public Event ConsuntivoSostaRowDeleting As ConsuntivoSostaRowChangeEventHandler
        
        Public Overloads Sub AddConsuntivoSostaRow(ByVal row As ConsuntivoSostaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddConsuntivoSostaRow(ByVal IdC As System.Guid, ByVal DataC As Date, ByVal Consuntivo As Double) As ConsuntivoSostaRow
            Dim rowConsuntivoSostaRow As ConsuntivoSostaRow = CType(Me.NewRow,ConsuntivoSostaRow)
            rowConsuntivoSostaRow.ItemArray = New Object() {IdC, DataC, Consuntivo}
            Me.Rows.Add(rowConsuntivoSostaRow)
            Return rowConsuntivoSostaRow
        End Function
        
        Public Function FindByIdC(ByVal IdC As System.Guid) As ConsuntivoSostaRow
            Return CType(Me.Rows.Find(New Object() {IdC}),ConsuntivoSostaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ConsuntivoSostaDataTable = CType(MyBase.Clone,ConsuntivoSostaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ConsuntivoSostaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdC = Me.Columns("IdC")
            Me.columnDataC = Me.Columns("DataC")
            Me.columnConsuntivo = Me.Columns("Consuntivo")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdC = New DataColumn("IdC", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdC)
            Me.columnDataC = New DataColumn("DataC", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataC)
            Me.columnConsuntivo = New DataColumn("Consuntivo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConsuntivo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdC}, true))
            Me.columnIdC.AllowDBNull = false
            Me.columnIdC.Unique = true
        End Sub
        
        Public Function NewConsuntivoSostaRow() As ConsuntivoSostaRow
            Return CType(Me.NewRow,ConsuntivoSostaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ConsuntivoSostaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ConsuntivoSostaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ConsuntivoSostaRowChangedEvent) Is Nothing) Then
                RaiseEvent ConsuntivoSostaRowChanged(Me, New ConsuntivoSostaRowChangeEvent(CType(e.Row,ConsuntivoSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ConsuntivoSostaRowChangingEvent) Is Nothing) Then
                RaiseEvent ConsuntivoSostaRowChanging(Me, New ConsuntivoSostaRowChangeEvent(CType(e.Row,ConsuntivoSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ConsuntivoSostaRowDeletedEvent) Is Nothing) Then
                RaiseEvent ConsuntivoSostaRowDeleted(Me, New ConsuntivoSostaRowChangeEvent(CType(e.Row,ConsuntivoSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ConsuntivoSostaRowDeletingEvent) Is Nothing) Then
                RaiseEvent ConsuntivoSostaRowDeleting(Me, New ConsuntivoSostaRowChangeEvent(CType(e.Row,ConsuntivoSostaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveConsuntivoSostaRow(ByVal row As ConsuntivoSostaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsuntivoSostaRow
        Inherits DataRow
        
        Private tableConsuntivoSosta As ConsuntivoSostaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableConsuntivoSosta = CType(Me.Table,ConsuntivoSostaDataTable)
        End Sub
        
        Public Property IdC As System.Guid
            Get
                Return CType(Me(Me.tableConsuntivoSosta.IdCColumn),System.Guid)
            End Get
            Set
                Me(Me.tableConsuntivoSosta.IdCColumn) = value
            End Set
        End Property
        
        Public Property DataC As Date
            Get
                Try 
                    Return CType(Me(Me.tableConsuntivoSosta.DataCColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsuntivoSosta.DataCColumn) = value
            End Set
        End Property
        
        Public Property Consuntivo As Double
            Get
                Try 
                    Return CType(Me(Me.tableConsuntivoSosta.ConsuntivoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsuntivoSosta.ConsuntivoColumn) = value
            End Set
        End Property
        
        Public Function IsDataCNull() As Boolean
            Return Me.IsNull(Me.tableConsuntivoSosta.DataCColumn)
        End Function
        
        Public Sub SetDataCNull()
            Me(Me.tableConsuntivoSosta.DataCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConsuntivoNull() As Boolean
            Return Me.IsNull(Me.tableConsuntivoSosta.ConsuntivoColumn)
        End Function
        
        Public Sub SetConsuntivoNull()
            Me(Me.tableConsuntivoSosta.ConsuntivoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsuntivoSostaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ConsuntivoSostaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ConsuntivoSostaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ConsuntivoSostaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TSanzioniSostaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdSanzioniSosta As DataColumn
        
        Private columnData As DataColumn
        
        Private columnTotale As DataColumn
        
        Friend Sub New()
            MyBase.New("TSanzioniSosta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdSanzioniSostaColumn As DataColumn
            Get
                Return Me.columnIdSanzioniSosta
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property TotaleColumn As DataColumn
            Get
                Return Me.columnTotale
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TSanzioniSostaRow
            Get
                Return CType(Me.Rows(index),TSanzioniSostaRow)
            End Get
        End Property
        
        Public Event TSanzioniSostaRowChanged As TSanzioniSostaRowChangeEventHandler
        
        Public Event TSanzioniSostaRowChanging As TSanzioniSostaRowChangeEventHandler
        
        Public Event TSanzioniSostaRowDeleted As TSanzioniSostaRowChangeEventHandler
        
        Public Event TSanzioniSostaRowDeleting As TSanzioniSostaRowChangeEventHandler
        
        Public Overloads Sub AddTSanzioniSostaRow(ByVal row As TSanzioniSostaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTSanzioniSostaRow(ByVal IdSanzioniSosta As System.Guid, ByVal Data As Date, ByVal Totale As Double) As TSanzioniSostaRow
            Dim rowTSanzioniSostaRow As TSanzioniSostaRow = CType(Me.NewRow,TSanzioniSostaRow)
            rowTSanzioniSostaRow.ItemArray = New Object() {IdSanzioniSosta, Data, Totale}
            Me.Rows.Add(rowTSanzioniSostaRow)
            Return rowTSanzioniSostaRow
        End Function
        
        Public Function FindByIdSanzioniSosta(ByVal IdSanzioniSosta As System.Guid) As TSanzioniSostaRow
            Return CType(Me.Rows.Find(New Object() {IdSanzioniSosta}),TSanzioniSostaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TSanzioniSostaDataTable = CType(MyBase.Clone,TSanzioniSostaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TSanzioniSostaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdSanzioniSosta = Me.Columns("IdSanzioniSosta")
            Me.columnData = Me.Columns("Data")
            Me.columnTotale = Me.Columns("Totale")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdSanzioniSosta = New DataColumn("IdSanzioniSosta", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdSanzioniSosta)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnTotale = New DataColumn("Totale", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotale)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdSanzioniSosta}, true))
            Me.columnIdSanzioniSosta.AllowDBNull = false
            Me.columnIdSanzioniSosta.Unique = true
        End Sub
        
        Public Function NewTSanzioniSostaRow() As TSanzioniSostaRow
            Return CType(Me.NewRow,TSanzioniSostaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TSanzioniSostaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TSanzioniSostaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TSanzioniSostaRowChangedEvent) Is Nothing) Then
                RaiseEvent TSanzioniSostaRowChanged(Me, New TSanzioniSostaRowChangeEvent(CType(e.Row,TSanzioniSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TSanzioniSostaRowChangingEvent) Is Nothing) Then
                RaiseEvent TSanzioniSostaRowChanging(Me, New TSanzioniSostaRowChangeEvent(CType(e.Row,TSanzioniSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TSanzioniSostaRowDeletedEvent) Is Nothing) Then
                RaiseEvent TSanzioniSostaRowDeleted(Me, New TSanzioniSostaRowChangeEvent(CType(e.Row,TSanzioniSostaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TSanzioniSostaRowDeletingEvent) Is Nothing) Then
                RaiseEvent TSanzioniSostaRowDeleting(Me, New TSanzioniSostaRowChangeEvent(CType(e.Row,TSanzioniSostaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTSanzioniSostaRow(ByVal row As TSanzioniSostaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TSanzioniSostaRow
        Inherits DataRow
        
        Private tableTSanzioniSosta As TSanzioniSostaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTSanzioniSosta = CType(Me.Table,TSanzioniSostaDataTable)
        End Sub
        
        Public Property IdSanzioniSosta As System.Guid
            Get
                Return CType(Me(Me.tableTSanzioniSosta.IdSanzioniSostaColumn),System.Guid)
            End Get
            Set
                Me(Me.tableTSanzioniSosta.IdSanzioniSostaColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableTSanzioniSosta.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTSanzioniSosta.DataColumn) = value
            End Set
        End Property
        
        Public Property Totale As Double
            Get
                Try 
                    Return CType(Me(Me.tableTSanzioniSosta.TotaleColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTSanzioniSosta.TotaleColumn) = value
            End Set
        End Property
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableTSanzioniSosta.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableTSanzioniSosta.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotaleNull() As Boolean
            Return Me.IsNull(Me.tableTSanzioniSosta.TotaleColumn)
        End Function
        
        Public Sub SetTotaleNull()
            Me(Me.tableTSanzioniSosta.TotaleColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TSanzioniSostaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TSanzioniSostaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TSanzioniSostaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TSanzioniSostaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsuntivoSostaProvvDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdC As DataColumn
        
        Private columnDataC As DataColumn
        
        Private columnConsuntivo As DataColumn
        
        Friend Sub New()
            MyBase.New("ConsuntivoSostaProvv")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdCColumn As DataColumn
            Get
                Return Me.columnIdC
            End Get
        End Property
        
        Friend ReadOnly Property DataCColumn As DataColumn
            Get
                Return Me.columnDataC
            End Get
        End Property
        
        Friend ReadOnly Property ConsuntivoColumn As DataColumn
            Get
                Return Me.columnConsuntivo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ConsuntivoSostaProvvRow
            Get
                Return CType(Me.Rows(index),ConsuntivoSostaProvvRow)
            End Get
        End Property
        
        Public Event ConsuntivoSostaProvvRowChanged As ConsuntivoSostaProvvRowChangeEventHandler
        
        Public Event ConsuntivoSostaProvvRowChanging As ConsuntivoSostaProvvRowChangeEventHandler
        
        Public Event ConsuntivoSostaProvvRowDeleted As ConsuntivoSostaProvvRowChangeEventHandler
        
        Public Event ConsuntivoSostaProvvRowDeleting As ConsuntivoSostaProvvRowChangeEventHandler
        
        Public Overloads Sub AddConsuntivoSostaProvvRow(ByVal row As ConsuntivoSostaProvvRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddConsuntivoSostaProvvRow(ByVal IdC As System.Guid, ByVal DataC As Date, ByVal Consuntivo As Double) As ConsuntivoSostaProvvRow
            Dim rowConsuntivoSostaProvvRow As ConsuntivoSostaProvvRow = CType(Me.NewRow,ConsuntivoSostaProvvRow)
            rowConsuntivoSostaProvvRow.ItemArray = New Object() {IdC, DataC, Consuntivo}
            Me.Rows.Add(rowConsuntivoSostaProvvRow)
            Return rowConsuntivoSostaProvvRow
        End Function
        
        Public Function FindByIdC(ByVal IdC As System.Guid) As ConsuntivoSostaProvvRow
            Return CType(Me.Rows.Find(New Object() {IdC}),ConsuntivoSostaProvvRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ConsuntivoSostaProvvDataTable = CType(MyBase.Clone,ConsuntivoSostaProvvDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ConsuntivoSostaProvvDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdC = Me.Columns("IdC")
            Me.columnDataC = Me.Columns("DataC")
            Me.columnConsuntivo = Me.Columns("Consuntivo")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdC = New DataColumn("IdC", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdC)
            Me.columnDataC = New DataColumn("DataC", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataC)
            Me.columnConsuntivo = New DataColumn("Consuntivo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConsuntivo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdC}, true))
            Me.columnIdC.AllowDBNull = false
            Me.columnIdC.Unique = true
        End Sub
        
        Public Function NewConsuntivoSostaProvvRow() As ConsuntivoSostaProvvRow
            Return CType(Me.NewRow,ConsuntivoSostaProvvRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ConsuntivoSostaProvvRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ConsuntivoSostaProvvRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ConsuntivoSostaProvvRowChangedEvent) Is Nothing) Then
                RaiseEvent ConsuntivoSostaProvvRowChanged(Me, New ConsuntivoSostaProvvRowChangeEvent(CType(e.Row,ConsuntivoSostaProvvRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ConsuntivoSostaProvvRowChangingEvent) Is Nothing) Then
                RaiseEvent ConsuntivoSostaProvvRowChanging(Me, New ConsuntivoSostaProvvRowChangeEvent(CType(e.Row,ConsuntivoSostaProvvRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ConsuntivoSostaProvvRowDeletedEvent) Is Nothing) Then
                RaiseEvent ConsuntivoSostaProvvRowDeleted(Me, New ConsuntivoSostaProvvRowChangeEvent(CType(e.Row,ConsuntivoSostaProvvRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ConsuntivoSostaProvvRowDeletingEvent) Is Nothing) Then
                RaiseEvent ConsuntivoSostaProvvRowDeleting(Me, New ConsuntivoSostaProvvRowChangeEvent(CType(e.Row,ConsuntivoSostaProvvRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveConsuntivoSostaProvvRow(ByVal row As ConsuntivoSostaProvvRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsuntivoSostaProvvRow
        Inherits DataRow
        
        Private tableConsuntivoSostaProvv As ConsuntivoSostaProvvDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableConsuntivoSostaProvv = CType(Me.Table,ConsuntivoSostaProvvDataTable)
        End Sub
        
        Public Property IdC As System.Guid
            Get
                Return CType(Me(Me.tableConsuntivoSostaProvv.IdCColumn),System.Guid)
            End Get
            Set
                Me(Me.tableConsuntivoSostaProvv.IdCColumn) = value
            End Set
        End Property
        
        Public Property DataC As Date
            Get
                Try 
                    Return CType(Me(Me.tableConsuntivoSostaProvv.DataCColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsuntivoSostaProvv.DataCColumn) = value
            End Set
        End Property
        
        Public Property Consuntivo As Double
            Get
                Try 
                    Return CType(Me(Me.tableConsuntivoSostaProvv.ConsuntivoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsuntivoSostaProvv.ConsuntivoColumn) = value
            End Set
        End Property
        
        Public Function IsDataCNull() As Boolean
            Return Me.IsNull(Me.tableConsuntivoSostaProvv.DataCColumn)
        End Function
        
        Public Sub SetDataCNull()
            Me(Me.tableConsuntivoSostaProvv.DataCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConsuntivoNull() As Boolean
            Return Me.IsNull(Me.tableConsuntivoSostaProvv.ConsuntivoColumn)
        End Function
        
        Public Sub SetConsuntivoNull()
            Me(Me.tableConsuntivoSostaProvv.ConsuntivoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConsuntivoSostaProvvRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ConsuntivoSostaProvvRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ConsuntivoSostaProvvRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ConsuntivoSostaProvvRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
