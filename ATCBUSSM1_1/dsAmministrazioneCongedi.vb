'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2503
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsAmministrazioneCongedi
    Inherits DataSet
    
    Private tableRichiesteCambiTurnoMensili As RichiesteCambiTurnoMensiliDataTable
    
    Private tableRichiesteCambiTurnoMensile As RichiesteCambiTurnoMensileDataTable
    
    Private tableRiposi As RiposiDataTable
    
    Private tableAccertatori_MancataTimbratura As Accertatori_MancataTimbraturaDataTable
    
    Private tableAccertatori_Causale As Accertatori_CausaleDataTable
    
    Private tableSP_PrenotazioniFerieCongedi As SP_PrenotazioniFerieCongediDataTable
    
    Private tableTable1 As Table1DataTable
    
    Private tableRichiesteFerie As RichiesteFerieDataTable
    
    Private tableRichiesteCongediGarantiti As RichiesteCongediGarantitiDataTable
    
    Private tableRichiesteCongediFrazionati As RichiesteCongediFrazionatiDataTable
    
    Private tableRichiesteCambiTurno As RichiesteCambiTurnoDataTable
    
    Private tableRichiesteCongedi As RichiesteCongediDataTable
    
    Private tableAccertatori_GiustificativoRichiesta As Accertatori_GiustificativoRichiestaDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("RichiesteCambiTurnoMensili")) Is Nothing) Then
                Me.Tables.Add(New RichiesteCambiTurnoMensiliDataTable(ds.Tables("RichiesteCambiTurnoMensili")))
            End If
            If (Not (ds.Tables("RichiesteCambiTurnoMensile")) Is Nothing) Then
                Me.Tables.Add(New RichiesteCambiTurnoMensileDataTable(ds.Tables("RichiesteCambiTurnoMensile")))
            End If
            If (Not (ds.Tables("Riposi")) Is Nothing) Then
                Me.Tables.Add(New RiposiDataTable(ds.Tables("Riposi")))
            End If
            If (Not (ds.Tables("Accertatori_MancataTimbratura")) Is Nothing) Then
                Me.Tables.Add(New Accertatori_MancataTimbraturaDataTable(ds.Tables("Accertatori_MancataTimbratura")))
            End If
            If (Not (ds.Tables("Accertatori_Causale")) Is Nothing) Then
                Me.Tables.Add(New Accertatori_CausaleDataTable(ds.Tables("Accertatori_Causale")))
            End If
            If (Not (ds.Tables("SP_PrenotazioniFerieCongedi")) Is Nothing) Then
                Me.Tables.Add(New SP_PrenotazioniFerieCongediDataTable(ds.Tables("SP_PrenotazioniFerieCongedi")))
            End If
            If (Not (ds.Tables("Table1")) Is Nothing) Then
                Me.Tables.Add(New Table1DataTable(ds.Tables("Table1")))
            End If
            If (Not (ds.Tables("RichiesteFerie")) Is Nothing) Then
                Me.Tables.Add(New RichiesteFerieDataTable(ds.Tables("RichiesteFerie")))
            End If
            If (Not (ds.Tables("RichiesteCongediGarantiti")) Is Nothing) Then
                Me.Tables.Add(New RichiesteCongediGarantitiDataTable(ds.Tables("RichiesteCongediGarantiti")))
            End If
            If (Not (ds.Tables("RichiesteCongediFrazionati")) Is Nothing) Then
                Me.Tables.Add(New RichiesteCongediFrazionatiDataTable(ds.Tables("RichiesteCongediFrazionati")))
            End If
            If (Not (ds.Tables("RichiesteCambiTurno")) Is Nothing) Then
                Me.Tables.Add(New RichiesteCambiTurnoDataTable(ds.Tables("RichiesteCambiTurno")))
            End If
            If (Not (ds.Tables("RichiesteCongedi")) Is Nothing) Then
                Me.Tables.Add(New RichiesteCongediDataTable(ds.Tables("RichiesteCongedi")))
            End If
            If (Not (ds.Tables("Accertatori_GiustificativoRichiesta")) Is Nothing) Then
                Me.Tables.Add(New Accertatori_GiustificativoRichiestaDataTable(ds.Tables("Accertatori_GiustificativoRichiesta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RichiesteCambiTurnoMensili As RichiesteCambiTurnoMensiliDataTable
        Get
            Return Me.tableRichiesteCambiTurnoMensili
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RichiesteCambiTurnoMensile As RichiesteCambiTurnoMensileDataTable
        Get
            Return Me.tableRichiesteCambiTurnoMensile
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Riposi As RiposiDataTable
        Get
            Return Me.tableRiposi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accertatori_MancataTimbratura As Accertatori_MancataTimbraturaDataTable
        Get
            Return Me.tableAccertatori_MancataTimbratura
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accertatori_Causale As Accertatori_CausaleDataTable
        Get
            Return Me.tableAccertatori_Causale
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_PrenotazioniFerieCongedi As SP_PrenotazioniFerieCongediDataTable
        Get
            Return Me.tableSP_PrenotazioniFerieCongedi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table1 As Table1DataTable
        Get
            Return Me.tableTable1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RichiesteFerie As RichiesteFerieDataTable
        Get
            Return Me.tableRichiesteFerie
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RichiesteCongediGarantiti As RichiesteCongediGarantitiDataTable
        Get
            Return Me.tableRichiesteCongediGarantiti
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RichiesteCongediFrazionati As RichiesteCongediFrazionatiDataTable
        Get
            Return Me.tableRichiesteCongediFrazionati
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RichiesteCambiTurno As RichiesteCambiTurnoDataTable
        Get
            Return Me.tableRichiesteCambiTurno
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RichiesteCongedi As RichiesteCongediDataTable
        Get
            Return Me.tableRichiesteCongedi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accertatori_GiustificativoRichiesta As Accertatori_GiustificativoRichiestaDataTable
        Get
            Return Me.tableAccertatori_GiustificativoRichiesta
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsAmministrazioneCongedi = CType(MyBase.Clone,dsAmministrazioneCongedi)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("RichiesteCambiTurnoMensili")) Is Nothing) Then
            Me.Tables.Add(New RichiesteCambiTurnoMensiliDataTable(ds.Tables("RichiesteCambiTurnoMensili")))
        End If
        If (Not (ds.Tables("RichiesteCambiTurnoMensile")) Is Nothing) Then
            Me.Tables.Add(New RichiesteCambiTurnoMensileDataTable(ds.Tables("RichiesteCambiTurnoMensile")))
        End If
        If (Not (ds.Tables("Riposi")) Is Nothing) Then
            Me.Tables.Add(New RiposiDataTable(ds.Tables("Riposi")))
        End If
        If (Not (ds.Tables("Accertatori_MancataTimbratura")) Is Nothing) Then
            Me.Tables.Add(New Accertatori_MancataTimbraturaDataTable(ds.Tables("Accertatori_MancataTimbratura")))
        End If
        If (Not (ds.Tables("Accertatori_Causale")) Is Nothing) Then
            Me.Tables.Add(New Accertatori_CausaleDataTable(ds.Tables("Accertatori_Causale")))
        End If
        If (Not (ds.Tables("SP_PrenotazioniFerieCongedi")) Is Nothing) Then
            Me.Tables.Add(New SP_PrenotazioniFerieCongediDataTable(ds.Tables("SP_PrenotazioniFerieCongedi")))
        End If
        If (Not (ds.Tables("Table1")) Is Nothing) Then
            Me.Tables.Add(New Table1DataTable(ds.Tables("Table1")))
        End If
        If (Not (ds.Tables("RichiesteFerie")) Is Nothing) Then
            Me.Tables.Add(New RichiesteFerieDataTable(ds.Tables("RichiesteFerie")))
        End If
        If (Not (ds.Tables("RichiesteCongediGarantiti")) Is Nothing) Then
            Me.Tables.Add(New RichiesteCongediGarantitiDataTable(ds.Tables("RichiesteCongediGarantiti")))
        End If
        If (Not (ds.Tables("RichiesteCongediFrazionati")) Is Nothing) Then
            Me.Tables.Add(New RichiesteCongediFrazionatiDataTable(ds.Tables("RichiesteCongediFrazionati")))
        End If
        If (Not (ds.Tables("RichiesteCambiTurno")) Is Nothing) Then
            Me.Tables.Add(New RichiesteCambiTurnoDataTable(ds.Tables("RichiesteCambiTurno")))
        End If
        If (Not (ds.Tables("RichiesteCongedi")) Is Nothing) Then
            Me.Tables.Add(New RichiesteCongediDataTable(ds.Tables("RichiesteCongedi")))
        End If
        If (Not (ds.Tables("Accertatori_GiustificativoRichiesta")) Is Nothing) Then
            Me.Tables.Add(New Accertatori_GiustificativoRichiestaDataTable(ds.Tables("Accertatori_GiustificativoRichiesta")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableRichiesteCambiTurnoMensili = CType(Me.Tables("RichiesteCambiTurnoMensili"),RichiesteCambiTurnoMensiliDataTable)
        If (Not (Me.tableRichiesteCambiTurnoMensili) Is Nothing) Then
            Me.tableRichiesteCambiTurnoMensili.InitVars
        End If
        Me.tableRichiesteCambiTurnoMensile = CType(Me.Tables("RichiesteCambiTurnoMensile"),RichiesteCambiTurnoMensileDataTable)
        If (Not (Me.tableRichiesteCambiTurnoMensile) Is Nothing) Then
            Me.tableRichiesteCambiTurnoMensile.InitVars
        End If
        Me.tableRiposi = CType(Me.Tables("Riposi"),RiposiDataTable)
        If (Not (Me.tableRiposi) Is Nothing) Then
            Me.tableRiposi.InitVars
        End If
        Me.tableAccertatori_MancataTimbratura = CType(Me.Tables("Accertatori_MancataTimbratura"),Accertatori_MancataTimbraturaDataTable)
        If (Not (Me.tableAccertatori_MancataTimbratura) Is Nothing) Then
            Me.tableAccertatori_MancataTimbratura.InitVars
        End If
        Me.tableAccertatori_Causale = CType(Me.Tables("Accertatori_Causale"),Accertatori_CausaleDataTable)
        If (Not (Me.tableAccertatori_Causale) Is Nothing) Then
            Me.tableAccertatori_Causale.InitVars
        End If
        Me.tableSP_PrenotazioniFerieCongedi = CType(Me.Tables("SP_PrenotazioniFerieCongedi"),SP_PrenotazioniFerieCongediDataTable)
        If (Not (Me.tableSP_PrenotazioniFerieCongedi) Is Nothing) Then
            Me.tableSP_PrenotazioniFerieCongedi.InitVars
        End If
        Me.tableTable1 = CType(Me.Tables("Table1"),Table1DataTable)
        If (Not (Me.tableTable1) Is Nothing) Then
            Me.tableTable1.InitVars
        End If
        Me.tableRichiesteFerie = CType(Me.Tables("RichiesteFerie"),RichiesteFerieDataTable)
        If (Not (Me.tableRichiesteFerie) Is Nothing) Then
            Me.tableRichiesteFerie.InitVars
        End If
        Me.tableRichiesteCongediGarantiti = CType(Me.Tables("RichiesteCongediGarantiti"),RichiesteCongediGarantitiDataTable)
        If (Not (Me.tableRichiesteCongediGarantiti) Is Nothing) Then
            Me.tableRichiesteCongediGarantiti.InitVars
        End If
        Me.tableRichiesteCongediFrazionati = CType(Me.Tables("RichiesteCongediFrazionati"),RichiesteCongediFrazionatiDataTable)
        If (Not (Me.tableRichiesteCongediFrazionati) Is Nothing) Then
            Me.tableRichiesteCongediFrazionati.InitVars
        End If
        Me.tableRichiesteCambiTurno = CType(Me.Tables("RichiesteCambiTurno"),RichiesteCambiTurnoDataTable)
        If (Not (Me.tableRichiesteCambiTurno) Is Nothing) Then
            Me.tableRichiesteCambiTurno.InitVars
        End If
        Me.tableRichiesteCongedi = CType(Me.Tables("RichiesteCongedi"),RichiesteCongediDataTable)
        If (Not (Me.tableRichiesteCongedi) Is Nothing) Then
            Me.tableRichiesteCongedi.InitVars
        End If
        Me.tableAccertatori_GiustificativoRichiesta = CType(Me.Tables("Accertatori_GiustificativoRichiesta"),Accertatori_GiustificativoRichiestaDataTable)
        If (Not (Me.tableAccertatori_GiustificativoRichiesta) Is Nothing) Then
            Me.tableAccertatori_GiustificativoRichiesta.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsAmministrazioneCongedi"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsAmministrazioneCongedi.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableRichiesteCambiTurnoMensili = New RichiesteCambiTurnoMensiliDataTable
        Me.Tables.Add(Me.tableRichiesteCambiTurnoMensili)
        Me.tableRichiesteCambiTurnoMensile = New RichiesteCambiTurnoMensileDataTable
        Me.Tables.Add(Me.tableRichiesteCambiTurnoMensile)
        Me.tableRiposi = New RiposiDataTable
        Me.Tables.Add(Me.tableRiposi)
        Me.tableAccertatori_MancataTimbratura = New Accertatori_MancataTimbraturaDataTable
        Me.Tables.Add(Me.tableAccertatori_MancataTimbratura)
        Me.tableAccertatori_Causale = New Accertatori_CausaleDataTable
        Me.Tables.Add(Me.tableAccertatori_Causale)
        Me.tableSP_PrenotazioniFerieCongedi = New SP_PrenotazioniFerieCongediDataTable
        Me.Tables.Add(Me.tableSP_PrenotazioniFerieCongedi)
        Me.tableTable1 = New Table1DataTable
        Me.Tables.Add(Me.tableTable1)
        Me.tableRichiesteFerie = New RichiesteFerieDataTable
        Me.Tables.Add(Me.tableRichiesteFerie)
        Me.tableRichiesteCongediGarantiti = New RichiesteCongediGarantitiDataTable
        Me.Tables.Add(Me.tableRichiesteCongediGarantiti)
        Me.tableRichiesteCongediFrazionati = New RichiesteCongediFrazionatiDataTable
        Me.Tables.Add(Me.tableRichiesteCongediFrazionati)
        Me.tableRichiesteCambiTurno = New RichiesteCambiTurnoDataTable
        Me.Tables.Add(Me.tableRichiesteCambiTurno)
        Me.tableRichiesteCongedi = New RichiesteCongediDataTable
        Me.Tables.Add(Me.tableRichiesteCongedi)
        Me.tableAccertatori_GiustificativoRichiesta = New Accertatori_GiustificativoRichiestaDataTable
        Me.Tables.Add(Me.tableAccertatori_GiustificativoRichiesta)
    End Sub
    
    Private Function ShouldSerializeRichiesteCambiTurnoMensili() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRichiesteCambiTurnoMensile() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRiposi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccertatori_MancataTimbratura() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccertatori_Causale() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSP_PrenotazioniFerieCongedi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTable1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRichiesteFerie() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRichiesteCongediGarantiti() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRichiesteCongediFrazionati() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRichiesteCambiTurno() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRichiesteCongedi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccertatori_GiustificativoRichiesta() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub RichiesteCambiTurnoMensiliRowChangeEventHandler(ByVal sender As Object, ByVal e As RichiesteCambiTurnoMensiliRowChangeEvent)
    
    Public Delegate Sub RichiesteCambiTurnoMensileRowChangeEventHandler(ByVal sender As Object, ByVal e As RichiesteCambiTurnoMensileRowChangeEvent)
    
    Public Delegate Sub RiposiRowChangeEventHandler(ByVal sender As Object, ByVal e As RiposiRowChangeEvent)
    
    Public Delegate Sub Accertatori_MancataTimbraturaRowChangeEventHandler(ByVal sender As Object, ByVal e As Accertatori_MancataTimbraturaRowChangeEvent)
    
    Public Delegate Sub Accertatori_CausaleRowChangeEventHandler(ByVal sender As Object, ByVal e As Accertatori_CausaleRowChangeEvent)
    
    Public Delegate Sub SP_PrenotazioniFerieCongediRowChangeEventHandler(ByVal sender As Object, ByVal e As SP_PrenotazioniFerieCongediRowChangeEvent)
    
    Public Delegate Sub Table1RowChangeEventHandler(ByVal sender As Object, ByVal e As Table1RowChangeEvent)
    
    Public Delegate Sub RichiesteFerieRowChangeEventHandler(ByVal sender As Object, ByVal e As RichiesteFerieRowChangeEvent)
    
    Public Delegate Sub RichiesteCongediGarantitiRowChangeEventHandler(ByVal sender As Object, ByVal e As RichiesteCongediGarantitiRowChangeEvent)
    
    Public Delegate Sub RichiesteCongediFrazionatiRowChangeEventHandler(ByVal sender As Object, ByVal e As RichiesteCongediFrazionatiRowChangeEvent)
    
    Public Delegate Sub RichiesteCambiTurnoRowChangeEventHandler(ByVal sender As Object, ByVal e As RichiesteCambiTurnoRowChangeEvent)
    
    Public Delegate Sub RichiesteCongediRowChangeEventHandler(ByVal sender As Object, ByVal e As RichiesteCongediRowChangeEvent)
    
    Public Delegate Sub Accertatori_GiustificativoRichiestaRowChangeEventHandler(ByVal sender As Object, ByVal e As Accertatori_GiustificativoRichiestaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoMensiliDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdRichiesta As DataColumn
        
        Private columnIdAccertatoreRichiedente As DataColumn
        
        Private columnIdAccertatoreDestinatario As DataColumn
        
        Private columndata As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnIdApprovatore As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnCognomeNomeRichiedente As DataColumn
        
        Private columnCognomeNomeDestinatario As DataColumn
        
        Private columnApprovatore As DataColumn
        
        Private columnTurnoRichiedente As DataColumn
        
        Private columnTurnoDestinatario As DataColumn
        
        Friend Sub New()
            MyBase.New("RichiesteCambiTurnoMensili")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdRichiestaColumn As DataColumn
            Get
                Return Me.columnIdRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreRichiedenteColumn As DataColumn
            Get
                Return Me.columnIdAccertatoreRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreDestinatarioColumn As DataColumn
            Get
                Return Me.columnIdAccertatoreDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property dataColumn As DataColumn
            Get
                Return Me.columndata
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property IdApprovatoreColumn As DataColumn
            Get
                Return Me.columnIdApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeRichiedenteColumn As DataColumn
            Get
                Return Me.columnCognomeNomeRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeDestinatarioColumn As DataColumn
            Get
                Return Me.columnCognomeNomeDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoreColumn As DataColumn
            Get
                Return Me.columnApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property TurnoRichiedenteColumn As DataColumn
            Get
                Return Me.columnTurnoRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property TurnoDestinatarioColumn As DataColumn
            Get
                Return Me.columnTurnoDestinatario
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RichiesteCambiTurnoMensiliRow
            Get
                Return CType(Me.Rows(index),RichiesteCambiTurnoMensiliRow)
            End Get
        End Property
        
        Public Event RichiesteCambiTurnoMensiliRowChanged As RichiesteCambiTurnoMensiliRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoMensiliRowChanging As RichiesteCambiTurnoMensiliRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoMensiliRowDeleted As RichiesteCambiTurnoMensiliRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoMensiliRowDeleting As RichiesteCambiTurnoMensiliRowChangeEventHandler
        
        Public Overloads Sub AddRichiesteCambiTurnoMensiliRow(ByVal row As RichiesteCambiTurnoMensiliRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRichiesteCambiTurnoMensiliRow(ByVal IdRichiesta As System.Guid, ByVal IdAccertatoreRichiedente As Integer, ByVal IdAccertatoreDestinatario As Integer, ByVal data As Date, ByVal DataApprovazione As Date, ByVal IdApprovatore As Integer, ByVal StatoApprovazione As String, ByVal CognomeNomeRichiedente As String, ByVal CognomeNomeDestinatario As String, ByVal Approvatore As String, ByVal TurnoRichiedente As Decimal, ByVal TurnoDestinatario As Decimal) As RichiesteCambiTurnoMensiliRow
            Dim rowRichiesteCambiTurnoMensiliRow As RichiesteCambiTurnoMensiliRow = CType(Me.NewRow,RichiesteCambiTurnoMensiliRow)
            rowRichiesteCambiTurnoMensiliRow.ItemArray = New Object() {IdRichiesta, IdAccertatoreRichiedente, IdAccertatoreDestinatario, data, DataApprovazione, IdApprovatore, StatoApprovazione, CognomeNomeRichiedente, CognomeNomeDestinatario, Approvatore, TurnoRichiedente, TurnoDestinatario}
            Me.Rows.Add(rowRichiesteCambiTurnoMensiliRow)
            Return rowRichiesteCambiTurnoMensiliRow
        End Function
        
        Public Function FindByIdRichiesta(ByVal IdRichiesta As System.Guid) As RichiesteCambiTurnoMensiliRow
            Return CType(Me.Rows.Find(New Object() {IdRichiesta}),RichiesteCambiTurnoMensiliRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RichiesteCambiTurnoMensiliDataTable = CType(MyBase.Clone,RichiesteCambiTurnoMensiliDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RichiesteCambiTurnoMensiliDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdRichiesta = Me.Columns("IdRichiesta")
            Me.columnIdAccertatoreRichiedente = Me.Columns("IdAccertatoreRichiedente")
            Me.columnIdAccertatoreDestinatario = Me.Columns("IdAccertatoreDestinatario")
            Me.columndata = Me.Columns("data")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnIdApprovatore = Me.Columns("IdApprovatore")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnCognomeNomeRichiedente = Me.Columns("CognomeNomeRichiedente")
            Me.columnCognomeNomeDestinatario = Me.Columns("CognomeNomeDestinatario")
            Me.columnApprovatore = Me.Columns("Approvatore")
            Me.columnTurnoRichiedente = Me.Columns("TurnoRichiedente")
            Me.columnTurnoDestinatario = Me.Columns("TurnoDestinatario")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdRichiesta = New DataColumn("IdRichiesta", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdRichiesta)
            Me.columnIdAccertatoreRichiedente = New DataColumn("IdAccertatoreRichiedente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatoreRichiedente)
            Me.columnIdAccertatoreDestinatario = New DataColumn("IdAccertatoreDestinatario", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatoreDestinatario)
            Me.columndata = New DataColumn("data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndata)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnIdApprovatore = New DataColumn("IdApprovatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdApprovatore)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnCognomeNomeRichiedente = New DataColumn("CognomeNomeRichiedente", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNomeRichiedente)
            Me.columnCognomeNomeDestinatario = New DataColumn("CognomeNomeDestinatario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNomeDestinatario)
            Me.columnApprovatore = New DataColumn("Approvatore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatore)
            Me.columnTurnoRichiedente = New DataColumn("TurnoRichiedente", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnoRichiedente)
            Me.columnTurnoDestinatario = New DataColumn("TurnoDestinatario", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnoDestinatario)
            Me.Constraints.Add(New UniqueConstraint("dsAmministrazioneCongediKey4", New DataColumn() {Me.columnIdRichiesta}, true))
            Me.columnIdRichiesta.AllowDBNull = false
            Me.columnIdRichiesta.Unique = true
            Me.columnStatoApprovazione.ReadOnly = true
            Me.columnCognomeNomeRichiedente.ReadOnly = true
            Me.columnCognomeNomeDestinatario.ReadOnly = true
        End Sub
        
        Public Function NewRichiesteCambiTurnoMensiliRow() As RichiesteCambiTurnoMensiliRow
            Return CType(Me.NewRow,RichiesteCambiTurnoMensiliRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RichiesteCambiTurnoMensiliRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RichiesteCambiTurnoMensiliRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RichiesteCambiTurnoMensiliRowChangedEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensiliRowChanged(Me, New RichiesteCambiTurnoMensiliRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensiliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RichiesteCambiTurnoMensiliRowChangingEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensiliRowChanging(Me, New RichiesteCambiTurnoMensiliRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensiliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RichiesteCambiTurnoMensiliRowDeletedEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensiliRowDeleted(Me, New RichiesteCambiTurnoMensiliRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensiliRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RichiesteCambiTurnoMensiliRowDeletingEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensiliRowDeleting(Me, New RichiesteCambiTurnoMensiliRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensiliRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRichiesteCambiTurnoMensiliRow(ByVal row As RichiesteCambiTurnoMensiliRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoMensiliRow
        Inherits DataRow
        
        Private tableRichiesteCambiTurnoMensili As RichiesteCambiTurnoMensiliDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRichiesteCambiTurnoMensili = CType(Me.Table,RichiesteCambiTurnoMensiliDataTable)
        End Sub
        
        Public Property IdRichiesta As System.Guid
            Get
                Return CType(Me(Me.tableRichiesteCambiTurnoMensili.IdRichiestaColumn),System.Guid)
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensili.IdRichiestaColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatoreRichiedente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensili.IdAccertatoreRichiedenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensili.IdAccertatoreRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatoreDestinatario As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensili.IdAccertatoreDestinatarioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensili.IdAccertatoreDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property data As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensili.dataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensili.dataColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensili.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensili.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property IdApprovatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensili.IdApprovatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensili.IdApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensili.StatoApprovazioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensili.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property CognomeNomeRichiedente As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensili.CognomeNomeRichiedenteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensili.CognomeNomeRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property CognomeNomeDestinatario As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensili.CognomeNomeDestinatarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensili.CognomeNomeDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property Approvatore As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensili.ApprovatoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensili.ApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property TurnoRichiedente As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensili.TurnoRichiedenteColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensili.TurnoRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property TurnoDestinatario As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensili.TurnoDestinatarioColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensili.TurnoDestinatarioColumn) = value
            End Set
        End Property
        
        Public Function IsIdAccertatoreRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensili.IdAccertatoreRichiedenteColumn)
        End Function
        
        Public Sub SetIdAccertatoreRichiedenteNull()
            Me(Me.tableRichiesteCambiTurnoMensili.IdAccertatoreRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdAccertatoreDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensili.IdAccertatoreDestinatarioColumn)
        End Function
        
        Public Sub SetIdAccertatoreDestinatarioNull()
            Me(Me.tableRichiesteCambiTurnoMensili.IdAccertatoreDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdataNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensili.dataColumn)
        End Function
        
        Public Sub SetdataNull()
            Me(Me.tableRichiesteCambiTurnoMensili.dataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensili.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableRichiesteCambiTurnoMensili.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensili.IdApprovatoreColumn)
        End Function
        
        Public Sub SetIdApprovatoreNull()
            Me(Me.tableRichiesteCambiTurnoMensili.IdApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensili.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableRichiesteCambiTurnoMensili.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensili.CognomeNomeRichiedenteColumn)
        End Function
        
        Public Sub SetCognomeNomeRichiedenteNull()
            Me(Me.tableRichiesteCambiTurnoMensili.CognomeNomeRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensili.CognomeNomeDestinatarioColumn)
        End Function
        
        Public Sub SetCognomeNomeDestinatarioNull()
            Me(Me.tableRichiesteCambiTurnoMensili.CognomeNomeDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensili.ApprovatoreColumn)
        End Function
        
        Public Sub SetApprovatoreNull()
            Me(Me.tableRichiesteCambiTurnoMensili.ApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensili.TurnoRichiedenteColumn)
        End Function
        
        Public Sub SetTurnoRichiedenteNull()
            Me(Me.tableRichiesteCambiTurnoMensili.TurnoRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensili.TurnoDestinatarioColumn)
        End Function
        
        Public Sub SetTurnoDestinatarioNull()
            Me(Me.tableRichiesteCambiTurnoMensili.TurnoDestinatarioColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoMensiliRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RichiesteCambiTurnoMensiliRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RichiesteCambiTurnoMensiliRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RichiesteCambiTurnoMensiliRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoMensileDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnts As DataColumn
        
        Private columnIdRichiesta As DataColumn
        
        Private columnIdAccertatoreRichiedente As DataColumn
        
        Private columnIdAccertatoreDestinatario As DataColumn
        
        Private columndata As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnIdApprovatore As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnCognomeNomeRichiedente As DataColumn
        
        Private columnCognomeNomeDestinatario As DataColumn
        
        Private columnApprovatore As DataColumn
        
        Private columnTurnoRichiedente As DataColumn
        
        Private columnTurnoDestinatario As DataColumn
        
        Friend Sub New()
            MyBase.New("RichiesteCambiTurnoMensile")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property tsColumn As DataColumn
            Get
                Return Me.columnts
            End Get
        End Property
        
        Friend ReadOnly Property IdRichiestaColumn As DataColumn
            Get
                Return Me.columnIdRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreRichiedenteColumn As DataColumn
            Get
                Return Me.columnIdAccertatoreRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreDestinatarioColumn As DataColumn
            Get
                Return Me.columnIdAccertatoreDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property dataColumn As DataColumn
            Get
                Return Me.columndata
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property IdApprovatoreColumn As DataColumn
            Get
                Return Me.columnIdApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeRichiedenteColumn As DataColumn
            Get
                Return Me.columnCognomeNomeRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeDestinatarioColumn As DataColumn
            Get
                Return Me.columnCognomeNomeDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoreColumn As DataColumn
            Get
                Return Me.columnApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property TurnoRichiedenteColumn As DataColumn
            Get
                Return Me.columnTurnoRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property TurnoDestinatarioColumn As DataColumn
            Get
                Return Me.columnTurnoDestinatario
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RichiesteCambiTurnoMensileRow
            Get
                Return CType(Me.Rows(index),RichiesteCambiTurnoMensileRow)
            End Get
        End Property
        
        Public Event RichiesteCambiTurnoMensileRowChanged As RichiesteCambiTurnoMensileRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoMensileRowChanging As RichiesteCambiTurnoMensileRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoMensileRowDeleted As RichiesteCambiTurnoMensileRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoMensileRowDeleting As RichiesteCambiTurnoMensileRowChangeEventHandler
        
        Public Overloads Sub AddRichiesteCambiTurnoMensileRow(ByVal row As RichiesteCambiTurnoMensileRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRichiesteCambiTurnoMensileRow(ByVal ts As Date, ByVal IdRichiesta As System.Guid, ByVal IdAccertatoreRichiedente As Integer, ByVal IdAccertatoreDestinatario As Integer, ByVal data As Date, ByVal DataApprovazione As Date, ByVal IdApprovatore As Integer, ByVal StatoApprovazione As String, ByVal CognomeNomeRichiedente As String, ByVal CognomeNomeDestinatario As String, ByVal Approvatore As String, ByVal TurnoRichiedente As Integer, ByVal TurnoDestinatario As Integer) As RichiesteCambiTurnoMensileRow
            Dim rowRichiesteCambiTurnoMensileRow As RichiesteCambiTurnoMensileRow = CType(Me.NewRow,RichiesteCambiTurnoMensileRow)
            rowRichiesteCambiTurnoMensileRow.ItemArray = New Object() {ts, IdRichiesta, IdAccertatoreRichiedente, IdAccertatoreDestinatario, data, DataApprovazione, IdApprovatore, StatoApprovazione, CognomeNomeRichiedente, CognomeNomeDestinatario, Approvatore, TurnoRichiedente, TurnoDestinatario}
            Me.Rows.Add(rowRichiesteCambiTurnoMensileRow)
            Return rowRichiesteCambiTurnoMensileRow
        End Function
        
        Public Function FindByIdRichiesta(ByVal IdRichiesta As System.Guid) As RichiesteCambiTurnoMensileRow
            Return CType(Me.Rows.Find(New Object() {IdRichiesta}),RichiesteCambiTurnoMensileRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RichiesteCambiTurnoMensileDataTable = CType(MyBase.Clone,RichiesteCambiTurnoMensileDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RichiesteCambiTurnoMensileDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnts = Me.Columns("ts")
            Me.columnIdRichiesta = Me.Columns("IdRichiesta")
            Me.columnIdAccertatoreRichiedente = Me.Columns("IdAccertatoreRichiedente")
            Me.columnIdAccertatoreDestinatario = Me.Columns("IdAccertatoreDestinatario")
            Me.columndata = Me.Columns("data")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnIdApprovatore = Me.Columns("IdApprovatore")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnCognomeNomeRichiedente = Me.Columns("CognomeNomeRichiedente")
            Me.columnCognomeNomeDestinatario = Me.Columns("CognomeNomeDestinatario")
            Me.columnApprovatore = Me.Columns("Approvatore")
            Me.columnTurnoRichiedente = Me.Columns("TurnoRichiedente")
            Me.columnTurnoDestinatario = Me.Columns("TurnoDestinatario")
        End Sub
        
        Private Sub InitClass()
            Me.columnts = New DataColumn("ts", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnts)
            Me.columnIdRichiesta = New DataColumn("IdRichiesta", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdRichiesta)
            Me.columnIdAccertatoreRichiedente = New DataColumn("IdAccertatoreRichiedente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatoreRichiedente)
            Me.columnIdAccertatoreDestinatario = New DataColumn("IdAccertatoreDestinatario", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatoreDestinatario)
            Me.columndata = New DataColumn("data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndata)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnIdApprovatore = New DataColumn("IdApprovatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdApprovatore)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnCognomeNomeRichiedente = New DataColumn("CognomeNomeRichiedente", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNomeRichiedente)
            Me.columnCognomeNomeDestinatario = New DataColumn("CognomeNomeDestinatario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNomeDestinatario)
            Me.columnApprovatore = New DataColumn("Approvatore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatore)
            Me.columnTurnoRichiedente = New DataColumn("TurnoRichiedente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnoRichiedente)
            Me.columnTurnoDestinatario = New DataColumn("TurnoDestinatario", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnoDestinatario)
            Me.Constraints.Add(New UniqueConstraint("dsAmministrazioneCongediKey6", New DataColumn() {Me.columnIdRichiesta}, true))
            Me.columnIdRichiesta.AllowDBNull = false
            Me.columnIdRichiesta.Unique = true
            Me.columnStatoApprovazione.ReadOnly = true
            Me.columnCognomeNomeRichiedente.ReadOnly = true
            Me.columnCognomeNomeDestinatario.ReadOnly = true
        End Sub
        
        Public Function NewRichiesteCambiTurnoMensileRow() As RichiesteCambiTurnoMensileRow
            Return CType(Me.NewRow,RichiesteCambiTurnoMensileRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RichiesteCambiTurnoMensileRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RichiesteCambiTurnoMensileRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RichiesteCambiTurnoMensileRowChangedEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensileRowChanged(Me, New RichiesteCambiTurnoMensileRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensileRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RichiesteCambiTurnoMensileRowChangingEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensileRowChanging(Me, New RichiesteCambiTurnoMensileRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensileRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RichiesteCambiTurnoMensileRowDeletedEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensileRowDeleted(Me, New RichiesteCambiTurnoMensileRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensileRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RichiesteCambiTurnoMensileRowDeletingEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoMensileRowDeleting(Me, New RichiesteCambiTurnoMensileRowChangeEvent(CType(e.Row,RichiesteCambiTurnoMensileRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRichiesteCambiTurnoMensileRow(ByVal row As RichiesteCambiTurnoMensileRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoMensileRow
        Inherits DataRow
        
        Private tableRichiesteCambiTurnoMensile As RichiesteCambiTurnoMensileDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRichiesteCambiTurnoMensile = CType(Me.Table,RichiesteCambiTurnoMensileDataTable)
        End Sub
        
        Public Property ts As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.tsColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.tsColumn) = value
            End Set
        End Property
        
        Public Property IdRichiesta As System.Guid
            Get
                Return CType(Me(Me.tableRichiesteCambiTurnoMensile.IdRichiestaColumn),System.Guid)
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.IdRichiestaColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatoreRichiedente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreRichiedenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatoreDestinatario As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreDestinatarioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property data As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.dataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.dataColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property IdApprovatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.IdApprovatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.IdApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.StatoApprovazioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property CognomeNomeRichiedente As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.CognomeNomeRichiedenteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.CognomeNomeRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property CognomeNomeDestinatario As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.CognomeNomeDestinatarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.CognomeNomeDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property Approvatore As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.ApprovatoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.ApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property TurnoRichiedente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.TurnoRichiedenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.TurnoRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property TurnoDestinatario As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurnoMensile.TurnoDestinatarioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurnoMensile.TurnoDestinatarioColumn) = value
            End Set
        End Property
        
        Public Function IstsNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.tsColumn)
        End Function
        
        Public Sub SettsNull()
            Me(Me.tableRichiesteCambiTurnoMensile.tsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdAccertatoreRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreRichiedenteColumn)
        End Function
        
        Public Sub SetIdAccertatoreRichiedenteNull()
            Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdAccertatoreDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreDestinatarioColumn)
        End Function
        
        Public Sub SetIdAccertatoreDestinatarioNull()
            Me(Me.tableRichiesteCambiTurnoMensile.IdAccertatoreDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdataNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.dataColumn)
        End Function
        
        Public Sub SetdataNull()
            Me(Me.tableRichiesteCambiTurnoMensile.dataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableRichiesteCambiTurnoMensile.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.IdApprovatoreColumn)
        End Function
        
        Public Sub SetIdApprovatoreNull()
            Me(Me.tableRichiesteCambiTurnoMensile.IdApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableRichiesteCambiTurnoMensile.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.CognomeNomeRichiedenteColumn)
        End Function
        
        Public Sub SetCognomeNomeRichiedenteNull()
            Me(Me.tableRichiesteCambiTurnoMensile.CognomeNomeRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.CognomeNomeDestinatarioColumn)
        End Function
        
        Public Sub SetCognomeNomeDestinatarioNull()
            Me(Me.tableRichiesteCambiTurnoMensile.CognomeNomeDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.ApprovatoreColumn)
        End Function
        
        Public Sub SetApprovatoreNull()
            Me(Me.tableRichiesteCambiTurnoMensile.ApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.TurnoRichiedenteColumn)
        End Function
        
        Public Sub SetTurnoRichiedenteNull()
            Me(Me.tableRichiesteCambiTurnoMensile.TurnoRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurnoMensile.TurnoDestinatarioColumn)
        End Function
        
        Public Sub SetTurnoDestinatarioNull()
            Me(Me.tableRichiesteCambiTurnoMensile.TurnoDestinatarioColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoMensileRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RichiesteCambiTurnoMensileRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RichiesteCambiTurnoMensileRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RichiesteCambiTurnoMensileRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RiposiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnTTMATR As DataColumn
        
        Private columnTTGGGG As DataColumn
        
        Private columnTTMMGG As DataColumn
        
        Private columnTTAAGG As DataColumn
        
        Private columnTTCTUR As DataColumn
        
        Private columnDataRiposo As DataColumn
        
        Friend Sub New()
            MyBase.New("Riposi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property TTMATRColumn As DataColumn
            Get
                Return Me.columnTTMATR
            End Get
        End Property
        
        Friend ReadOnly Property TTGGGGColumn As DataColumn
            Get
                Return Me.columnTTGGGG
            End Get
        End Property
        
        Friend ReadOnly Property TTMMGGColumn As DataColumn
            Get
                Return Me.columnTTMMGG
            End Get
        End Property
        
        Friend ReadOnly Property TTAAGGColumn As DataColumn
            Get
                Return Me.columnTTAAGG
            End Get
        End Property
        
        Friend ReadOnly Property TTCTURColumn As DataColumn
            Get
                Return Me.columnTTCTUR
            End Get
        End Property
        
        Friend ReadOnly Property DataRiposoColumn As DataColumn
            Get
                Return Me.columnDataRiposo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RiposiRow
            Get
                Return CType(Me.Rows(index),RiposiRow)
            End Get
        End Property
        
        Public Event RiposiRowChanged As RiposiRowChangeEventHandler
        
        Public Event RiposiRowChanging As RiposiRowChangeEventHandler
        
        Public Event RiposiRowDeleted As RiposiRowChangeEventHandler
        
        Public Event RiposiRowDeleting As RiposiRowChangeEventHandler
        
        Public Overloads Sub AddRiposiRow(ByVal row As RiposiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRiposiRow(ByVal TTMATR As String, ByVal TTGGGG As String, ByVal TTMMGG As String, ByVal TTAAGG As String, ByVal TTCTUR As String, ByVal DataRiposo As String) As RiposiRow
            Dim rowRiposiRow As RiposiRow = CType(Me.NewRow,RiposiRow)
            rowRiposiRow.ItemArray = New Object() {Nothing, TTMATR, TTGGGG, TTMMGG, TTAAGG, TTCTUR, DataRiposo}
            Me.Rows.Add(rowRiposiRow)
            Return rowRiposiRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As RiposiRow
            Return CType(Me.Rows.Find(New Object() {ID}),RiposiRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RiposiDataTable = CType(MyBase.Clone,RiposiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RiposiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnTTMATR = Me.Columns("TTMATR")
            Me.columnTTGGGG = Me.Columns("TTGGGG")
            Me.columnTTMMGG = Me.Columns("TTMMGG")
            Me.columnTTAAGG = Me.Columns("TTAAGG")
            Me.columnTTCTUR = Me.Columns("TTCTUR")
            Me.columnDataRiposo = Me.Columns("DataRiposo")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnTTMATR = New DataColumn("TTMATR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTMATR)
            Me.columnTTGGGG = New DataColumn("TTGGGG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTGGGG)
            Me.columnTTMMGG = New DataColumn("TTMMGG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTMMGG)
            Me.columnTTAAGG = New DataColumn("TTAAGG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTAAGG)
            Me.columnTTCTUR = New DataColumn("TTCTUR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTCTUR)
            Me.columnDataRiposo = New DataColumn("DataRiposo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataRiposo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        Public Function NewRiposiRow() As RiposiRow
            Return CType(Me.NewRow,RiposiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RiposiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RiposiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RiposiRowChangedEvent) Is Nothing) Then
                RaiseEvent RiposiRowChanged(Me, New RiposiRowChangeEvent(CType(e.Row,RiposiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RiposiRowChangingEvent) Is Nothing) Then
                RaiseEvent RiposiRowChanging(Me, New RiposiRowChangeEvent(CType(e.Row,RiposiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RiposiRowDeletedEvent) Is Nothing) Then
                RaiseEvent RiposiRowDeleted(Me, New RiposiRowChangeEvent(CType(e.Row,RiposiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RiposiRowDeletingEvent) Is Nothing) Then
                RaiseEvent RiposiRowDeleting(Me, New RiposiRowChangeEvent(CType(e.Row,RiposiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRiposiRow(ByVal row As RiposiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RiposiRow
        Inherits DataRow
        
        Private tableRiposi As RiposiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRiposi = CType(Me.Table,RiposiDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableRiposi.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableRiposi.IDColumn) = value
            End Set
        End Property
        
        Public Property TTMATR As String
            Get
                Try 
                    Return CType(Me(Me.tableRiposi.TTMATRColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRiposi.TTMATRColumn) = value
            End Set
        End Property
        
        Public Property TTGGGG As String
            Get
                Try 
                    Return CType(Me(Me.tableRiposi.TTGGGGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRiposi.TTGGGGColumn) = value
            End Set
        End Property
        
        Public Property TTMMGG As String
            Get
                Try 
                    Return CType(Me(Me.tableRiposi.TTMMGGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRiposi.TTMMGGColumn) = value
            End Set
        End Property
        
        Public Property TTAAGG As String
            Get
                Try 
                    Return CType(Me(Me.tableRiposi.TTAAGGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRiposi.TTAAGGColumn) = value
            End Set
        End Property
        
        Public Property TTCTUR As String
            Get
                Try 
                    Return CType(Me(Me.tableRiposi.TTCTURColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRiposi.TTCTURColumn) = value
            End Set
        End Property
        
        Public Property DataRiposo As String
            Get
                Try 
                    Return CType(Me(Me.tableRiposi.DataRiposoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRiposi.DataRiposoColumn) = value
            End Set
        End Property
        
        Public Function IsTTMATRNull() As Boolean
            Return Me.IsNull(Me.tableRiposi.TTMATRColumn)
        End Function
        
        Public Sub SetTTMATRNull()
            Me(Me.tableRiposi.TTMATRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTGGGGNull() As Boolean
            Return Me.IsNull(Me.tableRiposi.TTGGGGColumn)
        End Function
        
        Public Sub SetTTGGGGNull()
            Me(Me.tableRiposi.TTGGGGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTMMGGNull() As Boolean
            Return Me.IsNull(Me.tableRiposi.TTMMGGColumn)
        End Function
        
        Public Sub SetTTMMGGNull()
            Me(Me.tableRiposi.TTMMGGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTAAGGNull() As Boolean
            Return Me.IsNull(Me.tableRiposi.TTAAGGColumn)
        End Function
        
        Public Sub SetTTAAGGNull()
            Me(Me.tableRiposi.TTAAGGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTCTURNull() As Boolean
            Return Me.IsNull(Me.tableRiposi.TTCTURColumn)
        End Function
        
        Public Sub SetTTCTURNull()
            Me(Me.tableRiposi.TTCTURColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataRiposoNull() As Boolean
            Return Me.IsNull(Me.tableRiposi.DataRiposoColumn)
        End Function
        
        Public Sub SetDataRiposoNull()
            Me(Me.tableRiposi.DataRiposoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RiposiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RiposiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RiposiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RiposiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_MancataTimbraturaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApprovatore As DataColumn
        
        Private columnID As DataColumn
        
        Private columnAccertatoreId As DataColumn
        
        Private columnData As DataColumn
        
        Private columnEntrata1 As DataColumn
        
        Private columnUscita1 As DataColumn
        
        Private columnEntrata2 As DataColumn
        
        Private columnUscita2 As DataColumn
        
        Private columnDalleOre1 As DataColumn
        
        Private columnAlleOre1 As DataColumn
        
        Private columnDalleOre2 As DataColumn
        
        Private columnAlleOre2 As DataColumn
        
        Private columnDalleMin1 As DataColumn
        
        Private columnAlleMin1 As DataColumn
        
        Private columnDalleMin2 As DataColumn
        
        Private columnAlleMin2 As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnApprovatoDa As DataColumn
        
        Private columnCreatedOn As DataColumn
        
        Private columnCognomeNome As DataColumn
        
        Private columnStatoMancataTimbratura As DataColumn
        
        Private columnDataInserimento As DataColumn
        
        Private columnModifiedOn As DataColumn
        
        Private columnCreatedBy As DataColumn
        
        Private columnModifiedBy As DataColumn
        
        Friend Sub New()
            MyBase.New("Accertatori_MancataTimbratura")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoreColumn As DataColumn
            Get
                Return Me.columnApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property AccertatoreIdColumn As DataColumn
            Get
                Return Me.columnAccertatoreId
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property Entrata1Column As DataColumn
            Get
                Return Me.columnEntrata1
            End Get
        End Property
        
        Friend ReadOnly Property Uscita1Column As DataColumn
            Get
                Return Me.columnUscita1
            End Get
        End Property
        
        Friend ReadOnly Property Entrata2Column As DataColumn
            Get
                Return Me.columnEntrata2
            End Get
        End Property
        
        Friend ReadOnly Property Uscita2Column As DataColumn
            Get
                Return Me.columnUscita2
            End Get
        End Property
        
        Friend ReadOnly Property DalleOre1Column As DataColumn
            Get
                Return Me.columnDalleOre1
            End Get
        End Property
        
        Friend ReadOnly Property AlleOre1Column As DataColumn
            Get
                Return Me.columnAlleOre1
            End Get
        End Property
        
        Friend ReadOnly Property DalleOre2Column As DataColumn
            Get
                Return Me.columnDalleOre2
            End Get
        End Property
        
        Friend ReadOnly Property AlleOre2Column As DataColumn
            Get
                Return Me.columnAlleOre2
            End Get
        End Property
        
        Friend ReadOnly Property DalleMin1Column As DataColumn
            Get
                Return Me.columnDalleMin1
            End Get
        End Property
        
        Friend ReadOnly Property AlleMin1Column As DataColumn
            Get
                Return Me.columnAlleMin1
            End Get
        End Property
        
        Friend ReadOnly Property DalleMin2Column As DataColumn
            Get
                Return Me.columnDalleMin2
            End Get
        End Property
        
        Friend ReadOnly Property AlleMin2Column As DataColumn
            Get
                Return Me.columnAlleMin2
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoDaColumn As DataColumn
            Get
                Return Me.columnApprovatoDa
            End Get
        End Property
        
        Friend ReadOnly Property CreatedOnColumn As DataColumn
            Get
                Return Me.columnCreatedOn
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeColumn As DataColumn
            Get
                Return Me.columnCognomeNome
            End Get
        End Property
        
        Friend ReadOnly Property StatoMancataTimbraturaColumn As DataColumn
            Get
                Return Me.columnStatoMancataTimbratura
            End Get
        End Property
        
        Friend ReadOnly Property DataInserimentoColumn As DataColumn
            Get
                Return Me.columnDataInserimento
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedOnColumn As DataColumn
            Get
                Return Me.columnModifiedOn
            End Get
        End Property
        
        Friend ReadOnly Property CreatedByColumn As DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedByColumn As DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Accertatori_MancataTimbraturaRow
            Get
                Return CType(Me.Rows(index),Accertatori_MancataTimbraturaRow)
            End Get
        End Property
        
        Public Event Accertatori_MancataTimbraturaRowChanged As Accertatori_MancataTimbraturaRowChangeEventHandler
        
        Public Event Accertatori_MancataTimbraturaRowChanging As Accertatori_MancataTimbraturaRowChangeEventHandler
        
        Public Event Accertatori_MancataTimbraturaRowDeleted As Accertatori_MancataTimbraturaRowChangeEventHandler
        
        Public Event Accertatori_MancataTimbraturaRowDeleting As Accertatori_MancataTimbraturaRowChangeEventHandler
        
        Public Overloads Sub AddAccertatori_MancataTimbraturaRow(ByVal row As Accertatori_MancataTimbraturaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatori_MancataTimbraturaRow( _
                    ByVal Approvatore As String,  _
                    ByVal ID As System.Guid,  _
                    ByVal AccertatoreId As Integer,  _
                    ByVal Data As Date,  _
                    ByVal Entrata1 As Date,  _
                    ByVal Uscita1 As Date,  _
                    ByVal Entrata2 As Date,  _
                    ByVal Uscita2 As Date,  _
                    ByVal DalleOre1 As Integer,  _
                    ByVal AlleOre1 As Integer,  _
                    ByVal DalleOre2 As Integer,  _
                    ByVal AlleOre2 As Integer,  _
                    ByVal DalleMin1 As Integer,  _
                    ByVal AlleMin1 As Integer,  _
                    ByVal DalleMin2 As Integer,  _
                    ByVal AlleMin2 As Integer,  _
                    ByVal StatoApprovazione As String,  _
                    ByVal DataApprovazione As Date,  _
                    ByVal ApprovatoDa As Integer,  _
                    ByVal CreatedOn As Date,  _
                    ByVal CognomeNome As String,  _
                    ByVal StatoMancataTimbratura As Integer,  _
                    ByVal DataInserimento As Date,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal CreatedBy As String,  _
                    ByVal ModifiedBy As String) As Accertatori_MancataTimbraturaRow
            Dim rowAccertatori_MancataTimbraturaRow As Accertatori_MancataTimbraturaRow = CType(Me.NewRow,Accertatori_MancataTimbraturaRow)
            rowAccertatori_MancataTimbraturaRow.ItemArray = New Object() {Approvatore, ID, AccertatoreId, Data, Entrata1, Uscita1, Entrata2, Uscita2, DalleOre1, AlleOre1, DalleOre2, AlleOre2, DalleMin1, AlleMin1, DalleMin2, AlleMin2, StatoApprovazione, DataApprovazione, ApprovatoDa, CreatedOn, CognomeNome, StatoMancataTimbratura, DataInserimento, ModifiedOn, CreatedBy, ModifiedBy}
            Me.Rows.Add(rowAccertatori_MancataTimbraturaRow)
            Return rowAccertatori_MancataTimbraturaRow
        End Function
        
        Public Function FindByID(ByVal ID As System.Guid) As Accertatori_MancataTimbraturaRow
            Return CType(Me.Rows.Find(New Object() {ID}),Accertatori_MancataTimbraturaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Accertatori_MancataTimbraturaDataTable = CType(MyBase.Clone,Accertatori_MancataTimbraturaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Accertatori_MancataTimbraturaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApprovatore = Me.Columns("Approvatore")
            Me.columnID = Me.Columns("ID")
            Me.columnAccertatoreId = Me.Columns("AccertatoreId")
            Me.columnData = Me.Columns("Data")
            Me.columnEntrata1 = Me.Columns("Entrata1")
            Me.columnUscita1 = Me.Columns("Uscita1")
            Me.columnEntrata2 = Me.Columns("Entrata2")
            Me.columnUscita2 = Me.Columns("Uscita2")
            Me.columnDalleOre1 = Me.Columns("DalleOre1")
            Me.columnAlleOre1 = Me.Columns("AlleOre1")
            Me.columnDalleOre2 = Me.Columns("DalleOre2")
            Me.columnAlleOre2 = Me.Columns("AlleOre2")
            Me.columnDalleMin1 = Me.Columns("DalleMin1")
            Me.columnAlleMin1 = Me.Columns("AlleMin1")
            Me.columnDalleMin2 = Me.Columns("DalleMin2")
            Me.columnAlleMin2 = Me.Columns("AlleMin2")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnApprovatoDa = Me.Columns("ApprovatoDa")
            Me.columnCreatedOn = Me.Columns("CreatedOn")
            Me.columnCognomeNome = Me.Columns("CognomeNome")
            Me.columnStatoMancataTimbratura = Me.Columns("StatoMancataTimbratura")
            Me.columnDataInserimento = Me.Columns("DataInserimento")
            Me.columnModifiedOn = Me.Columns("ModifiedOn")
            Me.columnCreatedBy = Me.Columns("CreatedBy")
            Me.columnModifiedBy = Me.Columns("ModifiedBy")
        End Sub
        
        Private Sub InitClass()
            Me.columnApprovatore = New DataColumn("Approvatore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatore)
            Me.columnID = New DataColumn("ID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnAccertatoreId = New DataColumn("AccertatoreId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccertatoreId)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnEntrata1 = New DataColumn("Entrata1", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEntrata1)
            Me.columnUscita1 = New DataColumn("Uscita1", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUscita1)
            Me.columnEntrata2 = New DataColumn("Entrata2", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEntrata2)
            Me.columnUscita2 = New DataColumn("Uscita2", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUscita2)
            Me.columnDalleOre1 = New DataColumn("DalleOre1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalleOre1)
            Me.columnAlleOre1 = New DataColumn("AlleOre1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlleOre1)
            Me.columnDalleOre2 = New DataColumn("DalleOre2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalleOre2)
            Me.columnAlleOre2 = New DataColumn("AlleOre2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlleOre2)
            Me.columnDalleMin1 = New DataColumn("DalleMin1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalleMin1)
            Me.columnAlleMin1 = New DataColumn("AlleMin1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlleMin1)
            Me.columnDalleMin2 = New DataColumn("DalleMin2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalleMin2)
            Me.columnAlleMin2 = New DataColumn("AlleMin2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlleMin2)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnApprovatoDa = New DataColumn("ApprovatoDa", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatoDa)
            Me.columnCreatedOn = New DataColumn("CreatedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedOn)
            Me.columnCognomeNome = New DataColumn("CognomeNome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNome)
            Me.columnStatoMancataTimbratura = New DataColumn("StatoMancataTimbratura", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoMancataTimbratura)
            Me.columnDataInserimento = New DataColumn("DataInserimento", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataInserimento)
            Me.columnModifiedOn = New DataColumn("ModifiedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedOn)
            Me.columnCreatedBy = New DataColumn("CreatedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedBy)
            Me.columnModifiedBy = New DataColumn("ModifiedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedBy)
            Me.Constraints.Add(New UniqueConstraint("dsAmministrazioneCongediKey1", New DataColumn() {Me.columnID}, true))
            Me.columnApprovatore.ReadOnly = true
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnDalleOre1.ReadOnly = true
            Me.columnAlleOre1.ReadOnly = true
            Me.columnDalleOre2.ReadOnly = true
            Me.columnAlleOre2.ReadOnly = true
            Me.columnDalleMin1.ReadOnly = true
            Me.columnAlleMin1.ReadOnly = true
            Me.columnDalleMin2.ReadOnly = true
            Me.columnAlleMin2.ReadOnly = true
            Me.columnStatoApprovazione.ReadOnly = true
            Me.columnCognomeNome.ReadOnly = true
        End Sub
        
        Public Function NewAccertatori_MancataTimbraturaRow() As Accertatori_MancataTimbraturaRow
            Return CType(Me.NewRow,Accertatori_MancataTimbraturaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Accertatori_MancataTimbraturaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Accertatori_MancataTimbraturaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Accertatori_MancataTimbraturaRowChangedEvent) Is Nothing) Then
                RaiseEvent Accertatori_MancataTimbraturaRowChanged(Me, New Accertatori_MancataTimbraturaRowChangeEvent(CType(e.Row,Accertatori_MancataTimbraturaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Accertatori_MancataTimbraturaRowChangingEvent) Is Nothing) Then
                RaiseEvent Accertatori_MancataTimbraturaRowChanging(Me, New Accertatori_MancataTimbraturaRowChangeEvent(CType(e.Row,Accertatori_MancataTimbraturaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Accertatori_MancataTimbraturaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Accertatori_MancataTimbraturaRowDeleted(Me, New Accertatori_MancataTimbraturaRowChangeEvent(CType(e.Row,Accertatori_MancataTimbraturaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Accertatori_MancataTimbraturaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Accertatori_MancataTimbraturaRowDeleting(Me, New Accertatori_MancataTimbraturaRowChangeEvent(CType(e.Row,Accertatori_MancataTimbraturaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatori_MancataTimbraturaRow(ByVal row As Accertatori_MancataTimbraturaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_MancataTimbraturaRow
        Inherits DataRow
        
        Private tableAccertatori_MancataTimbratura As Accertatori_MancataTimbraturaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatori_MancataTimbratura = CType(Me.Table,Accertatori_MancataTimbraturaDataTable)
        End Sub
        
        Public Property Approvatore As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.ApprovatoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.ApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property ID As System.Guid
            Get
                Return CType(Me(Me.tableAccertatori_MancataTimbratura.IDColumn),System.Guid)
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.IDColumn) = value
            End Set
        End Property
        
        Public Property AccertatoreId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.AccertatoreIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.AccertatoreIdColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.DataColumn) = value
            End Set
        End Property
        
        Public Property Entrata1 As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.Entrata1Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.Entrata1Column) = value
            End Set
        End Property
        
        Public Property Uscita1 As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.Uscita1Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.Uscita1Column) = value
            End Set
        End Property
        
        Public Property Entrata2 As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.Entrata2Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.Entrata2Column) = value
            End Set
        End Property
        
        Public Property Uscita2 As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.Uscita2Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.Uscita2Column) = value
            End Set
        End Property
        
        Public Property DalleOre1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.DalleOre1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.DalleOre1Column) = value
            End Set
        End Property
        
        Public Property AlleOre1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.AlleOre1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.AlleOre1Column) = value
            End Set
        End Property
        
        Public Property DalleOre2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.DalleOre2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.DalleOre2Column) = value
            End Set
        End Property
        
        Public Property AlleOre2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.AlleOre2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.AlleOre2Column) = value
            End Set
        End Property
        
        Public Property DalleMin1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.DalleMin1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.DalleMin1Column) = value
            End Set
        End Property
        
        Public Property AlleMin1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.AlleMin1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.AlleMin1Column) = value
            End Set
        End Property
        
        Public Property DalleMin2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.DalleMin2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.DalleMin2Column) = value
            End Set
        End Property
        
        Public Property AlleMin2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.AlleMin2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.AlleMin2Column) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.StatoApprovazioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property ApprovatoDa As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.ApprovatoDaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.ApprovatoDaColumn) = value
            End Set
        End Property
        
        Public Property CreatedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.CreatedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.CreatedOnColumn) = value
            End Set
        End Property
        
        Public Property CognomeNome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.CognomeNomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.CognomeNomeColumn) = value
            End Set
        End Property
        
        Public Property StatoMancataTimbratura As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.StatoMancataTimbraturaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.StatoMancataTimbraturaColumn) = value
            End Set
        End Property
        
        Public Property DataInserimento As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.DataInserimentoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.DataInserimentoColumn) = value
            End Set
        End Property
        
        Public Property ModifiedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.ModifiedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.ModifiedOnColumn) = value
            End Set
        End Property
        
        Public Property CreatedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.CreatedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.CreatedByColumn) = value
            End Set
        End Property
        
        Public Property ModifiedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_MancataTimbratura.ModifiedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_MancataTimbratura.ModifiedByColumn) = value
            End Set
        End Property
        
        Public Function IsApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.ApprovatoreColumn)
        End Function
        
        Public Sub SetApprovatoreNull()
            Me(Me.tableAccertatori_MancataTimbratura.ApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAccertatoreIdNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.AccertatoreIdColumn)
        End Function
        
        Public Sub SetAccertatoreIdNull()
            Me(Me.tableAccertatori_MancataTimbratura.AccertatoreIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableAccertatori_MancataTimbratura.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEntrata1Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.Entrata1Column)
        End Function
        
        Public Sub SetEntrata1Null()
            Me(Me.tableAccertatori_MancataTimbratura.Entrata1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsUscita1Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.Uscita1Column)
        End Function
        
        Public Sub SetUscita1Null()
            Me(Me.tableAccertatori_MancataTimbratura.Uscita1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsEntrata2Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.Entrata2Column)
        End Function
        
        Public Sub SetEntrata2Null()
            Me(Me.tableAccertatori_MancataTimbratura.Entrata2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsUscita2Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.Uscita2Column)
        End Function
        
        Public Sub SetUscita2Null()
            Me(Me.tableAccertatori_MancataTimbratura.Uscita2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalleOre1Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.DalleOre1Column)
        End Function
        
        Public Sub SetDalleOre1Null()
            Me(Me.tableAccertatori_MancataTimbratura.DalleOre1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlleOre1Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.AlleOre1Column)
        End Function
        
        Public Sub SetAlleOre1Null()
            Me(Me.tableAccertatori_MancataTimbratura.AlleOre1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalleOre2Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.DalleOre2Column)
        End Function
        
        Public Sub SetDalleOre2Null()
            Me(Me.tableAccertatori_MancataTimbratura.DalleOre2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlleOre2Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.AlleOre2Column)
        End Function
        
        Public Sub SetAlleOre2Null()
            Me(Me.tableAccertatori_MancataTimbratura.AlleOre2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalleMin1Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.DalleMin1Column)
        End Function
        
        Public Sub SetDalleMin1Null()
            Me(Me.tableAccertatori_MancataTimbratura.DalleMin1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlleMin1Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.AlleMin1Column)
        End Function
        
        Public Sub SetAlleMin1Null()
            Me(Me.tableAccertatori_MancataTimbratura.AlleMin1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalleMin2Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.DalleMin2Column)
        End Function
        
        Public Sub SetDalleMin2Null()
            Me(Me.tableAccertatori_MancataTimbratura.DalleMin2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlleMin2Null() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.AlleMin2Column)
        End Function
        
        Public Sub SetAlleMin2Null()
            Me(Me.tableAccertatori_MancataTimbratura.AlleMin2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableAccertatori_MancataTimbratura.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableAccertatori_MancataTimbratura.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApprovatoDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.ApprovatoDaColumn)
        End Function
        
        Public Sub SetApprovatoDaNull()
            Me(Me.tableAccertatori_MancataTimbratura.ApprovatoDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.CreatedOnColumn)
        End Function
        
        Public Sub SetCreatedOnNull()
            Me(Me.tableAccertatori_MancataTimbratura.CreatedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.CognomeNomeColumn)
        End Function
        
        Public Sub SetCognomeNomeNull()
            Me(Me.tableAccertatori_MancataTimbratura.CognomeNomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoMancataTimbraturaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.StatoMancataTimbraturaColumn)
        End Function
        
        Public Sub SetStatoMancataTimbraturaNull()
            Me(Me.tableAccertatori_MancataTimbratura.StatoMancataTimbraturaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataInserimentoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.DataInserimentoColumn)
        End Function
        
        Public Sub SetDataInserimentoNull()
            Me(Me.tableAccertatori_MancataTimbratura.DataInserimentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.ModifiedOnColumn)
        End Function
        
        Public Sub SetModifiedOnNull()
            Me(Me.tableAccertatori_MancataTimbratura.ModifiedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.CreatedByColumn)
        End Function
        
        Public Sub SetCreatedByNull()
            Me(Me.tableAccertatori_MancataTimbratura.CreatedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_MancataTimbratura.ModifiedByColumn)
        End Function
        
        Public Sub SetModifiedByNull()
            Me(Me.tableAccertatori_MancataTimbratura.ModifiedByColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_MancataTimbraturaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Accertatori_MancataTimbraturaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Accertatori_MancataTimbraturaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Accertatori_MancataTimbraturaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_CausaleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnNome As DataColumn
        
        Private columnCodice As DataColumn
        
        Friend Sub New()
            MyBase.New("Accertatori_Causale")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property CodiceColumn As DataColumn
            Get
                Return Me.columnCodice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Accertatori_CausaleRow
            Get
                Return CType(Me.Rows(index),Accertatori_CausaleRow)
            End Get
        End Property
        
        Public Event Accertatori_CausaleRowChanged As Accertatori_CausaleRowChangeEventHandler
        
        Public Event Accertatori_CausaleRowChanging As Accertatori_CausaleRowChangeEventHandler
        
        Public Event Accertatori_CausaleRowDeleted As Accertatori_CausaleRowChangeEventHandler
        
        Public Event Accertatori_CausaleRowDeleting As Accertatori_CausaleRowChangeEventHandler
        
        Public Overloads Sub AddAccertatori_CausaleRow(ByVal row As Accertatori_CausaleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatori_CausaleRow(ByVal ID As String, ByVal Nome As String, ByVal Codice As String) As Accertatori_CausaleRow
            Dim rowAccertatori_CausaleRow As Accertatori_CausaleRow = CType(Me.NewRow,Accertatori_CausaleRow)
            rowAccertatori_CausaleRow.ItemArray = New Object() {ID, Nome, Codice}
            Me.Rows.Add(rowAccertatori_CausaleRow)
            Return rowAccertatori_CausaleRow
        End Function
        
        Public Function FindByID(ByVal ID As String) As Accertatori_CausaleRow
            Return CType(Me.Rows.Find(New Object() {ID}),Accertatori_CausaleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Accertatori_CausaleDataTable = CType(MyBase.Clone,Accertatori_CausaleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Accertatori_CausaleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnNome = Me.Columns("Nome")
            Me.columnCodice = Me.Columns("Codice")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnCodice = New DataColumn("Codice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodice)
            Me.Constraints.Add(New UniqueConstraint("dsAmministrazioneCongediKey8", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnNome.ReadOnly = true
            Me.columnCodice.ReadOnly = true
        End Sub
        
        Public Function NewAccertatori_CausaleRow() As Accertatori_CausaleRow
            Return CType(Me.NewRow,Accertatori_CausaleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Accertatori_CausaleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Accertatori_CausaleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Accertatori_CausaleRowChangedEvent) Is Nothing) Then
                RaiseEvent Accertatori_CausaleRowChanged(Me, New Accertatori_CausaleRowChangeEvent(CType(e.Row,Accertatori_CausaleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Accertatori_CausaleRowChangingEvent) Is Nothing) Then
                RaiseEvent Accertatori_CausaleRowChanging(Me, New Accertatori_CausaleRowChangeEvent(CType(e.Row,Accertatori_CausaleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Accertatori_CausaleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Accertatori_CausaleRowDeleted(Me, New Accertatori_CausaleRowChangeEvent(CType(e.Row,Accertatori_CausaleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Accertatori_CausaleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Accertatori_CausaleRowDeleting(Me, New Accertatori_CausaleRowChangeEvent(CType(e.Row,Accertatori_CausaleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatori_CausaleRow(ByVal row As Accertatori_CausaleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_CausaleRow
        Inherits DataRow
        
        Private tableAccertatori_Causale As Accertatori_CausaleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatori_Causale = CType(Me.Table,Accertatori_CausaleDataTable)
        End Sub
        
        Public Property ID As String
            Get
                Return CType(Me(Me.tableAccertatori_Causale.IDColumn),String)
            End Get
            Set
                Me(Me.tableAccertatori_Causale.IDColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_Causale.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_Causale.NomeColumn) = value
            End Set
        End Property
        
        Public Property Codice As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_Causale.CodiceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_Causale.CodiceColumn) = value
            End Set
        End Property
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_Causale.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableAccertatori_Causale.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodiceNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_Causale.CodiceColumn)
        End Function
        
        Public Sub SetCodiceNull()
            Me(Me.tableAccertatori_Causale.CodiceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_CausaleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Accertatori_CausaleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Accertatori_CausaleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Accertatori_CausaleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_PrenotazioniFerieCongediDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGIORNO As DataColumn
        
        Private columnListaUser As DataColumn
        
        Private columnnum As DataColumn
        
        Friend Sub New()
            MyBase.New("SP_PrenotazioniFerieCongedi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GIORNOColumn As DataColumn
            Get
                Return Me.columnGIORNO
            End Get
        End Property
        
        Friend ReadOnly Property ListaUserColumn As DataColumn
            Get
                Return Me.columnListaUser
            End Get
        End Property
        
        Friend ReadOnly Property numColumn As DataColumn
            Get
                Return Me.columnnum
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_PrenotazioniFerieCongediRow
            Get
                Return CType(Me.Rows(index),SP_PrenotazioniFerieCongediRow)
            End Get
        End Property
        
        Public Event SP_PrenotazioniFerieCongediRowChanged As SP_PrenotazioniFerieCongediRowChangeEventHandler
        
        Public Event SP_PrenotazioniFerieCongediRowChanging As SP_PrenotazioniFerieCongediRowChangeEventHandler
        
        Public Event SP_PrenotazioniFerieCongediRowDeleted As SP_PrenotazioniFerieCongediRowChangeEventHandler
        
        Public Event SP_PrenotazioniFerieCongediRowDeleting As SP_PrenotazioniFerieCongediRowChangeEventHandler
        
        Public Overloads Sub AddSP_PrenotazioniFerieCongediRow(ByVal row As SP_PrenotazioniFerieCongediRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSP_PrenotazioniFerieCongediRow(ByVal GIORNO As String, ByVal ListaUser As String, ByVal num As Integer) As SP_PrenotazioniFerieCongediRow
            Dim rowSP_PrenotazioniFerieCongediRow As SP_PrenotazioniFerieCongediRow = CType(Me.NewRow,SP_PrenotazioniFerieCongediRow)
            rowSP_PrenotazioniFerieCongediRow.ItemArray = New Object() {GIORNO, ListaUser, num}
            Me.Rows.Add(rowSP_PrenotazioniFerieCongediRow)
            Return rowSP_PrenotazioniFerieCongediRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SP_PrenotazioniFerieCongediDataTable = CType(MyBase.Clone,SP_PrenotazioniFerieCongediDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SP_PrenotazioniFerieCongediDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGIORNO = Me.Columns("GIORNO")
            Me.columnListaUser = Me.Columns("ListaUser")
            Me.columnnum = Me.Columns("num")
        End Sub
        
        Private Sub InitClass()
            Me.columnGIORNO = New DataColumn("GIORNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGIORNO)
            Me.columnListaUser = New DataColumn("ListaUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnListaUser)
            Me.columnnum = New DataColumn("num", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnum)
            Me.columnGIORNO.AllowDBNull = false
        End Sub
        
        Public Function NewSP_PrenotazioniFerieCongediRow() As SP_PrenotazioniFerieCongediRow
            Return CType(Me.NewRow,SP_PrenotazioniFerieCongediRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SP_PrenotazioniFerieCongediRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_PrenotazioniFerieCongediRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_PrenotazioniFerieCongediRowChangedEvent) Is Nothing) Then
                RaiseEvent SP_PrenotazioniFerieCongediRowChanged(Me, New SP_PrenotazioniFerieCongediRowChangeEvent(CType(e.Row,SP_PrenotazioniFerieCongediRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_PrenotazioniFerieCongediRowChangingEvent) Is Nothing) Then
                RaiseEvent SP_PrenotazioniFerieCongediRowChanging(Me, New SP_PrenotazioniFerieCongediRowChangeEvent(CType(e.Row,SP_PrenotazioniFerieCongediRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_PrenotazioniFerieCongediRowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_PrenotazioniFerieCongediRowDeleted(Me, New SP_PrenotazioniFerieCongediRowChangeEvent(CType(e.Row,SP_PrenotazioniFerieCongediRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_PrenotazioniFerieCongediRowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_PrenotazioniFerieCongediRowDeleting(Me, New SP_PrenotazioniFerieCongediRowChangeEvent(CType(e.Row,SP_PrenotazioniFerieCongediRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSP_PrenotazioniFerieCongediRow(ByVal row As SP_PrenotazioniFerieCongediRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_PrenotazioniFerieCongediRow
        Inherits DataRow
        
        Private tableSP_PrenotazioniFerieCongedi As SP_PrenotazioniFerieCongediDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_PrenotazioniFerieCongedi = CType(Me.Table,SP_PrenotazioniFerieCongediDataTable)
        End Sub
        
        Public Property GIORNO As String
            Get
                Return CType(Me(Me.tableSP_PrenotazioniFerieCongedi.GIORNOColumn),String)
            End Get
            Set
                Me(Me.tableSP_PrenotazioniFerieCongedi.GIORNOColumn) = value
            End Set
        End Property
        
        Public Property ListaUser As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_PrenotazioniFerieCongedi.ListaUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_PrenotazioniFerieCongedi.ListaUserColumn) = value
            End Set
        End Property
        
        Public Property num As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_PrenotazioniFerieCongedi.numColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_PrenotazioniFerieCongedi.numColumn) = value
            End Set
        End Property
        
        Public Function IsListaUserNull() As Boolean
            Return Me.IsNull(Me.tableSP_PrenotazioniFerieCongedi.ListaUserColumn)
        End Function
        
        Public Sub SetListaUserNull()
            Me(Me.tableSP_PrenotazioniFerieCongedi.ListaUserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnumNull() As Boolean
            Return Me.IsNull(Me.tableSP_PrenotazioniFerieCongedi.numColumn)
        End Function
        
        Public Sub SetnumNull()
            Me(Me.tableSP_PrenotazioniFerieCongedi.numColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SP_PrenotazioniFerieCongediRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SP_PrenotazioniFerieCongediRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SP_PrenotazioniFerieCongediRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SP_PrenotazioniFerieCongediRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Table1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid As DataColumn
        
        Private columnCHIAVE As DataColumn
        
        Private columnGIORNO As DataColumn
        
        Private columnNUM As DataColumn
        
        Private columnIDACCERTATORE As DataColumn
        
        Private columnIDUSER As DataColumn
        
        Private columnLISTAUSER As DataColumn
        
        Private columnDATAEORA As DataColumn
        
        Friend Sub New()
            MyBase.New("Table1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property idColumn As DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        Friend ReadOnly Property CHIAVEColumn As DataColumn
            Get
                Return Me.columnCHIAVE
            End Get
        End Property
        
        Friend ReadOnly Property GIORNOColumn As DataColumn
            Get
                Return Me.columnGIORNO
            End Get
        End Property
        
        Friend ReadOnly Property NUMColumn As DataColumn
            Get
                Return Me.columnNUM
            End Get
        End Property
        
        Friend ReadOnly Property IDACCERTATOREColumn As DataColumn
            Get
                Return Me.columnIDACCERTATORE
            End Get
        End Property
        
        Friend ReadOnly Property IDUSERColumn As DataColumn
            Get
                Return Me.columnIDUSER
            End Get
        End Property
        
        Friend ReadOnly Property LISTAUSERColumn As DataColumn
            Get
                Return Me.columnLISTAUSER
            End Get
        End Property
        
        Friend ReadOnly Property DATAEORAColumn As DataColumn
            Get
                Return Me.columnDATAEORA
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table1Row
            Get
                Return CType(Me.Rows(index),Table1Row)
            End Get
        End Property
        
        Public Event Table1RowChanged As Table1RowChangeEventHandler
        
        Public Event Table1RowChanging As Table1RowChangeEventHandler
        
        Public Event Table1RowDeleted As Table1RowChangeEventHandler
        
        Public Event Table1RowDeleting As Table1RowChangeEventHandler
        
        Public Overloads Sub AddTable1Row(ByVal row As Table1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTable1Row(ByVal CHIAVE As String, ByVal GIORNO As String, ByVal NUM As Integer, ByVal IDACCERTATORE As String, ByVal IDUSER As String, ByVal LISTAUSER As String, ByVal DATAEORA As Date) As Table1Row
            Dim rowTable1Row As Table1Row = CType(Me.NewRow,Table1Row)
            rowTable1Row.ItemArray = New Object() {Nothing, CHIAVE, GIORNO, NUM, IDACCERTATORE, IDUSER, LISTAUSER, DATAEORA}
            Me.Rows.Add(rowTable1Row)
            Return rowTable1Row
        End Function
        
        Public Function FindByidCHIAVEGIORNOIDUSERDATAEORA(ByVal id As Integer, ByVal CHIAVE As String, ByVal GIORNO As String, ByVal IDUSER As String, ByVal DATAEORA As Date) As Table1Row
            Return CType(Me.Rows.Find(New Object() {id, CHIAVE, GIORNO, IDUSER, DATAEORA}),Table1Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Table1DataTable = CType(MyBase.Clone,Table1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Table1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid = Me.Columns("id")
            Me.columnCHIAVE = Me.Columns("CHIAVE")
            Me.columnGIORNO = Me.Columns("GIORNO")
            Me.columnNUM = Me.Columns("NUM")
            Me.columnIDACCERTATORE = Me.Columns("IDACCERTATORE")
            Me.columnIDUSER = Me.Columns("IDUSER")
            Me.columnLISTAUSER = Me.Columns("LISTAUSER")
            Me.columnDATAEORA = Me.Columns("DATAEORA")
        End Sub
        
        Private Sub InitClass()
            Me.columnid = New DataColumn("id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid)
            Me.columnCHIAVE = New DataColumn("CHIAVE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHIAVE)
            Me.columnGIORNO = New DataColumn("GIORNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGIORNO)
            Me.columnNUM = New DataColumn("NUM", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNUM)
            Me.columnIDACCERTATORE = New DataColumn("IDACCERTATORE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDACCERTATORE)
            Me.columnIDUSER = New DataColumn("IDUSER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDUSER)
            Me.columnLISTAUSER = New DataColumn("LISTAUSER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLISTAUSER)
            Me.columnDATAEORA = New DataColumn("DATAEORA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATAEORA)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid, Me.columnCHIAVE, Me.columnGIORNO, Me.columnIDUSER, Me.columnDATAEORA}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AllowDBNull = false
            Me.columnid.ReadOnly = true
            Me.columnCHIAVE.AllowDBNull = false
            Me.columnGIORNO.AllowDBNull = false
            Me.columnIDACCERTATORE.AllowDBNull = false
            Me.columnIDUSER.AllowDBNull = false
            Me.columnDATAEORA.AllowDBNull = false
        End Sub
        
        Public Function NewTable1Row() As Table1Row
            Return CType(Me.NewRow,Table1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Table1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Table1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table1RowChangedEvent) Is Nothing) Then
                RaiseEvent Table1RowChanged(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table1RowChangingEvent) Is Nothing) Then
                RaiseEvent Table1RowChanging(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Table1RowDeleted(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Table1RowDeleting(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTable1Row(ByVal row As Table1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Table1Row
        Inherits DataRow
        
        Private tableTable1 As Table1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable1 = CType(Me.Table,Table1DataTable)
        End Sub
        
        Public Property id As Integer
            Get
                Return CType(Me(Me.tableTable1.idColumn),Integer)
            End Get
            Set
                Me(Me.tableTable1.idColumn) = value
            End Set
        End Property
        
        Public Property CHIAVE As String
            Get
                Return CType(Me(Me.tableTable1.CHIAVEColumn),String)
            End Get
            Set
                Me(Me.tableTable1.CHIAVEColumn) = value
            End Set
        End Property
        
        Public Property GIORNO As String
            Get
                Return CType(Me(Me.tableTable1.GIORNOColumn),String)
            End Get
            Set
                Me(Me.tableTable1.GIORNOColumn) = value
            End Set
        End Property
        
        Public Property NUM As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTable1.NUMColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable1.NUMColumn) = value
            End Set
        End Property
        
        Public Property IDACCERTATORE As String
            Get
                Return CType(Me(Me.tableTable1.IDACCERTATOREColumn),String)
            End Get
            Set
                Me(Me.tableTable1.IDACCERTATOREColumn) = value
            End Set
        End Property
        
        Public Property IDUSER As String
            Get
                Return CType(Me(Me.tableTable1.IDUSERColumn),String)
            End Get
            Set
                Me(Me.tableTable1.IDUSERColumn) = value
            End Set
        End Property
        
        Public Property LISTAUSER As String
            Get
                Try 
                    Return CType(Me(Me.tableTable1.LISTAUSERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable1.LISTAUSERColumn) = value
            End Set
        End Property
        
        Public Property DATAEORA As Date
            Get
                Return CType(Me(Me.tableTable1.DATAEORAColumn),Date)
            End Get
            Set
                Me(Me.tableTable1.DATAEORAColumn) = value
            End Set
        End Property
        
        Public Function IsNUMNull() As Boolean
            Return Me.IsNull(Me.tableTable1.NUMColumn)
        End Function
        
        Public Sub SetNUMNull()
            Me(Me.tableTable1.NUMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLISTAUSERNull() As Boolean
            Return Me.IsNull(Me.tableTable1.LISTAUSERColumn)
        End Function
        
        Public Sub SetLISTAUSERNull()
            Me(Me.tableTable1.LISTAUSERColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Table1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Table1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Table1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Table1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteFerieDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnts As DataColumn
        
        Private columnIdRichiesta As DataColumn
        
        Private columnIdAccertatore As DataColumn
        
        Private columnDalGiorno As DataColumn
        
        Private columnAlGiorno As DataColumn
        
        Private columnOrdine As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnIdApprovatore As DataColumn
        
        Private columnExpr1 As DataColumn
        
        Private columnCognomeNome As DataColumn
        
        Private columnEMail As DataColumn
        
        Private columnAbilitato As DataColumn
        
        Private columnDataUltimoAccesso As DataColumn
        
        Private columnOraUltimoAccesso As DataColumn
        
        Private columnNrAccessi As DataColumn
        
        Private columnTipoUtente As DataColumn
        
        Private columnID As DataColumn
        
        Private columnApprovatore As DataColumn
        
        Friend Sub New()
            MyBase.New("RichiesteFerie")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property tsColumn As DataColumn
            Get
                Return Me.columnts
            End Get
        End Property
        
        Friend ReadOnly Property IdRichiestaColumn As DataColumn
            Get
                Return Me.columnIdRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreColumn As DataColumn
            Get
                Return Me.columnIdAccertatore
            End Get
        End Property
        
        Friend ReadOnly Property DalGiornoColumn As DataColumn
            Get
                Return Me.columnDalGiorno
            End Get
        End Property
        
        Friend ReadOnly Property AlGiornoColumn As DataColumn
            Get
                Return Me.columnAlGiorno
            End Get
        End Property
        
        Friend ReadOnly Property OrdineColumn As DataColumn
            Get
                Return Me.columnOrdine
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property IdApprovatoreColumn As DataColumn
            Get
                Return Me.columnIdApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property Expr1Column As DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeColumn As DataColumn
            Get
                Return Me.columnCognomeNome
            End Get
        End Property
        
        Friend ReadOnly Property EMailColumn As DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        Friend ReadOnly Property AbilitatoColumn As DataColumn
            Get
                Return Me.columnAbilitato
            End Get
        End Property
        
        Friend ReadOnly Property DataUltimoAccessoColumn As DataColumn
            Get
                Return Me.columnDataUltimoAccesso
            End Get
        End Property
        
        Friend ReadOnly Property OraUltimoAccessoColumn As DataColumn
            Get
                Return Me.columnOraUltimoAccesso
            End Get
        End Property
        
        Friend ReadOnly Property NrAccessiColumn As DataColumn
            Get
                Return Me.columnNrAccessi
            End Get
        End Property
        
        Friend ReadOnly Property TipoUtenteColumn As DataColumn
            Get
                Return Me.columnTipoUtente
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoreColumn As DataColumn
            Get
                Return Me.columnApprovatore
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RichiesteFerieRow
            Get
                Return CType(Me.Rows(index),RichiesteFerieRow)
            End Get
        End Property
        
        Public Event RichiesteFerieRowChanged As RichiesteFerieRowChangeEventHandler
        
        Public Event RichiesteFerieRowChanging As RichiesteFerieRowChangeEventHandler
        
        Public Event RichiesteFerieRowDeleted As RichiesteFerieRowChangeEventHandler
        
        Public Event RichiesteFerieRowDeleting As RichiesteFerieRowChangeEventHandler
        
        Public Overloads Sub AddRichiesteFerieRow(ByVal row As RichiesteFerieRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRichiesteFerieRow( _
                    ByVal ts As Date,  _
                    ByVal IdRichiesta As System.Guid,  _
                    ByVal IdAccertatore As Integer,  _
                    ByVal DalGiorno As Date,  _
                    ByVal AlGiorno As Date,  _
                    ByVal Ordine As String,  _
                    ByVal StatoApprovazione As String,  _
                    ByVal DataApprovazione As Date,  _
                    ByVal IdApprovatore As Integer,  _
                    ByVal Expr1 As Date,  _
                    ByVal CognomeNome As String,  _
                    ByVal EMail As String,  _
                    ByVal Abilitato As Boolean,  _
                    ByVal DataUltimoAccesso As String,  _
                    ByVal OraUltimoAccesso As String,  _
                    ByVal NrAccessi As Integer,  _
                    ByVal TipoUtente As Integer,  _
                    ByVal Approvatore As String) As RichiesteFerieRow
            Dim rowRichiesteFerieRow As RichiesteFerieRow = CType(Me.NewRow,RichiesteFerieRow)
            rowRichiesteFerieRow.ItemArray = New Object() {ts, IdRichiesta, IdAccertatore, DalGiorno, AlGiorno, Ordine, StatoApprovazione, DataApprovazione, IdApprovatore, Expr1, CognomeNome, EMail, Abilitato, DataUltimoAccesso, OraUltimoAccesso, NrAccessi, TipoUtente, Nothing, Approvatore}
            Me.Rows.Add(rowRichiesteFerieRow)
            Return rowRichiesteFerieRow
        End Function
        
        Public Function FindByIdRichiesta(ByVal IdRichiesta As System.Guid) As RichiesteFerieRow
            Return CType(Me.Rows.Find(New Object() {IdRichiesta}),RichiesteFerieRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RichiesteFerieDataTable = CType(MyBase.Clone,RichiesteFerieDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RichiesteFerieDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnts = Me.Columns("ts")
            Me.columnIdRichiesta = Me.Columns("IdRichiesta")
            Me.columnIdAccertatore = Me.Columns("IdAccertatore")
            Me.columnDalGiorno = Me.Columns("DalGiorno")
            Me.columnAlGiorno = Me.Columns("AlGiorno")
            Me.columnOrdine = Me.Columns("Ordine")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnIdApprovatore = Me.Columns("IdApprovatore")
            Me.columnExpr1 = Me.Columns("Expr1")
            Me.columnCognomeNome = Me.Columns("CognomeNome")
            Me.columnEMail = Me.Columns("EMail")
            Me.columnAbilitato = Me.Columns("Abilitato")
            Me.columnDataUltimoAccesso = Me.Columns("DataUltimoAccesso")
            Me.columnOraUltimoAccesso = Me.Columns("OraUltimoAccesso")
            Me.columnNrAccessi = Me.Columns("NrAccessi")
            Me.columnTipoUtente = Me.Columns("TipoUtente")
            Me.columnID = Me.Columns("ID")
            Me.columnApprovatore = Me.Columns("Approvatore")
        End Sub
        
        Private Sub InitClass()
            Me.columnts = New DataColumn("ts", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnts)
            Me.columnIdRichiesta = New DataColumn("IdRichiesta", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdRichiesta)
            Me.columnIdAccertatore = New DataColumn("IdAccertatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatore)
            Me.columnDalGiorno = New DataColumn("DalGiorno", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalGiorno)
            Me.columnAlGiorno = New DataColumn("AlGiorno", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlGiorno)
            Me.columnOrdine = New DataColumn("Ordine", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdine)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnIdApprovatore = New DataColumn("IdApprovatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdApprovatore)
            Me.columnExpr1 = New DataColumn("Expr1", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpr1)
            Me.columnCognomeNome = New DataColumn("CognomeNome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNome)
            Me.columnEMail = New DataColumn("EMail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMail)
            Me.columnAbilitato = New DataColumn("Abilitato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilitato)
            Me.columnDataUltimoAccesso = New DataColumn("DataUltimoAccesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataUltimoAccesso)
            Me.columnOraUltimoAccesso = New DataColumn("OraUltimoAccesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraUltimoAccesso)
            Me.columnNrAccessi = New DataColumn("NrAccessi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNrAccessi)
            Me.columnTipoUtente = New DataColumn("TipoUtente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoUtente)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnApprovatore = New DataColumn("Approvatore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatore)
            Me.Constraints.Add(New UniqueConstraint("dsAmministrazioneCongediKey5", New DataColumn() {Me.columnIdRichiesta}, true))
            Me.columnIdRichiesta.AllowDBNull = false
            Me.columnIdRichiesta.Unique = true
            Me.columnOrdine.ReadOnly = true
            Me.columnStatoApprovazione.ReadOnly = true
            Me.columnCognomeNome.ReadOnly = true
            Me.columnID.AutoIncrement = true
            Me.columnID.ReadOnly = true
        End Sub
        
        Public Function NewRichiesteFerieRow() As RichiesteFerieRow
            Return CType(Me.NewRow,RichiesteFerieRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RichiesteFerieRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RichiesteFerieRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RichiesteFerieRowChangedEvent) Is Nothing) Then
                RaiseEvent RichiesteFerieRowChanged(Me, New RichiesteFerieRowChangeEvent(CType(e.Row,RichiesteFerieRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RichiesteFerieRowChangingEvent) Is Nothing) Then
                RaiseEvent RichiesteFerieRowChanging(Me, New RichiesteFerieRowChangeEvent(CType(e.Row,RichiesteFerieRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RichiesteFerieRowDeletedEvent) Is Nothing) Then
                RaiseEvent RichiesteFerieRowDeleted(Me, New RichiesteFerieRowChangeEvent(CType(e.Row,RichiesteFerieRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RichiesteFerieRowDeletingEvent) Is Nothing) Then
                RaiseEvent RichiesteFerieRowDeleting(Me, New RichiesteFerieRowChangeEvent(CType(e.Row,RichiesteFerieRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRichiesteFerieRow(ByVal row As RichiesteFerieRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteFerieRow
        Inherits DataRow
        
        Private tableRichiesteFerie As RichiesteFerieDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRichiesteFerie = CType(Me.Table,RichiesteFerieDataTable)
        End Sub
        
        Public Property ts As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.tsColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.tsColumn) = value
            End Set
        End Property
        
        Public Property IdRichiesta As System.Guid
            Get
                Return CType(Me(Me.tableRichiesteFerie.IdRichiestaColumn),System.Guid)
            End Get
            Set
                Me(Me.tableRichiesteFerie.IdRichiestaColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.IdAccertatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.IdAccertatoreColumn) = value
            End Set
        End Property
        
        Public Property DalGiorno As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.DalGiornoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.DalGiornoColumn) = value
            End Set
        End Property
        
        Public Property AlGiorno As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.AlGiornoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.AlGiornoColumn) = value
            End Set
        End Property
        
        Public Property Ordine As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.OrdineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.OrdineColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.StatoApprovazioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property IdApprovatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.IdApprovatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.IdApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property Expr1 As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.Expr1Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.Expr1Column) = value
            End Set
        End Property
        
        Public Property CognomeNome As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.CognomeNomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.CognomeNomeColumn) = value
            End Set
        End Property
        
        Public Property EMail As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.EMailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.EMailColumn) = value
            End Set
        End Property
        
        Public Property Abilitato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.AbilitatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.AbilitatoColumn) = value
            End Set
        End Property
        
        Public Property DataUltimoAccesso As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.DataUltimoAccessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.DataUltimoAccessoColumn) = value
            End Set
        End Property
        
        Public Property OraUltimoAccesso As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.OraUltimoAccessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.OraUltimoAccessoColumn) = value
            End Set
        End Property
        
        Public Property NrAccessi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.NrAccessiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.NrAccessiColumn) = value
            End Set
        End Property
        
        Public Property TipoUtente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.TipoUtenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.TipoUtenteColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.IDColumn) = value
            End Set
        End Property
        
        Public Property Approvatore As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteFerie.ApprovatoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteFerie.ApprovatoreColumn) = value
            End Set
        End Property
        
        Public Function IstsNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.tsColumn)
        End Function
        
        Public Sub SettsNull()
            Me(Me.tableRichiesteFerie.tsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdAccertatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.IdAccertatoreColumn)
        End Function
        
        Public Sub SetIdAccertatoreNull()
            Me(Me.tableRichiesteFerie.IdAccertatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalGiornoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.DalGiornoColumn)
        End Function
        
        Public Sub SetDalGiornoNull()
            Me(Me.tableRichiesteFerie.DalGiornoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlGiornoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.AlGiornoColumn)
        End Function
        
        Public Sub SetAlGiornoNull()
            Me(Me.tableRichiesteFerie.AlGiornoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdineNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.OrdineColumn)
        End Function
        
        Public Sub SetOrdineNull()
            Me(Me.tableRichiesteFerie.OrdineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableRichiesteFerie.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableRichiesteFerie.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.IdApprovatoreColumn)
        End Function
        
        Public Sub SetIdApprovatoreNull()
            Me(Me.tableRichiesteFerie.IdApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.Expr1Column)
        End Function
        
        Public Sub SetExpr1Null()
            Me(Me.tableRichiesteFerie.Expr1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.CognomeNomeColumn)
        End Function
        
        Public Sub SetCognomeNomeNull()
            Me(Me.tableRichiesteFerie.CognomeNomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.EMailColumn)
        End Function
        
        Public Sub SetEMailNull()
            Me(Me.tableRichiesteFerie.EMailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAbilitatoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.AbilitatoColumn)
        End Function
        
        Public Sub SetAbilitatoNull()
            Me(Me.tableRichiesteFerie.AbilitatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataUltimoAccessoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.DataUltimoAccessoColumn)
        End Function
        
        Public Sub SetDataUltimoAccessoNull()
            Me(Me.tableRichiesteFerie.DataUltimoAccessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraUltimoAccessoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.OraUltimoAccessoColumn)
        End Function
        
        Public Sub SetOraUltimoAccessoNull()
            Me(Me.tableRichiesteFerie.OraUltimoAccessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNrAccessiNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.NrAccessiColumn)
        End Function
        
        Public Sub SetNrAccessiNull()
            Me(Me.tableRichiesteFerie.NrAccessiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoUtenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.TipoUtenteColumn)
        End Function
        
        Public Sub SetTipoUtenteNull()
            Me(Me.tableRichiesteFerie.TipoUtenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableRichiesteFerie.IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteFerie.ApprovatoreColumn)
        End Function
        
        Public Sub SetApprovatoreNull()
            Me(Me.tableRichiesteFerie.ApprovatoreColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteFerieRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RichiesteFerieRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RichiesteFerieRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RichiesteFerieRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCongediGarantitiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnts As DataColumn
        
        Private columnIdRichiesta As DataColumn
        
        Private columnIdAccertatore As DataColumn
        
        Private columnDalGiorno As DataColumn
        
        Private columnAlGiorno As DataColumn
        
        Private columnOrdine As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnIdApprovatore As DataColumn
        
        Private columnExpr1 As DataColumn
        
        Private columnCognomeNome As DataColumn
        
        Private columnEMail As DataColumn
        
        Private columnAbilitato As DataColumn
        
        Private columnDataUltimoAccesso As DataColumn
        
        Private columnOraUltimoAccesso As DataColumn
        
        Private columnNrAccessi As DataColumn
        
        Private columnTipoUtente As DataColumn
        
        Private columnID As DataColumn
        
        Private columnApprovatore As DataColumn
        
        Friend Sub New()
            MyBase.New("RichiesteCongediGarantiti")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property tsColumn As DataColumn
            Get
                Return Me.columnts
            End Get
        End Property
        
        Friend ReadOnly Property IdRichiestaColumn As DataColumn
            Get
                Return Me.columnIdRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreColumn As DataColumn
            Get
                Return Me.columnIdAccertatore
            End Get
        End Property
        
        Friend ReadOnly Property DalGiornoColumn As DataColumn
            Get
                Return Me.columnDalGiorno
            End Get
        End Property
        
        Friend ReadOnly Property AlGiornoColumn As DataColumn
            Get
                Return Me.columnAlGiorno
            End Get
        End Property
        
        Friend ReadOnly Property OrdineColumn As DataColumn
            Get
                Return Me.columnOrdine
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property IdApprovatoreColumn As DataColumn
            Get
                Return Me.columnIdApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property Expr1Column As DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeColumn As DataColumn
            Get
                Return Me.columnCognomeNome
            End Get
        End Property
        
        Friend ReadOnly Property EMailColumn As DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        Friend ReadOnly Property AbilitatoColumn As DataColumn
            Get
                Return Me.columnAbilitato
            End Get
        End Property
        
        Friend ReadOnly Property DataUltimoAccessoColumn As DataColumn
            Get
                Return Me.columnDataUltimoAccesso
            End Get
        End Property
        
        Friend ReadOnly Property OraUltimoAccessoColumn As DataColumn
            Get
                Return Me.columnOraUltimoAccesso
            End Get
        End Property
        
        Friend ReadOnly Property NrAccessiColumn As DataColumn
            Get
                Return Me.columnNrAccessi
            End Get
        End Property
        
        Friend ReadOnly Property TipoUtenteColumn As DataColumn
            Get
                Return Me.columnTipoUtente
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoreColumn As DataColumn
            Get
                Return Me.columnApprovatore
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RichiesteCongediGarantitiRow
            Get
                Return CType(Me.Rows(index),RichiesteCongediGarantitiRow)
            End Get
        End Property
        
        Public Event RichiesteCongediGarantitiRowChanged As RichiesteCongediGarantitiRowChangeEventHandler
        
        Public Event RichiesteCongediGarantitiRowChanging As RichiesteCongediGarantitiRowChangeEventHandler
        
        Public Event RichiesteCongediGarantitiRowDeleted As RichiesteCongediGarantitiRowChangeEventHandler
        
        Public Event RichiesteCongediGarantitiRowDeleting As RichiesteCongediGarantitiRowChangeEventHandler
        
        Public Overloads Sub AddRichiesteCongediGarantitiRow(ByVal row As RichiesteCongediGarantitiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRichiesteCongediGarantitiRow( _
                    ByVal ts As Date,  _
                    ByVal IdRichiesta As System.Guid,  _
                    ByVal IdAccertatore As Integer,  _
                    ByVal DalGiorno As Date,  _
                    ByVal AlGiorno As Date,  _
                    ByVal Ordine As String,  _
                    ByVal StatoApprovazione As String,  _
                    ByVal DataApprovazione As Date,  _
                    ByVal IdApprovatore As Integer,  _
                    ByVal Expr1 As Date,  _
                    ByVal CognomeNome As String,  _
                    ByVal EMail As String,  _
                    ByVal Abilitato As Boolean,  _
                    ByVal DataUltimoAccesso As String,  _
                    ByVal OraUltimoAccesso As String,  _
                    ByVal NrAccessi As Integer,  _
                    ByVal TipoUtente As Integer,  _
                    ByVal Approvatore As String) As RichiesteCongediGarantitiRow
            Dim rowRichiesteCongediGarantitiRow As RichiesteCongediGarantitiRow = CType(Me.NewRow,RichiesteCongediGarantitiRow)
            rowRichiesteCongediGarantitiRow.ItemArray = New Object() {ts, IdRichiesta, IdAccertatore, DalGiorno, AlGiorno, Ordine, StatoApprovazione, DataApprovazione, IdApprovatore, Expr1, CognomeNome, EMail, Abilitato, DataUltimoAccesso, OraUltimoAccesso, NrAccessi, TipoUtente, Nothing, Approvatore}
            Me.Rows.Add(rowRichiesteCongediGarantitiRow)
            Return rowRichiesteCongediGarantitiRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RichiesteCongediGarantitiDataTable = CType(MyBase.Clone,RichiesteCongediGarantitiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RichiesteCongediGarantitiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnts = Me.Columns("ts")
            Me.columnIdRichiesta = Me.Columns("IdRichiesta")
            Me.columnIdAccertatore = Me.Columns("IdAccertatore")
            Me.columnDalGiorno = Me.Columns("DalGiorno")
            Me.columnAlGiorno = Me.Columns("AlGiorno")
            Me.columnOrdine = Me.Columns("Ordine")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnIdApprovatore = Me.Columns("IdApprovatore")
            Me.columnExpr1 = Me.Columns("Expr1")
            Me.columnCognomeNome = Me.Columns("CognomeNome")
            Me.columnEMail = Me.Columns("EMail")
            Me.columnAbilitato = Me.Columns("Abilitato")
            Me.columnDataUltimoAccesso = Me.Columns("DataUltimoAccesso")
            Me.columnOraUltimoAccesso = Me.Columns("OraUltimoAccesso")
            Me.columnNrAccessi = Me.Columns("NrAccessi")
            Me.columnTipoUtente = Me.Columns("TipoUtente")
            Me.columnID = Me.Columns("ID")
            Me.columnApprovatore = Me.Columns("Approvatore")
        End Sub
        
        Private Sub InitClass()
            Me.columnts = New DataColumn("ts", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnts)
            Me.columnIdRichiesta = New DataColumn("IdRichiesta", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdRichiesta)
            Me.columnIdAccertatore = New DataColumn("IdAccertatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatore)
            Me.columnDalGiorno = New DataColumn("DalGiorno", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalGiorno)
            Me.columnAlGiorno = New DataColumn("AlGiorno", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlGiorno)
            Me.columnOrdine = New DataColumn("Ordine", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdine)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnIdApprovatore = New DataColumn("IdApprovatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdApprovatore)
            Me.columnExpr1 = New DataColumn("Expr1", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpr1)
            Me.columnCognomeNome = New DataColumn("CognomeNome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNome)
            Me.columnEMail = New DataColumn("EMail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMail)
            Me.columnAbilitato = New DataColumn("Abilitato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilitato)
            Me.columnDataUltimoAccesso = New DataColumn("DataUltimoAccesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataUltimoAccesso)
            Me.columnOraUltimoAccesso = New DataColumn("OraUltimoAccesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraUltimoAccesso)
            Me.columnNrAccessi = New DataColumn("NrAccessi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNrAccessi)
            Me.columnTipoUtente = New DataColumn("TipoUtente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoUtente)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnApprovatore = New DataColumn("Approvatore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatore)
            Me.columnIdRichiesta.AllowDBNull = false
            Me.columnOrdine.ReadOnly = true
            Me.columnStatoApprovazione.ReadOnly = true
            Me.columnCognomeNome.ReadOnly = true
            Me.columnID.AutoIncrement = true
            Me.columnID.ReadOnly = true
        End Sub
        
        Public Function NewRichiesteCongediGarantitiRow() As RichiesteCongediGarantitiRow
            Return CType(Me.NewRow,RichiesteCongediGarantitiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RichiesteCongediGarantitiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RichiesteCongediGarantitiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RichiesteCongediGarantitiRowChangedEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediGarantitiRowChanged(Me, New RichiesteCongediGarantitiRowChangeEvent(CType(e.Row,RichiesteCongediGarantitiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RichiesteCongediGarantitiRowChangingEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediGarantitiRowChanging(Me, New RichiesteCongediGarantitiRowChangeEvent(CType(e.Row,RichiesteCongediGarantitiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RichiesteCongediGarantitiRowDeletedEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediGarantitiRowDeleted(Me, New RichiesteCongediGarantitiRowChangeEvent(CType(e.Row,RichiesteCongediGarantitiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RichiesteCongediGarantitiRowDeletingEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediGarantitiRowDeleting(Me, New RichiesteCongediGarantitiRowChangeEvent(CType(e.Row,RichiesteCongediGarantitiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRichiesteCongediGarantitiRow(ByVal row As RichiesteCongediGarantitiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCongediGarantitiRow
        Inherits DataRow
        
        Private tableRichiesteCongediGarantiti As RichiesteCongediGarantitiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRichiesteCongediGarantiti = CType(Me.Table,RichiesteCongediGarantitiDataTable)
        End Sub
        
        Public Property ts As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.tsColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.tsColumn) = value
            End Set
        End Property
        
        Public Property IdRichiesta As System.Guid
            Get
                Return CType(Me(Me.tableRichiesteCongediGarantiti.IdRichiestaColumn),System.Guid)
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.IdRichiestaColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.IdAccertatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.IdAccertatoreColumn) = value
            End Set
        End Property
        
        Public Property DalGiorno As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.DalGiornoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.DalGiornoColumn) = value
            End Set
        End Property
        
        Public Property AlGiorno As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.AlGiornoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.AlGiornoColumn) = value
            End Set
        End Property
        
        Public Property Ordine As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.OrdineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.OrdineColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.StatoApprovazioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property IdApprovatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.IdApprovatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.IdApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property Expr1 As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.Expr1Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.Expr1Column) = value
            End Set
        End Property
        
        Public Property CognomeNome As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.CognomeNomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.CognomeNomeColumn) = value
            End Set
        End Property
        
        Public Property EMail As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.EMailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.EMailColumn) = value
            End Set
        End Property
        
        Public Property Abilitato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.AbilitatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.AbilitatoColumn) = value
            End Set
        End Property
        
        Public Property DataUltimoAccesso As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.DataUltimoAccessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.DataUltimoAccessoColumn) = value
            End Set
        End Property
        
        Public Property OraUltimoAccesso As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.OraUltimoAccessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.OraUltimoAccessoColumn) = value
            End Set
        End Property
        
        Public Property NrAccessi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.NrAccessiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.NrAccessiColumn) = value
            End Set
        End Property
        
        Public Property TipoUtente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.TipoUtenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.TipoUtenteColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.IDColumn) = value
            End Set
        End Property
        
        Public Property Approvatore As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediGarantiti.ApprovatoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediGarantiti.ApprovatoreColumn) = value
            End Set
        End Property
        
        Public Function IstsNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.tsColumn)
        End Function
        
        Public Sub SettsNull()
            Me(Me.tableRichiesteCongediGarantiti.tsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdAccertatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.IdAccertatoreColumn)
        End Function
        
        Public Sub SetIdAccertatoreNull()
            Me(Me.tableRichiesteCongediGarantiti.IdAccertatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalGiornoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.DalGiornoColumn)
        End Function
        
        Public Sub SetDalGiornoNull()
            Me(Me.tableRichiesteCongediGarantiti.DalGiornoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlGiornoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.AlGiornoColumn)
        End Function
        
        Public Sub SetAlGiornoNull()
            Me(Me.tableRichiesteCongediGarantiti.AlGiornoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdineNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.OrdineColumn)
        End Function
        
        Public Sub SetOrdineNull()
            Me(Me.tableRichiesteCongediGarantiti.OrdineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableRichiesteCongediGarantiti.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableRichiesteCongediGarantiti.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.IdApprovatoreColumn)
        End Function
        
        Public Sub SetIdApprovatoreNull()
            Me(Me.tableRichiesteCongediGarantiti.IdApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.Expr1Column)
        End Function
        
        Public Sub SetExpr1Null()
            Me(Me.tableRichiesteCongediGarantiti.Expr1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.CognomeNomeColumn)
        End Function
        
        Public Sub SetCognomeNomeNull()
            Me(Me.tableRichiesteCongediGarantiti.CognomeNomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.EMailColumn)
        End Function
        
        Public Sub SetEMailNull()
            Me(Me.tableRichiesteCongediGarantiti.EMailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAbilitatoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.AbilitatoColumn)
        End Function
        
        Public Sub SetAbilitatoNull()
            Me(Me.tableRichiesteCongediGarantiti.AbilitatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataUltimoAccessoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.DataUltimoAccessoColumn)
        End Function
        
        Public Sub SetDataUltimoAccessoNull()
            Me(Me.tableRichiesteCongediGarantiti.DataUltimoAccessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraUltimoAccessoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.OraUltimoAccessoColumn)
        End Function
        
        Public Sub SetOraUltimoAccessoNull()
            Me(Me.tableRichiesteCongediGarantiti.OraUltimoAccessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNrAccessiNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.NrAccessiColumn)
        End Function
        
        Public Sub SetNrAccessiNull()
            Me(Me.tableRichiesteCongediGarantiti.NrAccessiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoUtenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.TipoUtenteColumn)
        End Function
        
        Public Sub SetTipoUtenteNull()
            Me(Me.tableRichiesteCongediGarantiti.TipoUtenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableRichiesteCongediGarantiti.IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediGarantiti.ApprovatoreColumn)
        End Function
        
        Public Sub SetApprovatoreNull()
            Me(Me.tableRichiesteCongediGarantiti.ApprovatoreColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCongediGarantitiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RichiesteCongediGarantitiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RichiesteCongediGarantitiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RichiesteCongediGarantitiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCongediFrazionatiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnstato As DataColumn
        
        Private columnts As DataColumn
        
        Private columnIdRichiesta As DataColumn
        
        Private columnIdAccertatore As DataColumn
        
        Private columnData As DataColumn
        
        Private columnDalleOre As DataColumn
        
        Private columnAlleOre As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnIdApprovatore As DataColumn
        
        Private columnGarantiti As DataColumn
        
        Private columnCognomeNome As DataColumn
        
        Private columnEMail As DataColumn
        
        Private columnAbilitato As DataColumn
        
        Private columnDataUltimoAccesso As DataColumn
        
        Private columnOraUltimoAccesso As DataColumn
        
        Private columnNrAccessi As DataColumn
        
        Private columnTipoUtente As DataColumn
        
        Private columnID As DataColumn
        
        Private columnApprovatore As DataColumn
        
        Private columnIntero As DataColumn
        
        Friend Sub New()
            MyBase.New("RichiesteCongediFrazionati")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property statoColumn As DataColumn
            Get
                Return Me.columnstato
            End Get
        End Property
        
        Friend ReadOnly Property tsColumn As DataColumn
            Get
                Return Me.columnts
            End Get
        End Property
        
        Friend ReadOnly Property IdRichiestaColumn As DataColumn
            Get
                Return Me.columnIdRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreColumn As DataColumn
            Get
                Return Me.columnIdAccertatore
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property DalleOreColumn As DataColumn
            Get
                Return Me.columnDalleOre
            End Get
        End Property
        
        Friend ReadOnly Property AlleOreColumn As DataColumn
            Get
                Return Me.columnAlleOre
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property IdApprovatoreColumn As DataColumn
            Get
                Return Me.columnIdApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property GarantitiColumn As DataColumn
            Get
                Return Me.columnGarantiti
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeColumn As DataColumn
            Get
                Return Me.columnCognomeNome
            End Get
        End Property
        
        Friend ReadOnly Property EMailColumn As DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        Friend ReadOnly Property AbilitatoColumn As DataColumn
            Get
                Return Me.columnAbilitato
            End Get
        End Property
        
        Friend ReadOnly Property DataUltimoAccessoColumn As DataColumn
            Get
                Return Me.columnDataUltimoAccesso
            End Get
        End Property
        
        Friend ReadOnly Property OraUltimoAccessoColumn As DataColumn
            Get
                Return Me.columnOraUltimoAccesso
            End Get
        End Property
        
        Friend ReadOnly Property NrAccessiColumn As DataColumn
            Get
                Return Me.columnNrAccessi
            End Get
        End Property
        
        Friend ReadOnly Property TipoUtenteColumn As DataColumn
            Get
                Return Me.columnTipoUtente
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoreColumn As DataColumn
            Get
                Return Me.columnApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property InteroColumn As DataColumn
            Get
                Return Me.columnIntero
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RichiesteCongediFrazionatiRow
            Get
                Return CType(Me.Rows(index),RichiesteCongediFrazionatiRow)
            End Get
        End Property
        
        Public Event RichiesteCongediFrazionatiRowChanged As RichiesteCongediFrazionatiRowChangeEventHandler
        
        Public Event RichiesteCongediFrazionatiRowChanging As RichiesteCongediFrazionatiRowChangeEventHandler
        
        Public Event RichiesteCongediFrazionatiRowDeleted As RichiesteCongediFrazionatiRowChangeEventHandler
        
        Public Event RichiesteCongediFrazionatiRowDeleting As RichiesteCongediFrazionatiRowChangeEventHandler
        
        Public Overloads Sub AddRichiesteCongediFrazionatiRow(ByVal row As RichiesteCongediFrazionatiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRichiesteCongediFrazionatiRow( _
                    ByVal stato As Integer,  _
                    ByVal ts As Date,  _
                    ByVal IdRichiesta As System.Guid,  _
                    ByVal IdAccertatore As Integer,  _
                    ByVal Data As Date,  _
                    ByVal DalleOre As Long,  _
                    ByVal AlleOre As Long,  _
                    ByVal StatoApprovazione As String,  _
                    ByVal DataApprovazione As Date,  _
                    ByVal IdApprovatore As Integer,  _
                    ByVal Garantiti As String,  _
                    ByVal CognomeNome As String,  _
                    ByVal EMail As String,  _
                    ByVal Abilitato As Boolean,  _
                    ByVal DataUltimoAccesso As String,  _
                    ByVal OraUltimoAccesso As String,  _
                    ByVal NrAccessi As Integer,  _
                    ByVal TipoUtente As Integer,  _
                    ByVal Approvatore As String,  _
                    ByVal Intero As Boolean) As RichiesteCongediFrazionatiRow
            Dim rowRichiesteCongediFrazionatiRow As RichiesteCongediFrazionatiRow = CType(Me.NewRow,RichiesteCongediFrazionatiRow)
            rowRichiesteCongediFrazionatiRow.ItemArray = New Object() {stato, ts, IdRichiesta, IdAccertatore, Data, DalleOre, AlleOre, StatoApprovazione, DataApprovazione, IdApprovatore, Garantiti, CognomeNome, EMail, Abilitato, DataUltimoAccesso, OraUltimoAccesso, NrAccessi, TipoUtente, Nothing, Approvatore, Intero}
            Me.Rows.Add(rowRichiesteCongediFrazionatiRow)
            Return rowRichiesteCongediFrazionatiRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RichiesteCongediFrazionatiDataTable = CType(MyBase.Clone,RichiesteCongediFrazionatiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RichiesteCongediFrazionatiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnstato = Me.Columns("stato")
            Me.columnts = Me.Columns("ts")
            Me.columnIdRichiesta = Me.Columns("IdRichiesta")
            Me.columnIdAccertatore = Me.Columns("IdAccertatore")
            Me.columnData = Me.Columns("Data")
            Me.columnDalleOre = Me.Columns("DalleOre")
            Me.columnAlleOre = Me.Columns("AlleOre")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnIdApprovatore = Me.Columns("IdApprovatore")
            Me.columnGarantiti = Me.Columns("Garantiti")
            Me.columnCognomeNome = Me.Columns("CognomeNome")
            Me.columnEMail = Me.Columns("EMail")
            Me.columnAbilitato = Me.Columns("Abilitato")
            Me.columnDataUltimoAccesso = Me.Columns("DataUltimoAccesso")
            Me.columnOraUltimoAccesso = Me.Columns("OraUltimoAccesso")
            Me.columnNrAccessi = Me.Columns("NrAccessi")
            Me.columnTipoUtente = Me.Columns("TipoUtente")
            Me.columnID = Me.Columns("ID")
            Me.columnApprovatore = Me.Columns("Approvatore")
            Me.columnIntero = Me.Columns("Intero")
        End Sub
        
        Private Sub InitClass()
            Me.columnstato = New DataColumn("stato", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstato)
            Me.columnts = New DataColumn("ts", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnts)
            Me.columnIdRichiesta = New DataColumn("IdRichiesta", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdRichiesta)
            Me.columnIdAccertatore = New DataColumn("IdAccertatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatore)
            Me.columnData = New DataColumn("Data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData)
            Me.columnDalleOre = New DataColumn("DalleOre", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalleOre)
            Me.columnAlleOre = New DataColumn("AlleOre", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlleOre)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnIdApprovatore = New DataColumn("IdApprovatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdApprovatore)
            Me.columnGarantiti = New DataColumn("Garantiti", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGarantiti)
            Me.columnCognomeNome = New DataColumn("CognomeNome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNome)
            Me.columnEMail = New DataColumn("EMail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMail)
            Me.columnAbilitato = New DataColumn("Abilitato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilitato)
            Me.columnDataUltimoAccesso = New DataColumn("DataUltimoAccesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataUltimoAccesso)
            Me.columnOraUltimoAccesso = New DataColumn("OraUltimoAccesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraUltimoAccesso)
            Me.columnNrAccessi = New DataColumn("NrAccessi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNrAccessi)
            Me.columnTipoUtente = New DataColumn("TipoUtente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoUtente)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnApprovatore = New DataColumn("Approvatore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatore)
            Me.columnIntero = New DataColumn("Intero", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIntero)
            Me.columnstato.ReadOnly = true
            Me.columnts.ReadOnly = true
            Me.columnIdRichiesta.ReadOnly = true
            Me.columnIdAccertatore.ReadOnly = true
            Me.columnData.ReadOnly = true
            Me.columnDalleOre.ReadOnly = true
            Me.columnAlleOre.ReadOnly = true
            Me.columnStatoApprovazione.ReadOnly = true
            Me.columnDataApprovazione.ReadOnly = true
            Me.columnIdApprovatore.ReadOnly = true
            Me.columnGarantiti.ReadOnly = true
            Me.columnCognomeNome.ReadOnly = true
            Me.columnID.AutoIncrement = true
            Me.columnID.ReadOnly = true
            Me.columnIntero.ReadOnly = true
        End Sub
        
        Public Function NewRichiesteCongediFrazionatiRow() As RichiesteCongediFrazionatiRow
            Return CType(Me.NewRow,RichiesteCongediFrazionatiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RichiesteCongediFrazionatiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RichiesteCongediFrazionatiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RichiesteCongediFrazionatiRowChangedEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediFrazionatiRowChanged(Me, New RichiesteCongediFrazionatiRowChangeEvent(CType(e.Row,RichiesteCongediFrazionatiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RichiesteCongediFrazionatiRowChangingEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediFrazionatiRowChanging(Me, New RichiesteCongediFrazionatiRowChangeEvent(CType(e.Row,RichiesteCongediFrazionatiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RichiesteCongediFrazionatiRowDeletedEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediFrazionatiRowDeleted(Me, New RichiesteCongediFrazionatiRowChangeEvent(CType(e.Row,RichiesteCongediFrazionatiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RichiesteCongediFrazionatiRowDeletingEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediFrazionatiRowDeleting(Me, New RichiesteCongediFrazionatiRowChangeEvent(CType(e.Row,RichiesteCongediFrazionatiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRichiesteCongediFrazionatiRow(ByVal row As RichiesteCongediFrazionatiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCongediFrazionatiRow
        Inherits DataRow
        
        Private tableRichiesteCongediFrazionati As RichiesteCongediFrazionatiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRichiesteCongediFrazionati = CType(Me.Table,RichiesteCongediFrazionatiDataTable)
        End Sub
        
        Public Property stato As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.statoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.statoColumn) = value
            End Set
        End Property
        
        Public Property ts As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.tsColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.tsColumn) = value
            End Set
        End Property
        
        Public Property IdRichiesta As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.IdRichiestaColumn),System.Guid)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.IdRichiestaColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.IdAccertatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.IdAccertatoreColumn) = value
            End Set
        End Property
        
        Public Property Data As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.DataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.DataColumn) = value
            End Set
        End Property
        
        Public Property DalleOre As Long
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.DalleOreColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.DalleOreColumn) = value
            End Set
        End Property
        
        Public Property AlleOre As Long
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.AlleOreColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.AlleOreColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.StatoApprovazioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property IdApprovatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.IdApprovatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.IdApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property Garantiti As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.GarantitiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.GarantitiColumn) = value
            End Set
        End Property
        
        Public Property CognomeNome As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.CognomeNomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.CognomeNomeColumn) = value
            End Set
        End Property
        
        Public Property EMail As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.EMailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.EMailColumn) = value
            End Set
        End Property
        
        Public Property Abilitato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.AbilitatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.AbilitatoColumn) = value
            End Set
        End Property
        
        Public Property DataUltimoAccesso As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.DataUltimoAccessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.DataUltimoAccessoColumn) = value
            End Set
        End Property
        
        Public Property OraUltimoAccesso As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.OraUltimoAccessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.OraUltimoAccessoColumn) = value
            End Set
        End Property
        
        Public Property NrAccessi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.NrAccessiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.NrAccessiColumn) = value
            End Set
        End Property
        
        Public Property TipoUtente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.TipoUtenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.TipoUtenteColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.IDColumn) = value
            End Set
        End Property
        
        Public Property Approvatore As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.ApprovatoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.ApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property Intero As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongediFrazionati.InteroColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongediFrazionati.InteroColumn) = value
            End Set
        End Property
        
        Public Function IsstatoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.statoColumn)
        End Function
        
        Public Sub SetstatoNull()
            Me(Me.tableRichiesteCongediFrazionati.statoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstsNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.tsColumn)
        End Function
        
        Public Sub SettsNull()
            Me(Me.tableRichiesteCongediFrazionati.tsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdRichiestaNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.IdRichiestaColumn)
        End Function
        
        Public Sub SetIdRichiestaNull()
            Me(Me.tableRichiesteCongediFrazionati.IdRichiestaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdAccertatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.IdAccertatoreColumn)
        End Function
        
        Public Sub SetIdAccertatoreNull()
            Me(Me.tableRichiesteCongediFrazionati.IdAccertatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableRichiesteCongediFrazionati.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalleOreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.DalleOreColumn)
        End Function
        
        Public Sub SetDalleOreNull()
            Me(Me.tableRichiesteCongediFrazionati.DalleOreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlleOreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.AlleOreColumn)
        End Function
        
        Public Sub SetAlleOreNull()
            Me(Me.tableRichiesteCongediFrazionati.AlleOreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableRichiesteCongediFrazionati.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableRichiesteCongediFrazionati.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.IdApprovatoreColumn)
        End Function
        
        Public Sub SetIdApprovatoreNull()
            Me(Me.tableRichiesteCongediFrazionati.IdApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGarantitiNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.GarantitiColumn)
        End Function
        
        Public Sub SetGarantitiNull()
            Me(Me.tableRichiesteCongediFrazionati.GarantitiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.CognomeNomeColumn)
        End Function
        
        Public Sub SetCognomeNomeNull()
            Me(Me.tableRichiesteCongediFrazionati.CognomeNomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.EMailColumn)
        End Function
        
        Public Sub SetEMailNull()
            Me(Me.tableRichiesteCongediFrazionati.EMailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAbilitatoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.AbilitatoColumn)
        End Function
        
        Public Sub SetAbilitatoNull()
            Me(Me.tableRichiesteCongediFrazionati.AbilitatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataUltimoAccessoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.DataUltimoAccessoColumn)
        End Function
        
        Public Sub SetDataUltimoAccessoNull()
            Me(Me.tableRichiesteCongediFrazionati.DataUltimoAccessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraUltimoAccessoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.OraUltimoAccessoColumn)
        End Function
        
        Public Sub SetOraUltimoAccessoNull()
            Me(Me.tableRichiesteCongediFrazionati.OraUltimoAccessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNrAccessiNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.NrAccessiColumn)
        End Function
        
        Public Sub SetNrAccessiNull()
            Me(Me.tableRichiesteCongediFrazionati.NrAccessiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoUtenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.TipoUtenteColumn)
        End Function
        
        Public Sub SetTipoUtenteNull()
            Me(Me.tableRichiesteCongediFrazionati.TipoUtenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableRichiesteCongediFrazionati.IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.ApprovatoreColumn)
        End Function
        
        Public Sub SetApprovatoreNull()
            Me(Me.tableRichiesteCongediFrazionati.ApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInteroNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongediFrazionati.InteroColumn)
        End Function
        
        Public Sub SetInteroNull()
            Me(Me.tableRichiesteCongediFrazionati.InteroColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCongediFrazionatiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RichiesteCongediFrazionatiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RichiesteCongediFrazionatiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RichiesteCongediFrazionatiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnts As DataColumn
        
        Private columnIdRichiesta As DataColumn
        
        Private columnIdAccertatoreRichiedente As DataColumn
        
        Private columnIdAccertatoreDestinatario As DataColumn
        
        Private columndata As DataColumn
        
        Private columnNecessari As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnIdApprovatore As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnCognomeNomeRichiedente As DataColumn
        
        Private columnCognomeNomeDestinatario As DataColumn
        
        Private columnApprovatore As DataColumn
        
        Private columnTurnoRichiedente As DataColumn
        
        Private columnTurnoDestinatario As DataColumn
        
        Friend Sub New()
            MyBase.New("RichiesteCambiTurno")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property tsColumn As DataColumn
            Get
                Return Me.columnts
            End Get
        End Property
        
        Friend ReadOnly Property IdRichiestaColumn As DataColumn
            Get
                Return Me.columnIdRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreRichiedenteColumn As DataColumn
            Get
                Return Me.columnIdAccertatoreRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreDestinatarioColumn As DataColumn
            Get
                Return Me.columnIdAccertatoreDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property dataColumn As DataColumn
            Get
                Return Me.columndata
            End Get
        End Property
        
        Friend ReadOnly Property NecessariColumn As DataColumn
            Get
                Return Me.columnNecessari
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property IdApprovatoreColumn As DataColumn
            Get
                Return Me.columnIdApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeRichiedenteColumn As DataColumn
            Get
                Return Me.columnCognomeNomeRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeDestinatarioColumn As DataColumn
            Get
                Return Me.columnCognomeNomeDestinatario
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoreColumn As DataColumn
            Get
                Return Me.columnApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property TurnoRichiedenteColumn As DataColumn
            Get
                Return Me.columnTurnoRichiedente
            End Get
        End Property
        
        Friend ReadOnly Property TurnoDestinatarioColumn As DataColumn
            Get
                Return Me.columnTurnoDestinatario
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RichiesteCambiTurnoRow
            Get
                Return CType(Me.Rows(index),RichiesteCambiTurnoRow)
            End Get
        End Property
        
        Public Event RichiesteCambiTurnoRowChanged As RichiesteCambiTurnoRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoRowChanging As RichiesteCambiTurnoRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoRowDeleted As RichiesteCambiTurnoRowChangeEventHandler
        
        Public Event RichiesteCambiTurnoRowDeleting As RichiesteCambiTurnoRowChangeEventHandler
        
        Public Overloads Sub AddRichiesteCambiTurnoRow(ByVal row As RichiesteCambiTurnoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRichiesteCambiTurnoRow(ByVal ts As Date, ByVal IdRichiesta As System.Guid, ByVal IdAccertatoreRichiedente As Integer, ByVal IdAccertatoreDestinatario As Integer, ByVal data As Date, ByVal Necessari As String, ByVal DataApprovazione As Date, ByVal IdApprovatore As Integer, ByVal StatoApprovazione As String, ByVal CognomeNomeRichiedente As String, ByVal CognomeNomeDestinatario As String, ByVal Approvatore As String, ByVal TurnoRichiedente As String, ByVal TurnoDestinatario As String) As RichiesteCambiTurnoRow
            Dim rowRichiesteCambiTurnoRow As RichiesteCambiTurnoRow = CType(Me.NewRow,RichiesteCambiTurnoRow)
            rowRichiesteCambiTurnoRow.ItemArray = New Object() {ts, IdRichiesta, IdAccertatoreRichiedente, IdAccertatoreDestinatario, data, Necessari, DataApprovazione, IdApprovatore, StatoApprovazione, CognomeNomeRichiedente, CognomeNomeDestinatario, Approvatore, TurnoRichiedente, TurnoDestinatario}
            Me.Rows.Add(rowRichiesteCambiTurnoRow)
            Return rowRichiesteCambiTurnoRow
        End Function
        
        Public Function FindByIdRichiesta(ByVal IdRichiesta As System.Guid) As RichiesteCambiTurnoRow
            Return CType(Me.Rows.Find(New Object() {IdRichiesta}),RichiesteCambiTurnoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RichiesteCambiTurnoDataTable = CType(MyBase.Clone,RichiesteCambiTurnoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RichiesteCambiTurnoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnts = Me.Columns("ts")
            Me.columnIdRichiesta = Me.Columns("IdRichiesta")
            Me.columnIdAccertatoreRichiedente = Me.Columns("IdAccertatoreRichiedente")
            Me.columnIdAccertatoreDestinatario = Me.Columns("IdAccertatoreDestinatario")
            Me.columndata = Me.Columns("data")
            Me.columnNecessari = Me.Columns("Necessari")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnIdApprovatore = Me.Columns("IdApprovatore")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnCognomeNomeRichiedente = Me.Columns("CognomeNomeRichiedente")
            Me.columnCognomeNomeDestinatario = Me.Columns("CognomeNomeDestinatario")
            Me.columnApprovatore = Me.Columns("Approvatore")
            Me.columnTurnoRichiedente = Me.Columns("TurnoRichiedente")
            Me.columnTurnoDestinatario = Me.Columns("TurnoDestinatario")
        End Sub
        
        Private Sub InitClass()
            Me.columnts = New DataColumn("ts", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnts)
            Me.columnIdRichiesta = New DataColumn("IdRichiesta", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdRichiesta)
            Me.columnIdAccertatoreRichiedente = New DataColumn("IdAccertatoreRichiedente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatoreRichiedente)
            Me.columnIdAccertatoreDestinatario = New DataColumn("IdAccertatoreDestinatario", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatoreDestinatario)
            Me.columndata = New DataColumn("data", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndata)
            Me.columnNecessari = New DataColumn("Necessari", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNecessari)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnIdApprovatore = New DataColumn("IdApprovatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdApprovatore)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnCognomeNomeRichiedente = New DataColumn("CognomeNomeRichiedente", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNomeRichiedente)
            Me.columnCognomeNomeDestinatario = New DataColumn("CognomeNomeDestinatario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNomeDestinatario)
            Me.columnApprovatore = New DataColumn("Approvatore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatore)
            Me.columnTurnoRichiedente = New DataColumn("TurnoRichiedente", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnoRichiedente)
            Me.columnTurnoDestinatario = New DataColumn("TurnoDestinatario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnoDestinatario)
            Me.Constraints.Add(New UniqueConstraint("dsAmministrazioneCongediKey3", New DataColumn() {Me.columnIdRichiesta}, true))
            Me.columnts.ReadOnly = true
            Me.columnIdRichiesta.AllowDBNull = false
            Me.columnIdRichiesta.ReadOnly = true
            Me.columnIdRichiesta.Unique = true
            Me.columnIdAccertatoreRichiedente.ReadOnly = true
            Me.columnIdAccertatoreDestinatario.ReadOnly = true
            Me.columndata.ReadOnly = true
            Me.columnNecessari.ReadOnly = true
            Me.columnDataApprovazione.ReadOnly = true
            Me.columnIdApprovatore.ReadOnly = true
            Me.columnStatoApprovazione.ReadOnly = true
            Me.columnCognomeNomeRichiedente.ReadOnly = true
            Me.columnCognomeNomeDestinatario.ReadOnly = true
            Me.columnTurnoRichiedente.ReadOnly = true
            Me.columnTurnoDestinatario.ReadOnly = true
        End Sub
        
        Public Function NewRichiesteCambiTurnoRow() As RichiesteCambiTurnoRow
            Return CType(Me.NewRow,RichiesteCambiTurnoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RichiesteCambiTurnoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RichiesteCambiTurnoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RichiesteCambiTurnoRowChangedEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoRowChanged(Me, New RichiesteCambiTurnoRowChangeEvent(CType(e.Row,RichiesteCambiTurnoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RichiesteCambiTurnoRowChangingEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoRowChanging(Me, New RichiesteCambiTurnoRowChangeEvent(CType(e.Row,RichiesteCambiTurnoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RichiesteCambiTurnoRowDeletedEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoRowDeleted(Me, New RichiesteCambiTurnoRowChangeEvent(CType(e.Row,RichiesteCambiTurnoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RichiesteCambiTurnoRowDeletingEvent) Is Nothing) Then
                RaiseEvent RichiesteCambiTurnoRowDeleting(Me, New RichiesteCambiTurnoRowChangeEvent(CType(e.Row,RichiesteCambiTurnoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRichiesteCambiTurnoRow(ByVal row As RichiesteCambiTurnoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoRow
        Inherits DataRow
        
        Private tableRichiesteCambiTurno As RichiesteCambiTurnoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRichiesteCambiTurno = CType(Me.Table,RichiesteCambiTurnoDataTable)
        End Sub
        
        Public Property ts As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.tsColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.tsColumn) = value
            End Set
        End Property
        
        Public Property IdRichiesta As System.Guid
            Get
                Return CType(Me(Me.tableRichiesteCambiTurno.IdRichiestaColumn),System.Guid)
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.IdRichiestaColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatoreRichiedente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.IdAccertatoreRichiedenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.IdAccertatoreRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatoreDestinatario As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.IdAccertatoreDestinatarioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.IdAccertatoreDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property data As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.dataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.dataColumn) = value
            End Set
        End Property
        
        Public Property Necessari As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.NecessariColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.NecessariColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property IdApprovatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.IdApprovatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.IdApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.StatoApprovazioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property CognomeNomeRichiedente As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.CognomeNomeRichiedenteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.CognomeNomeRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property CognomeNomeDestinatario As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.CognomeNomeDestinatarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.CognomeNomeDestinatarioColumn) = value
            End Set
        End Property
        
        Public Property Approvatore As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.ApprovatoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.ApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property TurnoRichiedente As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.TurnoRichiedenteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.TurnoRichiedenteColumn) = value
            End Set
        End Property
        
        Public Property TurnoDestinatario As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCambiTurno.TurnoDestinatarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCambiTurno.TurnoDestinatarioColumn) = value
            End Set
        End Property
        
        Public Function IstsNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.tsColumn)
        End Function
        
        Public Sub SettsNull()
            Me(Me.tableRichiesteCambiTurno.tsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdAccertatoreRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.IdAccertatoreRichiedenteColumn)
        End Function
        
        Public Sub SetIdAccertatoreRichiedenteNull()
            Me(Me.tableRichiesteCambiTurno.IdAccertatoreRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdAccertatoreDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.IdAccertatoreDestinatarioColumn)
        End Function
        
        Public Sub SetIdAccertatoreDestinatarioNull()
            Me(Me.tableRichiesteCambiTurno.IdAccertatoreDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdataNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.dataColumn)
        End Function
        
        Public Sub SetdataNull()
            Me(Me.tableRichiesteCambiTurno.dataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNecessariNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.NecessariColumn)
        End Function
        
        Public Sub SetNecessariNull()
            Me(Me.tableRichiesteCambiTurno.NecessariColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableRichiesteCambiTurno.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.IdApprovatoreColumn)
        End Function
        
        Public Sub SetIdApprovatoreNull()
            Me(Me.tableRichiesteCambiTurno.IdApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableRichiesteCambiTurno.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.CognomeNomeRichiedenteColumn)
        End Function
        
        Public Sub SetCognomeNomeRichiedenteNull()
            Me(Me.tableRichiesteCambiTurno.CognomeNomeRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.CognomeNomeDestinatarioColumn)
        End Function
        
        Public Sub SetCognomeNomeDestinatarioNull()
            Me(Me.tableRichiesteCambiTurno.CognomeNomeDestinatarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.ApprovatoreColumn)
        End Function
        
        Public Sub SetApprovatoreNull()
            Me(Me.tableRichiesteCambiTurno.ApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoRichiedenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.TurnoRichiedenteColumn)
        End Function
        
        Public Sub SetTurnoRichiedenteNull()
            Me(Me.tableRichiesteCambiTurno.TurnoRichiedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCambiTurno.TurnoDestinatarioColumn)
        End Function
        
        Public Sub SetTurnoDestinatarioNull()
            Me(Me.tableRichiesteCambiTurno.TurnoDestinatarioColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCambiTurnoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RichiesteCambiTurnoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RichiesteCambiTurnoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RichiesteCambiTurnoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCongediDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnts As DataColumn
        
        Private columnIdRichiesta As DataColumn
        
        Private columnIdAccertatore As DataColumn
        
        Private columnDalGiorno As DataColumn
        
        Private columnAlGiorno As DataColumn
        
        Private columnOrdine As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnIdApprovatore As DataColumn
        
        Private columnExpr1 As DataColumn
        
        Private columnCognomeNome As DataColumn
        
        Private columnEMail As DataColumn
        
        Private columnAbilitato As DataColumn
        
        Private columnDataUltimoAccesso As DataColumn
        
        Private columnOraUltimoAccesso As DataColumn
        
        Private columnNrAccessi As DataColumn
        
        Private columnTipoUtente As DataColumn
        
        Private columnID As DataColumn
        
        Private columnApprovatore As DataColumn
        
        Friend Sub New()
            MyBase.New("RichiesteCongedi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property tsColumn As DataColumn
            Get
                Return Me.columnts
            End Get
        End Property
        
        Friend ReadOnly Property IdRichiestaColumn As DataColumn
            Get
                Return Me.columnIdRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreColumn As DataColumn
            Get
                Return Me.columnIdAccertatore
            End Get
        End Property
        
        Friend ReadOnly Property DalGiornoColumn As DataColumn
            Get
                Return Me.columnDalGiorno
            End Get
        End Property
        
        Friend ReadOnly Property AlGiornoColumn As DataColumn
            Get
                Return Me.columnAlGiorno
            End Get
        End Property
        
        Friend ReadOnly Property OrdineColumn As DataColumn
            Get
                Return Me.columnOrdine
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property IdApprovatoreColumn As DataColumn
            Get
                Return Me.columnIdApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property Expr1Column As DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeColumn As DataColumn
            Get
                Return Me.columnCognomeNome
            End Get
        End Property
        
        Friend ReadOnly Property EMailColumn As DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        Friend ReadOnly Property AbilitatoColumn As DataColumn
            Get
                Return Me.columnAbilitato
            End Get
        End Property
        
        Friend ReadOnly Property DataUltimoAccessoColumn As DataColumn
            Get
                Return Me.columnDataUltimoAccesso
            End Get
        End Property
        
        Friend ReadOnly Property OraUltimoAccessoColumn As DataColumn
            Get
                Return Me.columnOraUltimoAccesso
            End Get
        End Property
        
        Friend ReadOnly Property NrAccessiColumn As DataColumn
            Get
                Return Me.columnNrAccessi
            End Get
        End Property
        
        Friend ReadOnly Property TipoUtenteColumn As DataColumn
            Get
                Return Me.columnTipoUtente
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoreColumn As DataColumn
            Get
                Return Me.columnApprovatore
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RichiesteCongediRow
            Get
                Return CType(Me.Rows(index),RichiesteCongediRow)
            End Get
        End Property
        
        Public Event RichiesteCongediRowChanged As RichiesteCongediRowChangeEventHandler
        
        Public Event RichiesteCongediRowChanging As RichiesteCongediRowChangeEventHandler
        
        Public Event RichiesteCongediRowDeleted As RichiesteCongediRowChangeEventHandler
        
        Public Event RichiesteCongediRowDeleting As RichiesteCongediRowChangeEventHandler
        
        Public Overloads Sub AddRichiesteCongediRow(ByVal row As RichiesteCongediRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRichiesteCongediRow( _
                    ByVal ts As Date,  _
                    ByVal IdRichiesta As System.Guid,  _
                    ByVal IdAccertatore As Integer,  _
                    ByVal DalGiorno As Date,  _
                    ByVal AlGiorno As Date,  _
                    ByVal Ordine As String,  _
                    ByVal StatoApprovazione As String,  _
                    ByVal DataApprovazione As Date,  _
                    ByVal IdApprovatore As Integer,  _
                    ByVal Expr1 As Date,  _
                    ByVal CognomeNome As String,  _
                    ByVal EMail As String,  _
                    ByVal Abilitato As Boolean,  _
                    ByVal DataUltimoAccesso As String,  _
                    ByVal OraUltimoAccesso As String,  _
                    ByVal NrAccessi As Integer,  _
                    ByVal TipoUtente As Integer,  _
                    ByVal Approvatore As String) As RichiesteCongediRow
            Dim rowRichiesteCongediRow As RichiesteCongediRow = CType(Me.NewRow,RichiesteCongediRow)
            rowRichiesteCongediRow.ItemArray = New Object() {ts, IdRichiesta, IdAccertatore, DalGiorno, AlGiorno, Ordine, StatoApprovazione, DataApprovazione, IdApprovatore, Expr1, CognomeNome, EMail, Abilitato, DataUltimoAccesso, OraUltimoAccesso, NrAccessi, TipoUtente, Nothing, Approvatore}
            Me.Rows.Add(rowRichiesteCongediRow)
            Return rowRichiesteCongediRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RichiesteCongediDataTable = CType(MyBase.Clone,RichiesteCongediDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RichiesteCongediDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnts = Me.Columns("ts")
            Me.columnIdRichiesta = Me.Columns("IdRichiesta")
            Me.columnIdAccertatore = Me.Columns("IdAccertatore")
            Me.columnDalGiorno = Me.Columns("DalGiorno")
            Me.columnAlGiorno = Me.Columns("AlGiorno")
            Me.columnOrdine = Me.Columns("Ordine")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnIdApprovatore = Me.Columns("IdApprovatore")
            Me.columnExpr1 = Me.Columns("Expr1")
            Me.columnCognomeNome = Me.Columns("CognomeNome")
            Me.columnEMail = Me.Columns("EMail")
            Me.columnAbilitato = Me.Columns("Abilitato")
            Me.columnDataUltimoAccesso = Me.Columns("DataUltimoAccesso")
            Me.columnOraUltimoAccesso = Me.Columns("OraUltimoAccesso")
            Me.columnNrAccessi = Me.Columns("NrAccessi")
            Me.columnTipoUtente = Me.Columns("TipoUtente")
            Me.columnID = Me.Columns("ID")
            Me.columnApprovatore = Me.Columns("Approvatore")
        End Sub
        
        Private Sub InitClass()
            Me.columnts = New DataColumn("ts", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnts)
            Me.columnIdRichiesta = New DataColumn("IdRichiesta", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdRichiesta)
            Me.columnIdAccertatore = New DataColumn("IdAccertatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatore)
            Me.columnDalGiorno = New DataColumn("DalGiorno", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalGiorno)
            Me.columnAlGiorno = New DataColumn("AlGiorno", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlGiorno)
            Me.columnOrdine = New DataColumn("Ordine", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdine)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnIdApprovatore = New DataColumn("IdApprovatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdApprovatore)
            Me.columnExpr1 = New DataColumn("Expr1", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpr1)
            Me.columnCognomeNome = New DataColumn("CognomeNome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNome)
            Me.columnEMail = New DataColumn("EMail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMail)
            Me.columnAbilitato = New DataColumn("Abilitato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilitato)
            Me.columnDataUltimoAccesso = New DataColumn("DataUltimoAccesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataUltimoAccesso)
            Me.columnOraUltimoAccesso = New DataColumn("OraUltimoAccesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraUltimoAccesso)
            Me.columnNrAccessi = New DataColumn("NrAccessi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNrAccessi)
            Me.columnTipoUtente = New DataColumn("TipoUtente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoUtente)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnApprovatore = New DataColumn("Approvatore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatore)
            Me.columnIdRichiesta.AllowDBNull = false
            Me.columnOrdine.ReadOnly = true
            Me.columnStatoApprovazione.ReadOnly = true
            Me.columnCognomeNome.ReadOnly = true
            Me.columnID.AutoIncrement = true
            Me.columnID.ReadOnly = true
        End Sub
        
        Public Function NewRichiesteCongediRow() As RichiesteCongediRow
            Return CType(Me.NewRow,RichiesteCongediRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RichiesteCongediRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RichiesteCongediRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RichiesteCongediRowChangedEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediRowChanged(Me, New RichiesteCongediRowChangeEvent(CType(e.Row,RichiesteCongediRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RichiesteCongediRowChangingEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediRowChanging(Me, New RichiesteCongediRowChangeEvent(CType(e.Row,RichiesteCongediRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RichiesteCongediRowDeletedEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediRowDeleted(Me, New RichiesteCongediRowChangeEvent(CType(e.Row,RichiesteCongediRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RichiesteCongediRowDeletingEvent) Is Nothing) Then
                RaiseEvent RichiesteCongediRowDeleting(Me, New RichiesteCongediRowChangeEvent(CType(e.Row,RichiesteCongediRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRichiesteCongediRow(ByVal row As RichiesteCongediRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCongediRow
        Inherits DataRow
        
        Private tableRichiesteCongedi As RichiesteCongediDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRichiesteCongedi = CType(Me.Table,RichiesteCongediDataTable)
        End Sub
        
        Public Property ts As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.tsColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.tsColumn) = value
            End Set
        End Property
        
        Public Property IdRichiesta As System.Guid
            Get
                Return CType(Me(Me.tableRichiesteCongedi.IdRichiestaColumn),System.Guid)
            End Get
            Set
                Me(Me.tableRichiesteCongedi.IdRichiestaColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.IdAccertatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.IdAccertatoreColumn) = value
            End Set
        End Property
        
        Public Property DalGiorno As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.DalGiornoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.DalGiornoColumn) = value
            End Set
        End Property
        
        Public Property AlGiorno As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.AlGiornoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.AlGiornoColumn) = value
            End Set
        End Property
        
        Public Property Ordine As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.OrdineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.OrdineColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.StatoApprovazioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property IdApprovatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.IdApprovatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.IdApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property Expr1 As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.Expr1Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.Expr1Column) = value
            End Set
        End Property
        
        Public Property CognomeNome As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.CognomeNomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.CognomeNomeColumn) = value
            End Set
        End Property
        
        Public Property EMail As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.EMailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.EMailColumn) = value
            End Set
        End Property
        
        Public Property Abilitato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.AbilitatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.AbilitatoColumn) = value
            End Set
        End Property
        
        Public Property DataUltimoAccesso As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.DataUltimoAccessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.DataUltimoAccessoColumn) = value
            End Set
        End Property
        
        Public Property OraUltimoAccesso As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.OraUltimoAccessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.OraUltimoAccessoColumn) = value
            End Set
        End Property
        
        Public Property NrAccessi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.NrAccessiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.NrAccessiColumn) = value
            End Set
        End Property
        
        Public Property TipoUtente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.TipoUtenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.TipoUtenteColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.IDColumn) = value
            End Set
        End Property
        
        Public Property Approvatore As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteCongedi.ApprovatoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteCongedi.ApprovatoreColumn) = value
            End Set
        End Property
        
        Public Function IstsNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.tsColumn)
        End Function
        
        Public Sub SettsNull()
            Me(Me.tableRichiesteCongedi.tsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdAccertatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.IdAccertatoreColumn)
        End Function
        
        Public Sub SetIdAccertatoreNull()
            Me(Me.tableRichiesteCongedi.IdAccertatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalGiornoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.DalGiornoColumn)
        End Function
        
        Public Sub SetDalGiornoNull()
            Me(Me.tableRichiesteCongedi.DalGiornoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlGiornoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.AlGiornoColumn)
        End Function
        
        Public Sub SetAlGiornoNull()
            Me(Me.tableRichiesteCongedi.AlGiornoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdineNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.OrdineColumn)
        End Function
        
        Public Sub SetOrdineNull()
            Me(Me.tableRichiesteCongedi.OrdineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableRichiesteCongedi.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableRichiesteCongedi.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.IdApprovatoreColumn)
        End Function
        
        Public Sub SetIdApprovatoreNull()
            Me(Me.tableRichiesteCongedi.IdApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.Expr1Column)
        End Function
        
        Public Sub SetExpr1Null()
            Me(Me.tableRichiesteCongedi.Expr1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.CognomeNomeColumn)
        End Function
        
        Public Sub SetCognomeNomeNull()
            Me(Me.tableRichiesteCongedi.CognomeNomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.EMailColumn)
        End Function
        
        Public Sub SetEMailNull()
            Me(Me.tableRichiesteCongedi.EMailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAbilitatoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.AbilitatoColumn)
        End Function
        
        Public Sub SetAbilitatoNull()
            Me(Me.tableRichiesteCongedi.AbilitatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataUltimoAccessoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.DataUltimoAccessoColumn)
        End Function
        
        Public Sub SetDataUltimoAccessoNull()
            Me(Me.tableRichiesteCongedi.DataUltimoAccessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraUltimoAccessoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.OraUltimoAccessoColumn)
        End Function
        
        Public Sub SetOraUltimoAccessoNull()
            Me(Me.tableRichiesteCongedi.OraUltimoAccessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNrAccessiNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.NrAccessiColumn)
        End Function
        
        Public Sub SetNrAccessiNull()
            Me(Me.tableRichiesteCongedi.NrAccessiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoUtenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.TipoUtenteColumn)
        End Function
        
        Public Sub SetTipoUtenteNull()
            Me(Me.tableRichiesteCongedi.TipoUtenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableRichiesteCongedi.IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteCongedi.ApprovatoreColumn)
        End Function
        
        Public Sub SetApprovatoreNull()
            Me(Me.tableRichiesteCongedi.ApprovatoreColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteCongediRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RichiesteCongediRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RichiesteCongediRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RichiesteCongediRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_GiustificativoRichiestaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApprovatore As DataColumn
        
        Private columnCognomeNome As DataColumn
        
        Private columnID As DataColumn
        
        Private columnAccertatoreId As DataColumn
        
        Private columnORDINE As DataColumn
        
        Private columncodice As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnAccertatori_GiustificativoCausaleId As DataColumn
        
        Private columnDataDa As DataColumn
        
        Private columnDataA As DataColumn
        
        Private columnOraDa As DataColumn
        
        Private columnOraA As DataColumn
        
        Private columnStatoGiustificativo As DataColumn
        
        Private columnDataRichiesta As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnApprovatoDa As DataColumn
        
        Private columnCreatedOn As DataColumn
        
        Private columnModifiedOn As DataColumn
        
        Private columnCreatedBy As DataColumn
        
        Private columnModifiedBy As DataColumn
        
        Private columnFrazionato As DataColumn
        
        Private columnDefaultApprovato As DataColumn
        
        Private columnPreavvisoGG As DataColumn
        
        Private columnNrMaxGG As DataColumn
        
        Private columnCausale As DataColumn
        
        Friend Sub New()
            MyBase.New("Accertatori_GiustificativoRichiesta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoreColumn As DataColumn
            Get
                Return Me.columnApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeColumn As DataColumn
            Get
                Return Me.columnCognomeNome
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property AccertatoreIdColumn As DataColumn
            Get
                Return Me.columnAccertatoreId
            End Get
        End Property
        
        Friend ReadOnly Property ORDINEColumn As DataColumn
            Get
                Return Me.columnORDINE
            End Get
        End Property
        
        Friend ReadOnly Property codiceColumn As DataColumn
            Get
                Return Me.columncodice
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property Accertatori_GiustificativoCausaleIdColumn As DataColumn
            Get
                Return Me.columnAccertatori_GiustificativoCausaleId
            End Get
        End Property
        
        Friend ReadOnly Property DataDaColumn As DataColumn
            Get
                Return Me.columnDataDa
            End Get
        End Property
        
        Friend ReadOnly Property DataAColumn As DataColumn
            Get
                Return Me.columnDataA
            End Get
        End Property
        
        Friend ReadOnly Property OraDaColumn As DataColumn
            Get
                Return Me.columnOraDa
            End Get
        End Property
        
        Friend ReadOnly Property OraAColumn As DataColumn
            Get
                Return Me.columnOraA
            End Get
        End Property
        
        Friend ReadOnly Property StatoGiustificativoColumn As DataColumn
            Get
                Return Me.columnStatoGiustificativo
            End Get
        End Property
        
        Friend ReadOnly Property DataRichiestaColumn As DataColumn
            Get
                Return Me.columnDataRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoDaColumn As DataColumn
            Get
                Return Me.columnApprovatoDa
            End Get
        End Property
        
        Friend ReadOnly Property CreatedOnColumn As DataColumn
            Get
                Return Me.columnCreatedOn
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedOnColumn As DataColumn
            Get
                Return Me.columnModifiedOn
            End Get
        End Property
        
        Friend ReadOnly Property CreatedByColumn As DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        Friend ReadOnly Property ModifiedByColumn As DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        Friend ReadOnly Property FrazionatoColumn As DataColumn
            Get
                Return Me.columnFrazionato
            End Get
        End Property
        
        Friend ReadOnly Property DefaultApprovatoColumn As DataColumn
            Get
                Return Me.columnDefaultApprovato
            End Get
        End Property
        
        Friend ReadOnly Property PreavvisoGGColumn As DataColumn
            Get
                Return Me.columnPreavvisoGG
            End Get
        End Property
        
        Friend ReadOnly Property NrMaxGGColumn As DataColumn
            Get
                Return Me.columnNrMaxGG
            End Get
        End Property
        
        Friend ReadOnly Property CausaleColumn As DataColumn
            Get
                Return Me.columnCausale
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Accertatori_GiustificativoRichiestaRow
            Get
                Return CType(Me.Rows(index),Accertatori_GiustificativoRichiestaRow)
            End Get
        End Property
        
        Public Event Accertatori_GiustificativoRichiestaRowChanged As Accertatori_GiustificativoRichiestaRowChangeEventHandler
        
        Public Event Accertatori_GiustificativoRichiestaRowChanging As Accertatori_GiustificativoRichiestaRowChangeEventHandler
        
        Public Event Accertatori_GiustificativoRichiestaRowDeleted As Accertatori_GiustificativoRichiestaRowChangeEventHandler
        
        Public Event Accertatori_GiustificativoRichiestaRowDeleting As Accertatori_GiustificativoRichiestaRowChangeEventHandler
        
        Public Overloads Sub AddAccertatori_GiustificativoRichiestaRow(ByVal row As Accertatori_GiustificativoRichiestaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccertatori_GiustificativoRichiestaRow( _
                    ByVal Approvatore As String,  _
                    ByVal CognomeNome As String,  _
                    ByVal ID As System.Guid,  _
                    ByVal AccertatoreId As Integer,  _
                    ByVal ORDINE As String,  _
                    ByVal codice As String,  _
                    ByVal StatoApprovazione As String,  _
                    ByVal Accertatori_GiustificativoCausaleId As System.Guid,  _
                    ByVal DataDa As Date,  _
                    ByVal DataA As Date,  _
                    ByVal OraDa As Date,  _
                    ByVal OraA As Date,  _
                    ByVal StatoGiustificativo As Integer,  _
                    ByVal DataRichiesta As Date,  _
                    ByVal DataApprovazione As Date,  _
                    ByVal ApprovatoDa As Boolean,  _
                    ByVal CreatedOn As Date,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal CreatedBy As String,  _
                    ByVal ModifiedBy As String,  _
                    ByVal Frazionato As Boolean,  _
                    ByVal DefaultApprovato As Boolean,  _
                    ByVal PreavvisoGG As Integer,  _
                    ByVal NrMaxGG As Integer,  _
                    ByVal Causale As String) As Accertatori_GiustificativoRichiestaRow
            Dim rowAccertatori_GiustificativoRichiestaRow As Accertatori_GiustificativoRichiestaRow = CType(Me.NewRow,Accertatori_GiustificativoRichiestaRow)
            rowAccertatori_GiustificativoRichiestaRow.ItemArray = New Object() {Approvatore, CognomeNome, ID, AccertatoreId, ORDINE, codice, StatoApprovazione, Accertatori_GiustificativoCausaleId, DataDa, DataA, OraDa, OraA, StatoGiustificativo, DataRichiesta, DataApprovazione, ApprovatoDa, CreatedOn, ModifiedOn, CreatedBy, ModifiedBy, Frazionato, DefaultApprovato, PreavvisoGG, NrMaxGG, Causale}
            Me.Rows.Add(rowAccertatori_GiustificativoRichiestaRow)
            Return rowAccertatori_GiustificativoRichiestaRow
        End Function
        
        Public Function FindByID(ByVal ID As System.Guid) As Accertatori_GiustificativoRichiestaRow
            Return CType(Me.Rows.Find(New Object() {ID}),Accertatori_GiustificativoRichiestaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Accertatori_GiustificativoRichiestaDataTable = CType(MyBase.Clone,Accertatori_GiustificativoRichiestaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Accertatori_GiustificativoRichiestaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApprovatore = Me.Columns("Approvatore")
            Me.columnCognomeNome = Me.Columns("CognomeNome")
            Me.columnID = Me.Columns("ID")
            Me.columnAccertatoreId = Me.Columns("AccertatoreId")
            Me.columnORDINE = Me.Columns("ORDINE")
            Me.columncodice = Me.Columns("codice")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnAccertatori_GiustificativoCausaleId = Me.Columns("Accertatori_GiustificativoCausaleId")
            Me.columnDataDa = Me.Columns("DataDa")
            Me.columnDataA = Me.Columns("DataA")
            Me.columnOraDa = Me.Columns("OraDa")
            Me.columnOraA = Me.Columns("OraA")
            Me.columnStatoGiustificativo = Me.Columns("StatoGiustificativo")
            Me.columnDataRichiesta = Me.Columns("DataRichiesta")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnApprovatoDa = Me.Columns("ApprovatoDa")
            Me.columnCreatedOn = Me.Columns("CreatedOn")
            Me.columnModifiedOn = Me.Columns("ModifiedOn")
            Me.columnCreatedBy = Me.Columns("CreatedBy")
            Me.columnModifiedBy = Me.Columns("ModifiedBy")
            Me.columnFrazionato = Me.Columns("Frazionato")
            Me.columnDefaultApprovato = Me.Columns("DefaultApprovato")
            Me.columnPreavvisoGG = Me.Columns("PreavvisoGG")
            Me.columnNrMaxGG = Me.Columns("NrMaxGG")
            Me.columnCausale = Me.Columns("Causale")
        End Sub
        
        Private Sub InitClass()
            Me.columnApprovatore = New DataColumn("Approvatore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatore)
            Me.columnCognomeNome = New DataColumn("CognomeNome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNome)
            Me.columnID = New DataColumn("ID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnAccertatoreId = New DataColumn("AccertatoreId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccertatoreId)
            Me.columnORDINE = New DataColumn("ORDINE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnORDINE)
            Me.columncodice = New DataColumn("codice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncodice)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnAccertatori_GiustificativoCausaleId = New DataColumn("Accertatori_GiustificativoCausaleId", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccertatori_GiustificativoCausaleId)
            Me.columnDataDa = New DataColumn("DataDa", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataDa)
            Me.columnDataA = New DataColumn("DataA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataA)
            Me.columnOraDa = New DataColumn("OraDa", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraDa)
            Me.columnOraA = New DataColumn("OraA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraA)
            Me.columnStatoGiustificativo = New DataColumn("StatoGiustificativo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoGiustificativo)
            Me.columnDataRichiesta = New DataColumn("DataRichiesta", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataRichiesta)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnApprovatoDa = New DataColumn("ApprovatoDa", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatoDa)
            Me.columnCreatedOn = New DataColumn("CreatedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedOn)
            Me.columnModifiedOn = New DataColumn("ModifiedOn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedOn)
            Me.columnCreatedBy = New DataColumn("CreatedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreatedBy)
            Me.columnModifiedBy = New DataColumn("ModifiedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifiedBy)
            Me.columnFrazionato = New DataColumn("Frazionato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrazionato)
            Me.columnDefaultApprovato = New DataColumn("DefaultApprovato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDefaultApprovato)
            Me.columnPreavvisoGG = New DataColumn("PreavvisoGG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreavvisoGG)
            Me.columnNrMaxGG = New DataColumn("NrMaxGG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNrMaxGG)
            Me.columnCausale = New DataColumn("Causale", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCausale)
            Me.Constraints.Add(New UniqueConstraint("dsAmministrazioneCongediKey2", New DataColumn() {Me.columnID}, true))
            Me.columnApprovatore.ReadOnly = true
            Me.columnCognomeNome.ReadOnly = true
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnAccertatoreId.AllowDBNull = false
            Me.columnORDINE.ReadOnly = true
            Me.columnStatoApprovazione.ReadOnly = true
        End Sub
        
        Public Function NewAccertatori_GiustificativoRichiestaRow() As Accertatori_GiustificativoRichiestaRow
            Return CType(Me.NewRow,Accertatori_GiustificativoRichiestaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Accertatori_GiustificativoRichiestaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Accertatori_GiustificativoRichiestaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Accertatori_GiustificativoRichiestaRowChangedEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoRichiestaRowChanged(Me, New Accertatori_GiustificativoRichiestaRowChangeEvent(CType(e.Row,Accertatori_GiustificativoRichiestaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Accertatori_GiustificativoRichiestaRowChangingEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoRichiestaRowChanging(Me, New Accertatori_GiustificativoRichiestaRowChangeEvent(CType(e.Row,Accertatori_GiustificativoRichiestaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Accertatori_GiustificativoRichiestaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoRichiestaRowDeleted(Me, New Accertatori_GiustificativoRichiestaRowChangeEvent(CType(e.Row,Accertatori_GiustificativoRichiestaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Accertatori_GiustificativoRichiestaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Accertatori_GiustificativoRichiestaRowDeleting(Me, New Accertatori_GiustificativoRichiestaRowChangeEvent(CType(e.Row,Accertatori_GiustificativoRichiestaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccertatori_GiustificativoRichiestaRow(ByVal row As Accertatori_GiustificativoRichiestaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_GiustificativoRichiestaRow
        Inherits DataRow
        
        Private tableAccertatori_GiustificativoRichiesta As Accertatori_GiustificativoRichiestaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccertatori_GiustificativoRichiesta = CType(Me.Table,Accertatori_GiustificativoRichiestaDataTable)
        End Sub
        
        Public Property Approvatore As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property CognomeNome As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.CognomeNomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.CognomeNomeColumn) = value
            End Set
        End Property
        
        Public Property ID As System.Guid
            Get
                Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.IDColumn),System.Guid)
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.IDColumn) = value
            End Set
        End Property
        
        Public Property AccertatoreId As Integer
            Get
                Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.AccertatoreIdColumn),Integer)
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.AccertatoreIdColumn) = value
            End Set
        End Property
        
        Public Property ORDINE As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ORDINEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ORDINEColumn) = value
            End Set
        End Property
        
        Public Property codice As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.codiceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.codiceColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.StatoApprovazioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property Accertatori_GiustificativoCausaleId As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.Accertatori_GiustificativoCausaleIdColumn),System.Guid)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.Accertatori_GiustificativoCausaleIdColumn) = value
            End Set
        End Property
        
        Public Property DataDa As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DataDaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DataDaColumn) = value
            End Set
        End Property
        
        Public Property DataA As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DataAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DataAColumn) = value
            End Set
        End Property
        
        Public Property OraDa As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.OraDaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.OraDaColumn) = value
            End Set
        End Property
        
        Public Property OraA As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.OraAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.OraAColumn) = value
            End Set
        End Property
        
        Public Property StatoGiustificativo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.StatoGiustificativoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.StatoGiustificativoColumn) = value
            End Set
        End Property
        
        Public Property DataRichiesta As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DataRichiestaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DataRichiestaColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property ApprovatoDa As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoDaColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoDaColumn) = value
            End Set
        End Property
        
        Public Property CreatedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedOnColumn) = value
            End Set
        End Property
        
        Public Property ModifiedOn As Date
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedOnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedOnColumn) = value
            End Set
        End Property
        
        Public Property CreatedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedByColumn) = value
            End Set
        End Property
        
        Public Property ModifiedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedByColumn) = value
            End Set
        End Property
        
        Public Property Frazionato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.FrazionatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.FrazionatoColumn) = value
            End Set
        End Property
        
        Public Property DefaultApprovato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.DefaultApprovatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.DefaultApprovatoColumn) = value
            End Set
        End Property
        
        Public Property PreavvisoGG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.PreavvisoGGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.PreavvisoGGColumn) = value
            End Set
        End Property
        
        Public Property NrMaxGG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.NrMaxGGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.NrMaxGGColumn) = value
            End Set
        End Property
        
        Public Property Causale As String
            Get
                Try 
                    Return CType(Me(Me.tableAccertatori_GiustificativoRichiesta.CausaleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccertatori_GiustificativoRichiesta.CausaleColumn) = value
            End Set
        End Property
        
        Public Function IsApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoreColumn)
        End Function
        
        Public Sub SetApprovatoreNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.CognomeNomeColumn)
        End Function
        
        Public Sub SetCognomeNomeNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.CognomeNomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsORDINENull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ORDINEColumn)
        End Function
        
        Public Sub SetORDINENull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ORDINEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscodiceNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.codiceColumn)
        End Function
        
        Public Sub SetcodiceNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.codiceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAccertatori_GiustificativoCausaleIdNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.Accertatori_GiustificativoCausaleIdColumn)
        End Function
        
        Public Sub SetAccertatori_GiustificativoCausaleIdNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.Accertatori_GiustificativoCausaleIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DataDaColumn)
        End Function
        
        Public Sub SetDataDaNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DataDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataANull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DataAColumn)
        End Function
        
        Public Sub SetDataANull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DataAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.OraDaColumn)
        End Function
        
        Public Sub SetOraDaNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.OraDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraANull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.OraAColumn)
        End Function
        
        Public Sub SetOraANull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.OraAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoGiustificativoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.StatoGiustificativoColumn)
        End Function
        
        Public Sub SetStatoGiustificativoNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.StatoGiustificativoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataRichiestaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DataRichiestaColumn)
        End Function
        
        Public Sub SetDataRichiestaNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DataRichiestaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApprovatoDaNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoDaColumn)
        End Function
        
        Public Sub SetApprovatoDaNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ApprovatoDaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.CreatedOnColumn)
        End Function
        
        Public Sub SetCreatedOnNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedOnNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ModifiedOnColumn)
        End Function
        
        Public Sub SetModifiedOnNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedOnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.CreatedByColumn)
        End Function
        
        Public Sub SetCreatedByNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.CreatedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.ModifiedByColumn)
        End Function
        
        Public Sub SetModifiedByNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.ModifiedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFrazionatoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.FrazionatoColumn)
        End Function
        
        Public Sub SetFrazionatoNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.FrazionatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDefaultApprovatoNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.DefaultApprovatoColumn)
        End Function
        
        Public Sub SetDefaultApprovatoNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.DefaultApprovatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreavvisoGGNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.PreavvisoGGColumn)
        End Function
        
        Public Sub SetPreavvisoGGNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.PreavvisoGGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNrMaxGGNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.NrMaxGGColumn)
        End Function
        
        Public Sub SetNrMaxGGNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.NrMaxGGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCausaleNull() As Boolean
            Return Me.IsNull(Me.tableAccertatori_GiustificativoRichiesta.CausaleColumn)
        End Function
        
        Public Sub SetCausaleNull()
            Me(Me.tableAccertatori_GiustificativoRichiesta.CausaleColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accertatori_GiustificativoRichiestaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Accertatori_GiustificativoRichiestaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Accertatori_GiustificativoRichiestaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Accertatori_GiustificativoRichiestaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
