'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2503
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsSpostamentoRiposo
    Inherits DataSet
    
    Private tableRichiesteSpostamentoRiposo As RichiesteSpostamentoRiposoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("RichiesteSpostamentoRiposo")) Is Nothing) Then
                Me.Tables.Add(New RichiesteSpostamentoRiposoDataTable(ds.Tables("RichiesteSpostamentoRiposo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RichiesteSpostamentoRiposo As RichiesteSpostamentoRiposoDataTable
        Get
            Return Me.tableRichiesteSpostamentoRiposo
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsSpostamentoRiposo = CType(MyBase.Clone,DsSpostamentoRiposo)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("RichiesteSpostamentoRiposo")) Is Nothing) Then
            Me.Tables.Add(New RichiesteSpostamentoRiposoDataTable(ds.Tables("RichiesteSpostamentoRiposo")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableRichiesteSpostamentoRiposo = CType(Me.Tables("RichiesteSpostamentoRiposo"),RichiesteSpostamentoRiposoDataTable)
        If (Not (Me.tableRichiesteSpostamentoRiposo) Is Nothing) Then
            Me.tableRichiesteSpostamentoRiposo.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsSpostamentoRiposo"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsSpostamentoRiposo.xsd"
        Me.Locale = New System.Globalization.CultureInfo("it-IT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableRichiesteSpostamentoRiposo = New RichiesteSpostamentoRiposoDataTable
        Me.Tables.Add(Me.tableRichiesteSpostamentoRiposo)
    End Sub
    
    Private Function ShouldSerializeRichiesteSpostamentoRiposo() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub RichiesteSpostamentoRiposoRowChangeEventHandler(ByVal sender As Object, ByVal e As RichiesteSpostamentoRiposoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteSpostamentoRiposoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnts As DataColumn
        
        Private columnIdRichiesta As DataColumn
        
        Private columnIdAccertatore As DataColumn
        
        Private columnDalGiorno As DataColumn
        
        Private columnTipoSpostamento As DataColumn
        
        Private columnAlGiorno As DataColumn
        
        Private columnDalleOre As DataColumn
        
        Private columnAlleOre As DataColumn
        
        Private columnStatoApprovazione As DataColumn
        
        Private columnDataApprovazione As DataColumn
        
        Private columnIdApprovatore As DataColumn
        
        Private columnTS1 As DataColumn
        
        Private columnCognomeNome As DataColumn
        
        Private columnEMail As DataColumn
        
        Private columnAbilitato As DataColumn
        
        Private columnDataUltimoAccesso As DataColumn
        
        Private columnOraUltimoAccesso As DataColumn
        
        Private columnNrAccessi As DataColumn
        
        Private columnTipoUtente As DataColumn
        
        Private columnID As DataColumn
        
        Private columnApprovatore As DataColumn
        
        Friend Sub New()
            MyBase.New("RichiesteSpostamentoRiposo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property tsColumn As DataColumn
            Get
                Return Me.columnts
            End Get
        End Property
        
        Friend ReadOnly Property IdRichiestaColumn As DataColumn
            Get
                Return Me.columnIdRichiesta
            End Get
        End Property
        
        Friend ReadOnly Property IdAccertatoreColumn As DataColumn
            Get
                Return Me.columnIdAccertatore
            End Get
        End Property
        
        Friend ReadOnly Property DalGiornoColumn As DataColumn
            Get
                Return Me.columnDalGiorno
            End Get
        End Property
        
        Friend ReadOnly Property TipoSpostamentoColumn As DataColumn
            Get
                Return Me.columnTipoSpostamento
            End Get
        End Property
        
        Friend ReadOnly Property AlGiornoColumn As DataColumn
            Get
                Return Me.columnAlGiorno
            End Get
        End Property
        
        Friend ReadOnly Property DalleOreColumn As DataColumn
            Get
                Return Me.columnDalleOre
            End Get
        End Property
        
        Friend ReadOnly Property AlleOreColumn As DataColumn
            Get
                Return Me.columnAlleOre
            End Get
        End Property
        
        Friend ReadOnly Property StatoApprovazioneColumn As DataColumn
            Get
                Return Me.columnStatoApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property DataApprovazioneColumn As DataColumn
            Get
                Return Me.columnDataApprovazione
            End Get
        End Property
        
        Friend ReadOnly Property IdApprovatoreColumn As DataColumn
            Get
                Return Me.columnIdApprovatore
            End Get
        End Property
        
        Friend ReadOnly Property TS1Column As DataColumn
            Get
                Return Me.columnTS1
            End Get
        End Property
        
        Friend ReadOnly Property CognomeNomeColumn As DataColumn
            Get
                Return Me.columnCognomeNome
            End Get
        End Property
        
        Friend ReadOnly Property EMailColumn As DataColumn
            Get
                Return Me.columnEMail
            End Get
        End Property
        
        Friend ReadOnly Property AbilitatoColumn As DataColumn
            Get
                Return Me.columnAbilitato
            End Get
        End Property
        
        Friend ReadOnly Property DataUltimoAccessoColumn As DataColumn
            Get
                Return Me.columnDataUltimoAccesso
            End Get
        End Property
        
        Friend ReadOnly Property OraUltimoAccessoColumn As DataColumn
            Get
                Return Me.columnOraUltimoAccesso
            End Get
        End Property
        
        Friend ReadOnly Property NrAccessiColumn As DataColumn
            Get
                Return Me.columnNrAccessi
            End Get
        End Property
        
        Friend ReadOnly Property TipoUtenteColumn As DataColumn
            Get
                Return Me.columnTipoUtente
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property ApprovatoreColumn As DataColumn
            Get
                Return Me.columnApprovatore
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RichiesteSpostamentoRiposoRow
            Get
                Return CType(Me.Rows(index),RichiesteSpostamentoRiposoRow)
            End Get
        End Property
        
        Public Event RichiesteSpostamentoRiposoRowChanged As RichiesteSpostamentoRiposoRowChangeEventHandler
        
        Public Event RichiesteSpostamentoRiposoRowChanging As RichiesteSpostamentoRiposoRowChangeEventHandler
        
        Public Event RichiesteSpostamentoRiposoRowDeleted As RichiesteSpostamentoRiposoRowChangeEventHandler
        
        Public Event RichiesteSpostamentoRiposoRowDeleting As RichiesteSpostamentoRiposoRowChangeEventHandler
        
        Public Overloads Sub AddRichiesteSpostamentoRiposoRow(ByVal row As RichiesteSpostamentoRiposoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRichiesteSpostamentoRiposoRow( _
                    ByVal ts As Date,  _
                    ByVal IdRichiesta As System.Guid,  _
                    ByVal IdAccertatore As Integer,  _
                    ByVal DalGiorno As Date,  _
                    ByVal TipoSpostamento As String,  _
                    ByVal AlGiorno As Date,  _
                    ByVal DalleOre As Long,  _
                    ByVal AlleOre As Long,  _
                    ByVal StatoApprovazione As String,  _
                    ByVal DataApprovazione As Date,  _
                    ByVal IdApprovatore As Integer,  _
                    ByVal TS1 As Date,  _
                    ByVal CognomeNome As String,  _
                    ByVal EMail As String,  _
                    ByVal Abilitato As Boolean,  _
                    ByVal DataUltimoAccesso As String,  _
                    ByVal OraUltimoAccesso As String,  _
                    ByVal NrAccessi As Integer,  _
                    ByVal TipoUtente As Integer,  _
                    ByVal Approvatore As String) As RichiesteSpostamentoRiposoRow
            Dim rowRichiesteSpostamentoRiposoRow As RichiesteSpostamentoRiposoRow = CType(Me.NewRow,RichiesteSpostamentoRiposoRow)
            rowRichiesteSpostamentoRiposoRow.ItemArray = New Object() {ts, IdRichiesta, IdAccertatore, DalGiorno, TipoSpostamento, AlGiorno, DalleOre, AlleOre, StatoApprovazione, DataApprovazione, IdApprovatore, TS1, CognomeNome, EMail, Abilitato, DataUltimoAccesso, OraUltimoAccesso, NrAccessi, TipoUtente, Nothing, Approvatore}
            Me.Rows.Add(rowRichiesteSpostamentoRiposoRow)
            Return rowRichiesteSpostamentoRiposoRow
        End Function
        
        Public Function FindByIdRichiesta(ByVal IdRichiesta As System.Guid) As RichiesteSpostamentoRiposoRow
            Return CType(Me.Rows.Find(New Object() {IdRichiesta}),RichiesteSpostamentoRiposoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RichiesteSpostamentoRiposoDataTable = CType(MyBase.Clone,RichiesteSpostamentoRiposoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RichiesteSpostamentoRiposoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnts = Me.Columns("ts")
            Me.columnIdRichiesta = Me.Columns("IdRichiesta")
            Me.columnIdAccertatore = Me.Columns("IdAccertatore")
            Me.columnDalGiorno = Me.Columns("DalGiorno")
            Me.columnTipoSpostamento = Me.Columns("TipoSpostamento")
            Me.columnAlGiorno = Me.Columns("AlGiorno")
            Me.columnDalleOre = Me.Columns("DalleOre")
            Me.columnAlleOre = Me.Columns("AlleOre")
            Me.columnStatoApprovazione = Me.Columns("StatoApprovazione")
            Me.columnDataApprovazione = Me.Columns("DataApprovazione")
            Me.columnIdApprovatore = Me.Columns("IdApprovatore")
            Me.columnTS1 = Me.Columns("TS1")
            Me.columnCognomeNome = Me.Columns("CognomeNome")
            Me.columnEMail = Me.Columns("EMail")
            Me.columnAbilitato = Me.Columns("Abilitato")
            Me.columnDataUltimoAccesso = Me.Columns("DataUltimoAccesso")
            Me.columnOraUltimoAccesso = Me.Columns("OraUltimoAccesso")
            Me.columnNrAccessi = Me.Columns("NrAccessi")
            Me.columnTipoUtente = Me.Columns("TipoUtente")
            Me.columnID = Me.Columns("ID")
            Me.columnApprovatore = Me.Columns("Approvatore")
        End Sub
        
        Private Sub InitClass()
            Me.columnts = New DataColumn("ts", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnts)
            Me.columnIdRichiesta = New DataColumn("IdRichiesta", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdRichiesta)
            Me.columnIdAccertatore = New DataColumn("IdAccertatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAccertatore)
            Me.columnDalGiorno = New DataColumn("DalGiorno", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalGiorno)
            Me.columnTipoSpostamento = New DataColumn("TipoSpostamento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoSpostamento)
            Me.columnAlGiorno = New DataColumn("AlGiorno", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlGiorno)
            Me.columnDalleOre = New DataColumn("DalleOre", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDalleOre)
            Me.columnAlleOre = New DataColumn("AlleOre", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlleOre)
            Me.columnStatoApprovazione = New DataColumn("StatoApprovazione", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatoApprovazione)
            Me.columnDataApprovazione = New DataColumn("DataApprovazione", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataApprovazione)
            Me.columnIdApprovatore = New DataColumn("IdApprovatore", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdApprovatore)
            Me.columnTS1 = New DataColumn("TS1", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTS1)
            Me.columnCognomeNome = New DataColumn("CognomeNome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCognomeNome)
            Me.columnEMail = New DataColumn("EMail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMail)
            Me.columnAbilitato = New DataColumn("Abilitato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilitato)
            Me.columnDataUltimoAccesso = New DataColumn("DataUltimoAccesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataUltimoAccesso)
            Me.columnOraUltimoAccesso = New DataColumn("OraUltimoAccesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOraUltimoAccesso)
            Me.columnNrAccessi = New DataColumn("NrAccessi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNrAccessi)
            Me.columnTipoUtente = New DataColumn("TipoUtente", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoUtente)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnApprovatore = New DataColumn("Approvatore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApprovatore)
            Me.Constraints.Add(New UniqueConstraint("DsSpostamentoRiposoKey1", New DataColumn() {Me.columnIdRichiesta}, true))
            Me.columnIdRichiesta.AllowDBNull = false
            Me.columnIdRichiesta.Unique = true
            Me.columnStatoApprovazione.ReadOnly = true
            Me.columnCognomeNome.ReadOnly = true
            Me.columnID.AutoIncrement = true
            Me.columnID.ReadOnly = true
        End Sub
        
        Public Function NewRichiesteSpostamentoRiposoRow() As RichiesteSpostamentoRiposoRow
            Return CType(Me.NewRow,RichiesteSpostamentoRiposoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RichiesteSpostamentoRiposoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RichiesteSpostamentoRiposoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RichiesteSpostamentoRiposoRowChangedEvent) Is Nothing) Then
                RaiseEvent RichiesteSpostamentoRiposoRowChanged(Me, New RichiesteSpostamentoRiposoRowChangeEvent(CType(e.Row,RichiesteSpostamentoRiposoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RichiesteSpostamentoRiposoRowChangingEvent) Is Nothing) Then
                RaiseEvent RichiesteSpostamentoRiposoRowChanging(Me, New RichiesteSpostamentoRiposoRowChangeEvent(CType(e.Row,RichiesteSpostamentoRiposoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RichiesteSpostamentoRiposoRowDeletedEvent) Is Nothing) Then
                RaiseEvent RichiesteSpostamentoRiposoRowDeleted(Me, New RichiesteSpostamentoRiposoRowChangeEvent(CType(e.Row,RichiesteSpostamentoRiposoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RichiesteSpostamentoRiposoRowDeletingEvent) Is Nothing) Then
                RaiseEvent RichiesteSpostamentoRiposoRowDeleting(Me, New RichiesteSpostamentoRiposoRowChangeEvent(CType(e.Row,RichiesteSpostamentoRiposoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRichiesteSpostamentoRiposoRow(ByVal row As RichiesteSpostamentoRiposoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteSpostamentoRiposoRow
        Inherits DataRow
        
        Private tableRichiesteSpostamentoRiposo As RichiesteSpostamentoRiposoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRichiesteSpostamentoRiposo = CType(Me.Table,RichiesteSpostamentoRiposoDataTable)
        End Sub
        
        Public Property ts As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.tsColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.tsColumn) = value
            End Set
        End Property
        
        Public Property IdRichiesta As System.Guid
            Get
                Return CType(Me(Me.tableRichiesteSpostamentoRiposo.IdRichiestaColumn),System.Guid)
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.IdRichiestaColumn) = value
            End Set
        End Property
        
        Public Property IdAccertatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.IdAccertatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.IdAccertatoreColumn) = value
            End Set
        End Property
        
        Public Property DalGiorno As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.DalGiornoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.DalGiornoColumn) = value
            End Set
        End Property
        
        Public Property TipoSpostamento As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.TipoSpostamentoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.TipoSpostamentoColumn) = value
            End Set
        End Property
        
        Public Property AlGiorno As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.AlGiornoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.AlGiornoColumn) = value
            End Set
        End Property
        
        Public Property DalleOre As Long
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.DalleOreColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.DalleOreColumn) = value
            End Set
        End Property
        
        Public Property AlleOre As Long
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.AlleOreColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.AlleOreColumn) = value
            End Set
        End Property
        
        Public Property StatoApprovazione As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.StatoApprovazioneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.StatoApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property DataApprovazione As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.DataApprovazioneColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.DataApprovazioneColumn) = value
            End Set
        End Property
        
        Public Property IdApprovatore As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.IdApprovatoreColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.IdApprovatoreColumn) = value
            End Set
        End Property
        
        Public Property TS1 As Date
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.TS1Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.TS1Column) = value
            End Set
        End Property
        
        Public Property CognomeNome As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.CognomeNomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.CognomeNomeColumn) = value
            End Set
        End Property
        
        Public Property EMail As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.EMailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.EMailColumn) = value
            End Set
        End Property
        
        Public Property Abilitato As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.AbilitatoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.AbilitatoColumn) = value
            End Set
        End Property
        
        Public Property DataUltimoAccesso As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.DataUltimoAccessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.DataUltimoAccessoColumn) = value
            End Set
        End Property
        
        Public Property OraUltimoAccesso As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.OraUltimoAccessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.OraUltimoAccessoColumn) = value
            End Set
        End Property
        
        Public Property NrAccessi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.NrAccessiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.NrAccessiColumn) = value
            End Set
        End Property
        
        Public Property TipoUtente As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.TipoUtenteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.TipoUtenteColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.IDColumn) = value
            End Set
        End Property
        
        Public Property Approvatore As String
            Get
                Try 
                    Return CType(Me(Me.tableRichiesteSpostamentoRiposo.ApprovatoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRichiesteSpostamentoRiposo.ApprovatoreColumn) = value
            End Set
        End Property
        
        Public Function IstsNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.tsColumn)
        End Function
        
        Public Sub SettsNull()
            Me(Me.tableRichiesteSpostamentoRiposo.tsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdAccertatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.IdAccertatoreColumn)
        End Function
        
        Public Sub SetIdAccertatoreNull()
            Me(Me.tableRichiesteSpostamentoRiposo.IdAccertatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalGiornoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.DalGiornoColumn)
        End Function
        
        Public Sub SetDalGiornoNull()
            Me(Me.tableRichiesteSpostamentoRiposo.DalGiornoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoSpostamentoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.TipoSpostamentoColumn)
        End Function
        
        Public Sub SetTipoSpostamentoNull()
            Me(Me.tableRichiesteSpostamentoRiposo.TipoSpostamentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlGiornoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.AlGiornoColumn)
        End Function
        
        Public Sub SetAlGiornoNull()
            Me(Me.tableRichiesteSpostamentoRiposo.AlGiornoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDalleOreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.DalleOreColumn)
        End Function
        
        Public Sub SetDalleOreNull()
            Me(Me.tableRichiesteSpostamentoRiposo.DalleOreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlleOreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.AlleOreColumn)
        End Function
        
        Public Sub SetAlleOreNull()
            Me(Me.tableRichiesteSpostamentoRiposo.AlleOreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatoApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.StatoApprovazioneColumn)
        End Function
        
        Public Sub SetStatoApprovazioneNull()
            Me(Me.tableRichiesteSpostamentoRiposo.StatoApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataApprovazioneNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.DataApprovazioneColumn)
        End Function
        
        Public Sub SetDataApprovazioneNull()
            Me(Me.tableRichiesteSpostamentoRiposo.DataApprovazioneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.IdApprovatoreColumn)
        End Function
        
        Public Sub SetIdApprovatoreNull()
            Me(Me.tableRichiesteSpostamentoRiposo.IdApprovatoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTS1Null() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.TS1Column)
        End Function
        
        Public Sub SetTS1Null()
            Me(Me.tableRichiesteSpostamentoRiposo.TS1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCognomeNomeNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.CognomeNomeColumn)
        End Function
        
        Public Sub SetCognomeNomeNull()
            Me(Me.tableRichiesteSpostamentoRiposo.CognomeNomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMailNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.EMailColumn)
        End Function
        
        Public Sub SetEMailNull()
            Me(Me.tableRichiesteSpostamentoRiposo.EMailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAbilitatoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.AbilitatoColumn)
        End Function
        
        Public Sub SetAbilitatoNull()
            Me(Me.tableRichiesteSpostamentoRiposo.AbilitatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataUltimoAccessoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.DataUltimoAccessoColumn)
        End Function
        
        Public Sub SetDataUltimoAccessoNull()
            Me(Me.tableRichiesteSpostamentoRiposo.DataUltimoAccessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOraUltimoAccessoNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.OraUltimoAccessoColumn)
        End Function
        
        Public Sub SetOraUltimoAccessoNull()
            Me(Me.tableRichiesteSpostamentoRiposo.OraUltimoAccessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNrAccessiNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.NrAccessiColumn)
        End Function
        
        Public Sub SetNrAccessiNull()
            Me(Me.tableRichiesteSpostamentoRiposo.NrAccessiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoUtenteNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.TipoUtenteColumn)
        End Function
        
        Public Sub SetTipoUtenteNull()
            Me(Me.tableRichiesteSpostamentoRiposo.TipoUtenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableRichiesteSpostamentoRiposo.IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApprovatoreNull() As Boolean
            Return Me.IsNull(Me.tableRichiesteSpostamentoRiposo.ApprovatoreColumn)
        End Function
        
        Public Sub SetApprovatoreNull()
            Me(Me.tableRichiesteSpostamentoRiposo.ApprovatoreColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RichiesteSpostamentoRiposoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RichiesteSpostamentoRiposoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RichiesteSpostamentoRiposoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RichiesteSpostamentoRiposoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
